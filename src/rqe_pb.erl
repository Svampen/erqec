%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.3
-module(rqe_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_NodeStatus/1, enum_value_by_symbol_NodeStatus/1]).
-export(['enum_symbol_by_value_rq_item_type_options.Operator'/1, 'enum_value_by_symbol_rq_item_type_options.Operator'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'NodeStatus'() :: 'ONLINE' | 'OFFLINE' | 'TEMP_OFFLINE' | 'UNKNOWN'.
-type 'rq_item_type_options.Operator'() :: 'NULL' | 'GT' | 'LT' | 'GTE' | 'LTE' | 'AND' | 'NOT' | 'COUNT'.
-export_type(['NodeStatus'/0, 'rq_item_type_options.Operator'/0]).

%% message types
-type node_info() ::
      #{name                    => iodata(),        % = 1
        node_status             => 'ONLINE' | 'OFFLINE' | 'TEMP_OFFLINE' | 'UNKNOWN' | integer(), % = 2, enum NodeStatus
        rq_count                => integer()        % = 3, 32 bits
       }.

-type status_request() ::
      #{
       }.

-type status_response() ::
      #{node_info               => [node_info()]    % = 1
       }.

-type rq_item_type_options() ::
      #{operator                => 'NULL' | 'GT' | 'LT' | 'GTE' | 'LTE' | 'AND' | 'NOT' | 'COUNT' | integer(), % = 1, enum rq_item_type_options.Operator
        count                   => integer()        % = 2, 32 bits
       }.

-type rq_item() ::
      #{key                     => iodata(),        % = 1
        value                   => {integer, integer()} | {string, iodata()} | {rq, rq()} | {boolean, boolean() | 0 | 1}, % oneof
        type_options            => rq_item_type_options() % = 6
       }.

-type rq_label() ::
      #{key                     => iodata(),        % = 1
        value                   => iodata()         % = 2
       }.

-type rq() ::
      #{rq_items                => [rq_item()],     % = 1
        uuid                    => iodata()         % = 2
       }.

-type add_rq_request() ::
      #{rq                      => rq(),            % = 1
        labels                  => rq_labels()      % = 2
       }.

-type rq_labels() ::
      #{labels                  => [rq_label()]     % = 1
       }.

-type add_rq_response() ::
      #{uuid                    => iodata()         % = 1
       }.

-type delete_rq_request() ::
      #{uuid                    => iodata()         % = 1
       }.

-type delete_rq_response() ::
      #{
       }.

-type get_rq_request() ::
      #{field                   => {uuid, iodata()} | {labels, rq_labels()} % oneof
       }.

-type get_rq_response() ::
      #{rq                      => rq(),            % = 1
        labels                  => rq_labels()      % = 2
       }.

-type entry_value() ::
      #{value                   => {string, iodata()} | {integer, integer()} | {boolean, boolean() | 0 | 1} % oneof
       }.

-type match_entry_request() ::
      #{entry                   => #{iodata() := entry_value()}, % = 1
        timeout                 => integer()        % = 2, 32 bits
       }.

-type match_entry_response() ::
      #{rqs                     => [rq()]           % = 1
       }.

-type request() ::
      #{msg                     => {status_request, status_request()} | {add_rq_request, add_rq_request()} | {delete_rq_request, delete_rq_request()} | {get_rq_request, get_rq_request()} | {match_entry_request, match_entry_request()} % oneof
       }.

-type response() ::
      #{msg                     => {status_response, status_response()} | {add_rq_response, add_rq_response()} | {delete_rq_response, delete_rq_response()} | {get_rq_response, get_rq_response()} | {match_entry_response, match_entry_response()} % oneof
       }.

-export_type(['node_info'/0, 'status_request'/0, 'status_response'/0, 'rq_item_type_options'/0, 'rq_item'/0, 'rq_label'/0, 'rq'/0, 'add_rq_request'/0, 'rq_labels'/0, 'add_rq_response'/0, 'delete_rq_request'/0, 'delete_rq_response'/0, 'get_rq_request'/0, 'get_rq_response'/0, 'entry_value'/0, 'match_entry_request'/0, 'match_entry_response'/0, 'request'/0, 'response'/0]).

-spec encode_msg(node_info() | status_request() | status_response() | rq_item_type_options() | rq_item() | rq_label() | rq() | add_rq_request() | rq_labels() | add_rq_response() | delete_rq_request() | delete_rq_response() | get_rq_request() | get_rq_response() | entry_value() | match_entry_request() | match_entry_response() | request() | response(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(node_info() | status_request() | status_response() | rq_item_type_options() | rq_item() | rq_label() | rq() | add_rq_request() | rq_labels() | add_rq_response() | delete_rq_request() | delete_rq_response() | get_rq_request() | get_rq_response() | entry_value() | match_entry_request() | match_entry_response() | request() | response(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      node_info ->
	  encode_msg_node_info(id(Msg, TrUserData), TrUserData);
      status_request ->
	  encode_msg_status_request(id(Msg, TrUserData),
				    TrUserData);
      status_response ->
	  encode_msg_status_response(id(Msg, TrUserData),
				     TrUserData);
      rq_item_type_options ->
	  encode_msg_rq_item_type_options(id(Msg, TrUserData),
					  TrUserData);
      rq_item ->
	  encode_msg_rq_item(id(Msg, TrUserData), TrUserData);
      rq_label ->
	  encode_msg_rq_label(id(Msg, TrUserData), TrUserData);
      rq -> encode_msg_rq(id(Msg, TrUserData), TrUserData);
      add_rq_request ->
	  encode_msg_add_rq_request(id(Msg, TrUserData),
				    TrUserData);
      rq_labels ->
	  encode_msg_rq_labels(id(Msg, TrUserData), TrUserData);
      add_rq_response ->
	  encode_msg_add_rq_response(id(Msg, TrUserData),
				     TrUserData);
      delete_rq_request ->
	  encode_msg_delete_rq_request(id(Msg, TrUserData),
				       TrUserData);
      delete_rq_response ->
	  encode_msg_delete_rq_response(id(Msg, TrUserData),
					TrUserData);
      get_rq_request ->
	  encode_msg_get_rq_request(id(Msg, TrUserData),
				    TrUserData);
      get_rq_response ->
	  encode_msg_get_rq_response(id(Msg, TrUserData),
				     TrUserData);
      entry_value ->
	  encode_msg_entry_value(id(Msg, TrUserData), TrUserData);
      match_entry_request ->
	  encode_msg_match_entry_request(id(Msg, TrUserData),
					 TrUserData);
      match_entry_response ->
	  encode_msg_match_entry_response(id(Msg, TrUserData),
					  TrUserData);
      request ->
	  encode_msg_request(id(Msg, TrUserData), TrUserData);
      response ->
	  encode_msg_response(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_node_info(Msg, TrUserData) ->
    encode_msg_node_info(Msg, <<>>, TrUserData).


encode_msg_node_info(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{node_status := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 'ONLINE'; TrF2 =:= 0 -> B1;
		    true ->
			e_enum_NodeStatus(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{rq_count := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= 0 -> B2;
	       true -> e_type_sint(TrF3, <<B2/binary, 24>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_status_request(_Msg, _TrUserData) -> <<>>.

encode_msg_status_response(Msg, TrUserData) ->
    encode_msg_status_response(Msg, <<>>, TrUserData).


encode_msg_status_response(#{} = M, Bin, TrUserData) ->
    case M of
      #{node_info := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true ->
		 e_field_status_response_node_info(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

encode_msg_rq_item_type_options(Msg, TrUserData) ->
    encode_msg_rq_item_type_options(Msg, <<>>, TrUserData).


encode_msg_rq_item_type_options(#{} = M, Bin,
				TrUserData) ->
    B1 = case M of
	   #{operator := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 'NULL'; TrF1 =:= 0 -> Bin;
		    true ->
			'e_enum_rq_item_type_options.Operator'(TrF1,
							       <<Bin/binary,
								 8>>,
							       TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{count := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_rq_item(Msg, TrUserData) ->
    encode_msg_rq_item(Msg, <<>>, TrUserData).


encode_msg_rq_item(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{key := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{value := F2} ->
	       case id(F2, TrUserData) of
		 {integer, TF2} ->
		     begin
		       TrTF2 = id(TF2, TrUserData),
		       e_type_sint(TrTF2, <<B1/binary, 16>>, TrUserData)
		     end;
		 {string, TF2} ->
		     begin
		       TrTF2 = id(TF2, TrUserData),
		       e_type_string(TrTF2, <<B1/binary, 26>>, TrUserData)
		     end;
		 {rq, TF2} ->
		     begin
		       TrTF2 = id(TF2, TrUserData),
		       e_mfield_rq_item_rq(TrTF2, <<B1/binary, 34>>,
					   TrUserData)
		     end;
		 {boolean, TF2} ->
		     begin
		       TrTF2 = id(TF2, TrUserData),
		       e_type_bool(TrTF2, <<B1/binary, 40>>, TrUserData)
		     end
	       end;
	   _ -> B1
	 end,
    case M of
      #{type_options := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= undefined -> B2;
	       true ->
		   e_mfield_rq_item_type_options(TrF3, <<B2/binary, 50>>,
						 TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_rq_label(Msg, TrUserData) ->
    encode_msg_rq_label(Msg, <<>>, TrUserData).


encode_msg_rq_label(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{key := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{value := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_rq(Msg, TrUserData) ->
    encode_msg_rq(Msg, <<>>, TrUserData).


encode_msg_rq(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{rq_items := F1} ->
	       TrF1 = id(F1, TrUserData),
	       if TrF1 == [] -> Bin;
		  true -> e_field_rq_rq_items(TrF1, Bin, TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{uuid := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_add_rq_request(Msg, TrUserData) ->
    encode_msg_add_rq_request(Msg, <<>>, TrUserData).


encode_msg_add_rq_request(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{rq := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_add_rq_request_rq(TrF1, <<Bin/binary, 10>>,
						   TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{labels := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_add_rq_request_labels(TrF2, <<B1/binary, 18>>,
						  TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_rq_labels(Msg, TrUserData) ->
    encode_msg_rq_labels(Msg, <<>>, TrUserData).


encode_msg_rq_labels(#{} = M, Bin, TrUserData) ->
    case M of
      #{labels := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true -> e_field_rq_labels_labels(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

encode_msg_add_rq_response(Msg, TrUserData) ->
    encode_msg_add_rq_response(Msg, <<>>, TrUserData).


encode_msg_add_rq_response(#{} = M, Bin, TrUserData) ->
    case M of
      #{uuid := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case is_empty_string(TrF1) of
	      true -> Bin;
	      false ->
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_delete_rq_request(Msg, TrUserData) ->
    encode_msg_delete_rq_request(Msg, <<>>, TrUserData).


encode_msg_delete_rq_request(#{} = M, Bin,
			     TrUserData) ->
    case M of
      #{uuid := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case is_empty_string(TrF1) of
	      true -> Bin;
	      false ->
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_delete_rq_response(_Msg, _TrUserData) ->
    <<>>.

encode_msg_get_rq_request(Msg, TrUserData) ->
    encode_msg_get_rq_request(Msg, <<>>, TrUserData).


encode_msg_get_rq_request(#{} = M, Bin, TrUserData) ->
    case M of
      #{field := F1} ->
	  case id(F1, TrUserData) of
	    {uuid, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_string(TrTF1, <<Bin/binary, 10>>, TrUserData)
		end;
	    {labels, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_get_rq_request_labels(TrTF1,
						 <<Bin/binary, 18>>, TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_get_rq_response(Msg, TrUserData) ->
    encode_msg_get_rq_response(Msg, <<>>, TrUserData).


encode_msg_get_rq_response(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{rq := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_get_rq_response_rq(TrF1, <<Bin/binary, 10>>,
						    TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{labels := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_get_rq_response_labels(TrF2, <<B1/binary, 18>>,
						   TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_entry_value(Msg, TrUserData) ->
    encode_msg_entry_value(Msg, <<>>, TrUserData).


encode_msg_entry_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  case id(F1, TrUserData) of
	    {string, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_string(TrTF1, <<Bin/binary, 10>>, TrUserData)
		end;
	    {integer, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_sint(TrTF1, <<Bin/binary, 16>>, TrUserData)
		end;
	    {boolean, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_bool(TrTF1, <<Bin/binary, 24>>, TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_match_entry_request(Msg, TrUserData) ->
    encode_msg_match_entry_request(Msg, <<>>, TrUserData).


encode_msg_match_entry_request(#{} = M, Bin,
			       TrUserData) ->
    B1 = case M of
	   #{entry := F1} ->
	       TrF1 = 'tr_encode_match_entry_request.entry'(F1,
							    TrUserData),
	       if TrF1 == [] -> Bin;
		  true ->
		      e_field_match_entry_request_entry(TrF1, Bin, TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{timeout := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_match_entry_response(Msg, TrUserData) ->
    encode_msg_match_entry_response(Msg, <<>>, TrUserData).


encode_msg_match_entry_response(#{} = M, Bin,
				TrUserData) ->
    case M of
      #{rqs := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true ->
		 e_field_match_entry_response_rqs(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

encode_msg_request(Msg, TrUserData) ->
    encode_msg_request(Msg, <<>>, TrUserData).


encode_msg_request(#{} = M, Bin, TrUserData) ->
    case M of
      #{msg := F1} ->
	  case id(F1, TrUserData) of
	    {status_request, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_request_status_request(TrTF1,
						  <<Bin/binary, 10>>,
						  TrUserData)
		end;
	    {add_rq_request, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_request_add_rq_request(TrTF1,
						  <<Bin/binary, 18>>,
						  TrUserData)
		end;
	    {delete_rq_request, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_request_delete_rq_request(TrTF1,
						     <<Bin/binary, 26>>,
						     TrUserData)
		end;
	    {get_rq_request, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_request_get_rq_request(TrTF1,
						  <<Bin/binary, 34>>,
						  TrUserData)
		end;
	    {match_entry_request, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_request_match_entry_request(TrTF1,
						       <<Bin/binary, 42>>,
						       TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_response(Msg, TrUserData) ->
    encode_msg_response(Msg, <<>>, TrUserData).


encode_msg_response(#{} = M, Bin, TrUserData) ->
    case M of
      #{msg := F1} ->
	  case id(F1, TrUserData) of
	    {status_response, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_response_status_response(TrTF1,
						    <<Bin/binary, 10>>,
						    TrUserData)
		end;
	    {add_rq_response, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_response_add_rq_response(TrTF1,
						    <<Bin/binary, 18>>,
						    TrUserData)
		end;
	    {delete_rq_response, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_response_delete_rq_response(TrTF1,
						       <<Bin/binary, 26>>,
						       TrUserData)
		end;
	    {get_rq_response, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_response_get_rq_response(TrTF1,
						    <<Bin/binary, 34>>,
						    TrUserData)
		end;
	    {match_entry_response, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_response_match_entry_response(TrTF1,
							 <<Bin/binary, 42>>,
							 TrUserData)
		end
	  end;
      _ -> Bin
    end.

e_mfield_status_response_node_info(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_node_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_status_response_node_info([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_status_response_node_info(id(Elem,
						 TrUserData),
					      Bin2, TrUserData),
    e_field_status_response_node_info(Rest, Bin3,
				      TrUserData);
e_field_status_response_node_info([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_rq_item_rq(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_rq(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rq_item_type_options(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_rq_item_type_options(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rq_rq_items(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_rq_item(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rq_rq_items([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_rq_rq_items(id(Elem, TrUserData), Bin2,
				TrUserData),
    e_field_rq_rq_items(Rest, Bin3, TrUserData);
e_field_rq_rq_items([], Bin, _TrUserData) -> Bin.

e_mfield_add_rq_request_rq(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_rq(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_add_rq_request_labels(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_rq_labels(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_rq_labels_labels(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_rq_label(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_rq_labels_labels([Elem | Rest], Bin,
			 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_rq_labels_labels(id(Elem, TrUserData),
				     Bin2, TrUserData),
    e_field_rq_labels_labels(Rest, Bin3, TrUserData);
e_field_rq_labels_labels([], Bin, _TrUserData) -> Bin.

e_mfield_get_rq_request_labels(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_rq_labels(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_get_rq_response_rq(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_rq(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_get_rq_response_labels(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_rq_labels(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_match_entry_request_entry(Msg, Bin,
				   TrUserData) ->
    SubBin = 'encode_msg_map<string,entry_value>'(Msg, <<>>,
						  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_match_entry_request_entry([Elem | Rest], Bin,
				  TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_match_entry_request_entry('tr_encode_match_entry_request.entry[x]'(Elem,
										    TrUserData),
					   Bin2, TrUserData),
    e_field_match_entry_request_entry(Rest, Bin3,
				      TrUserData);
e_field_match_entry_request_entry([], Bin,
				  _TrUserData) ->
    Bin.

e_mfield_match_entry_response_rqs(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_rq(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_match_entry_response_rqs([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_match_entry_response_rqs(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_match_entry_response_rqs(Rest, Bin3,
				     TrUserData);
e_field_match_entry_response_rqs([], Bin,
				 _TrUserData) ->
    Bin.

e_mfield_request_status_request(_Msg, Bin,
				_TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_request_add_rq_request(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_add_rq_request(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_request_delete_rq_request(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_delete_rq_request(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_request_get_rq_request(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_get_rq_request(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_request_match_entry_request(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_match_entry_request(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_response_status_response(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_status_response(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_response_add_rq_response(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_add_rq_response(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_response_delete_rq_response(_Msg, Bin,
				     _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_response_get_rq_response(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_get_rq_response(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_response_match_entry_response(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_match_entry_response(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'encode_msg_map<string,entry_value>'(#{key := F1,
				       value := F2},
				     Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      'e_mfield_map<string,entry_value>_value'(TrF2,
					       <<B1/binary, 18>>, TrUserData)
    end.

'e_mfield_map<string,entry_value>_value'(Msg, Bin,
					 TrUserData) ->
    SubBin = encode_msg_entry_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_enum_NodeStatus('ONLINE', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_NodeStatus('OFFLINE', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_NodeStatus('TEMP_OFFLINE', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_NodeStatus('UNKNOWN', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
e_enum_NodeStatus(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_rq_item_type_options.Operator'('NULL', Bin,
				       _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_rq_item_type_options.Operator'('GT', Bin,
				       _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_rq_item_type_options.Operator'('LT', Bin,
				       _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_rq_item_type_options.Operator'('GTE', Bin,
				       _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_rq_item_type_options.Operator'('LTE', Bin,
				       _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_rq_item_type_options.Operator'('AND', Bin,
				       _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_rq_item_type_options.Operator'('NOT', Bin,
				       _TrUserData) ->
    <<Bin/binary, 6>>;
'e_enum_rq_item_type_options.Operator'('COUNT', Bin,
				       _TrUserData) ->
    <<Bin/binary, 7>>;
'e_enum_rq_item_type_options.Operator'(V, Bin,
				       _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(node_info, Bin, TrUserData) ->
    id(decode_msg_node_info(Bin, TrUserData), TrUserData);
decode_msg_2_doit(status_request, Bin, TrUserData) ->
    id(decode_msg_status_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(status_response, Bin, TrUserData) ->
    id(decode_msg_status_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(rq_item_type_options, Bin,
		  TrUserData) ->
    id(decode_msg_rq_item_type_options(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(rq_item, Bin, TrUserData) ->
    id(decode_msg_rq_item(Bin, TrUserData), TrUserData);
decode_msg_2_doit(rq_label, Bin, TrUserData) ->
    id(decode_msg_rq_label(Bin, TrUserData), TrUserData);
decode_msg_2_doit(rq, Bin, TrUserData) ->
    id(decode_msg_rq(Bin, TrUserData), TrUserData);
decode_msg_2_doit(add_rq_request, Bin, TrUserData) ->
    id(decode_msg_add_rq_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(rq_labels, Bin, TrUserData) ->
    id(decode_msg_rq_labels(Bin, TrUserData), TrUserData);
decode_msg_2_doit(add_rq_response, Bin, TrUserData) ->
    id(decode_msg_add_rq_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(delete_rq_request, Bin, TrUserData) ->
    id(decode_msg_delete_rq_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(delete_rq_response, Bin,
		  TrUserData) ->
    id(decode_msg_delete_rq_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(get_rq_request, Bin, TrUserData) ->
    id(decode_msg_get_rq_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(get_rq_response, Bin, TrUserData) ->
    id(decode_msg_get_rq_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(entry_value, Bin, TrUserData) ->
    id(decode_msg_entry_value(Bin, TrUserData), TrUserData);
decode_msg_2_doit(match_entry_request, Bin,
		  TrUserData) ->
    id(decode_msg_match_entry_request(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(match_entry_response, Bin,
		  TrUserData) ->
    id(decode_msg_match_entry_response(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(request, Bin, TrUserData) ->
    id(decode_msg_request(Bin, TrUserData), TrUserData);
decode_msg_2_doit(response, Bin, TrUserData) ->
    id(decode_msg_response(Bin, TrUserData), TrUserData).



decode_msg_node_info(Bin, TrUserData) ->
    dfp_read_field_def_node_info(Bin, 0, 0,
				 id(<<>>, TrUserData), id('ONLINE', TrUserData),
				 id(0, TrUserData), TrUserData).

dfp_read_field_def_node_info(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_node_info_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_node_info(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_node_info_node_status(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_node_info(<<24, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_node_info_rq_count(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_node_info(<<>>, 0, 0, F@_1, F@_2,
			     F@_3, _) ->
    #{name => F@_1, node_status => F@_2, rq_count => F@_3};
dfp_read_field_def_node_info(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData) ->
    dg_read_field_def_node_info(Other, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

dg_read_field_def_node_info(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_node_info(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_node_info(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_node_info_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      16 ->
	  d_field_node_info_node_status(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      24 ->
	  d_field_node_info_rq_count(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_node_info(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    1 ->
		skip_64_node_info(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    2 ->
		skip_length_delimited_node_info(Rest, 0, 0, F@_1, F@_2,
						F@_3, TrUserData);
	    3 ->
		skip_group_node_info(Rest, Key bsr 3, 0, F@_1, F@_2,
				     F@_3, TrUserData);
	    5 ->
		skip_32_node_info(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData)
	  end
    end;
dg_read_field_def_node_info(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #{name => F@_1, node_status => F@_2, rq_count => F@_3}.

d_field_node_info_name(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_node_info_name(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_node_info_name(<<0:1, X:7, Rest/binary>>, N,
		       Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_node_info(RestF, 0, 0, NewFValue,
				 F@_2, F@_3, TrUserData).

d_field_node_info_node_status(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_node_info_node_status(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_node_info_node_status(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_NodeStatus(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_node_info(RestF, 0, 0, F@_1,
				 NewFValue, F@_3, TrUserData).

d_field_node_info_rq_count(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_node_info_rq_count(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_node_info_rq_count(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    ZValue = X bsl N + Acc,
			    if ZValue band 1 =:= 0 ->
				   id(ZValue bsr 1, {var, 1003, TrUserData});
			       true ->
				   id(-(ZValue + 1 bsr 1),
				      {var, 1003, TrUserData})
			    end
			  end,
			  Rest},
    dfp_read_field_def_node_info(RestF, 0, 0, F@_1, F@_2,
				 NewFValue, TrUserData).

skip_varint_node_info(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_node_info(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
skip_varint_node_info(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_node_info(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_length_delimited_node_info(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_node_info(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
skip_length_delimited_node_info(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_node_info(Rest2, 0, 0, F@_1, F@_2,
				 F@_3, TrUserData).

skip_group_node_info(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_node_info(Rest, 0, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_32_node_info(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_node_info(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

skip_64_node_info(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_node_info(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData).

decode_msg_status_request(Bin, TrUserData) ->
    dfp_read_field_def_status_request(Bin, 0, 0,
				      TrUserData).

dfp_read_field_def_status_request(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_status_request(Other, Z1, Z2,
				  TrUserData) ->
    dg_read_field_def_status_request(Other, Z1, Z2,
				     TrUserData).

dg_read_field_def_status_request(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_status_request(Rest, N + 7,
				     X bsl N + Acc, TrUserData);
dg_read_field_def_status_request(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_status_request(Rest, 0, 0, TrUserData);
      1 -> skip_64_status_request(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_status_request(Rest, 0, 0,
					       TrUserData);
      3 ->
	  skip_group_status_request(Rest, Key bsr 3, 0,
				    TrUserData);
      5 -> skip_32_status_request(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_status_request(<<>>, 0, 0, _) -> #{}.

skip_varint_status_request(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    skip_varint_status_request(Rest, Z1, Z2, TrUserData);
skip_varint_status_request(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, TrUserData) ->
    dfp_read_field_def_status_request(Rest, Z1, Z2,
				      TrUserData).

skip_length_delimited_status_request(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_status_request(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
skip_length_delimited_status_request(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_status_request(Rest2, 0, 0,
				      TrUserData).

skip_group_status_request(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_status_request(Rest, 0, Z2,
				      TrUserData).

skip_32_status_request(<<_:32, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_status_request(Rest, Z1, Z2,
				      TrUserData).

skip_64_status_request(<<_:64, Rest/binary>>, Z1, Z2,
		       TrUserData) ->
    dfp_read_field_def_status_request(Rest, Z1, Z2,
				      TrUserData).

decode_msg_status_response(Bin, TrUserData) ->
    dfp_read_field_def_status_response(Bin, 0, 0,
				       id([], TrUserData), TrUserData).

dfp_read_field_def_status_response(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_status_response_node_info(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_status_response(<<>>, 0, 0, R1,
				   TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{node_info => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_status_response(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_status_response(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_status_response(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_status_response(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_status_response(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_status_response_node_info(Rest, 0, 0, F@_1,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_status_response(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_status_response(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_status_response(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_status_response(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_status_response(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_status_response(<<>>, 0, 0, R1,
				  TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{node_info => lists_reverse(R1, TrUserData)}
    end.

d_field_status_response_node_info(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_status_response_node_info(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_status_response_node_info(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_node_info(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_status_response(RestF, 0, 0,
				       cons(NewFValue, Prev, TrUserData),
				       TrUserData).

skip_varint_status_response(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_status_response(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_status_response(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_status_response(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_status_response(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_status_response(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_status_response(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_status_response(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_status_response(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_status_response(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_status_response(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_status_response(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_status_response(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_status_response(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_rq_item_type_options(Bin, TrUserData) ->
    dfp_read_field_def_rq_item_type_options(Bin, 0, 0,
					    id('NULL', TrUserData),
					    id(0, TrUserData), TrUserData).

dfp_read_field_def_rq_item_type_options(<<8,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_rq_item_type_options_operator(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_rq_item_type_options(<<16,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_rq_item_type_options_count(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_rq_item_type_options(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    #{operator => F@_1, count => F@_2};
dfp_read_field_def_rq_item_type_options(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    dg_read_field_def_rq_item_type_options(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

dg_read_field_def_rq_item_type_options(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rq_item_type_options(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
dg_read_field_def_rq_item_type_options(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_rq_item_type_options_operator(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      16 ->
	  d_field_rq_item_type_options_count(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rq_item_type_options(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		skip_64_rq_item_type_options(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		skip_length_delimited_rq_item_type_options(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		skip_group_rq_item_type_options(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		skip_32_rq_item_type_options(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
dg_read_field_def_rq_item_type_options(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #{operator => F@_1, count => F@_2}.

d_field_rq_item_type_options_operator(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_rq_item_type_options_operator(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_rq_item_type_options_operator(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_rq_item_type_options.Operator'(begin
						     <<Res:32/signed-native>> =
							 <<(X bsl N +
							      Acc):32/unsigned-native>>,
						     id(Res, TrUserData)
						   end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_rq_item_type_options(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

d_field_rq_item_type_options_count(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_rq_item_type_options_count(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_rq_item_type_options_count(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_rq_item_type_options(RestF, 0, 0,
					    F@_1, NewFValue, TrUserData).

skip_varint_rq_item_type_options(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_rq_item_type_options(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
skip_varint_rq_item_type_options(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_rq_item_type_options(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_length_delimited_rq_item_type_options(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rq_item_type_options(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
skip_length_delimited_rq_item_type_options(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rq_item_type_options(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

skip_group_rq_item_type_options(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_rq_item_type_options(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

skip_32_rq_item_type_options(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_rq_item_type_options(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

skip_64_rq_item_type_options(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_rq_item_type_options(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

decode_msg_rq_item(Bin, TrUserData) ->
    dfp_read_field_def_rq_item(Bin, 0, 0,
			       id(<<>>, TrUserData), id('$undef', TrUserData),
			       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_rq_item(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_rq_item_key(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
dfp_read_field_def_rq_item(<<16, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_rq_item_integer(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_rq_item(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_rq_item_string(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_rq_item(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_rq_item_rq(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
dfp_read_field_def_rq_item(<<40, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_rq_item_boolean(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_rq_item(<<50, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, F@_3, TrUserData) ->
    d_field_rq_item_type_options(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_rq_item(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    S1 = #{key => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{value => F@_2}
	 end,
    if F@_3 == '$undef' -> S2;
       true -> S2#{type_options => F@_3}
    end;
dfp_read_field_def_rq_item(Other, Z1, Z2, F@_1, F@_2,
			   F@_3, TrUserData) ->
    dg_read_field_def_rq_item(Other, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

dg_read_field_def_rq_item(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rq_item(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_rq_item(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rq_item_key(Rest, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData);
      16 ->
	  d_field_rq_item_integer(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      26 ->
	  d_field_rq_item_string(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      34 ->
	  d_field_rq_item_rq(Rest, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData);
      40 ->
	  d_field_rq_item_boolean(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      50 ->
	  d_field_rq_item_type_options(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rq_item(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    1 ->
		skip_64_rq_item(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
	    2 ->
		skip_length_delimited_rq_item(Rest, 0, 0, F@_1, F@_2,
					      F@_3, TrUserData);
	    3 ->
		skip_group_rq_item(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    5 ->
		skip_32_rq_item(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData)
	  end
    end;
dg_read_field_def_rq_item(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  _) ->
    S1 = #{key => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{value => F@_2}
	 end,
    if F@_3 == '$undef' -> S2;
       true -> S2#{type_options => F@_3}
    end.

d_field_rq_item_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_rq_item_key(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, TrUserData);
d_field_rq_item_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_rq_item(RestF, 0, 0, NewFValue, F@_2,
			       F@_3, TrUserData).

d_field_rq_item_integer(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_rq_item_integer(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_rq_item_integer(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    ZValue = X bsl N + Acc,
			    if ZValue band 1 =:= 0 ->
				   id(ZValue bsr 1, {var, 1003, TrUserData});
			       true ->
				   id(-(ZValue + 1 bsr 1),
				      {var, 1003, TrUserData})
			    end
			  end,
			  Rest},
    dfp_read_field_def_rq_item(RestF, 0, 0, F@_1,
			       id({integer, NewFValue}, TrUserData), F@_3,
			       TrUserData).

d_field_rq_item_string(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_rq_item_string(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_rq_item_string(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_rq_item(RestF, 0, 0, F@_1,
			       id({string, NewFValue}, TrUserData), F@_3,
			       TrUserData).

d_field_rq_item_rq(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_rq_item_rq(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, TrUserData);
d_field_rq_item_rq(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_rq(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_rq_item(RestF, 0, 0, F@_1,
			       case Prev of
				 '$undef' -> id({rq, NewFValue}, TrUserData);
				 {rq, MVPrev} ->
				     id({rq,
					 merge_msg_rq(MVPrev, NewFValue,
						      TrUserData)},
					TrUserData);
				 _ -> id({rq, NewFValue}, TrUserData)
			       end,
			       F@_3, TrUserData).

d_field_rq_item_boolean(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_rq_item_boolean(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_rq_item_boolean(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_rq_item(RestF, 0, 0, F@_1,
			       id({boolean, NewFValue}, TrUserData), F@_3,
			       TrUserData).

d_field_rq_item_type_options(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_rq_item_type_options(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_rq_item_type_options(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_rq_item_type_options(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_rq_item(RestF, 0, 0, F@_1, F@_2,
			       if Prev == '$undef' -> NewFValue;
				  true ->
				      merge_msg_rq_item_type_options(Prev,
								     NewFValue,
								     TrUserData)
			       end,
			       TrUserData).

skip_varint_rq_item(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_rq_item(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
skip_varint_rq_item(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_rq_item(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_length_delimited_rq_item(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_rq_item(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_rq_item(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rq_item(Rest2, 0, 0, F@_1, F@_2,
			       F@_3, TrUserData).

skip_group_rq_item(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_rq_item(Rest, 0, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_32_rq_item(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_rq_item(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

skip_64_rq_item(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_rq_item(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

decode_msg_rq_label(Bin, TrUserData) ->
    dfp_read_field_def_rq_label(Bin, 0, 0,
				id(<<>>, TrUserData), id(<<>>, TrUserData),
				TrUserData).

dfp_read_field_def_rq_label(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_rq_label_key(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
dfp_read_field_def_rq_label(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_rq_label_value(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_rq_label(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #{key => F@_1, value => F@_2};
dfp_read_field_def_rq_label(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_rq_label(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_rq_label(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rq_label(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_rq_label(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rq_label_key(Rest, 0, 0, F@_1, F@_2,
			       TrUserData);
      18 ->
	  d_field_rq_label_value(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rq_label(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_rq_label(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_rq_label(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_rq_label(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_rq_label(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_rq_label(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{key => F@_1, value => F@_2}.

d_field_rq_label_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_rq_label_key(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
d_field_rq_label_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_rq_label(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_rq_label_value(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_rq_label_value(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_rq_label_value(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_rq_label(RestF, 0, 0, F@_1,
				NewFValue, TrUserData).

skip_varint_rq_label(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_rq_label(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_rq_label(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_rq_label(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_rq_label(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rq_label(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_rq_label(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rq_label(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_rq_label(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_rq_label(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_rq_label(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_rq_label(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_rq_label(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_rq_label(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

decode_msg_rq(Bin, TrUserData) ->
    dfp_read_field_def_rq(Bin, 0, 0, id([], TrUserData),
			  id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_rq(<<10, Rest/binary>>, Z1, Z2, F@_1,
		      F@_2, TrUserData) ->
    d_field_rq_rq_items(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_rq(<<18, Rest/binary>>, Z1, Z2, F@_1,
		      F@_2, TrUserData) ->
    d_field_rq_uuid(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_rq(<<>>, 0, 0, R1, F@_2,
		      TrUserData) ->
    S1 = #{uuid => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{rq_items => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_rq(Other, Z1, Z2, F@_1, F@_2,
		      TrUserData) ->
    dg_read_field_def_rq(Other, Z1, Z2, F@_1, F@_2,
			 TrUserData).

dg_read_field_def_rq(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rq(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
dg_read_field_def_rq(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rq_rq_items(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_rq_uuid(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_rq(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_rq(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_rq(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    3 ->
		skip_group_rq(Rest, Key bsr 3, 0, F@_1, F@_2,
			      TrUserData);
	    5 -> skip_32_rq(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_rq(<<>>, 0, 0, R1, F@_2,
		     TrUserData) ->
    S1 = #{uuid => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{rq_items => lists_reverse(R1, TrUserData)}
    end.

d_field_rq_rq_items(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_rq_rq_items(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_rq_rq_items(<<0:1, X:7, Rest/binary>>, N, Acc,
		    Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_rq_item(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_rq(RestF, 0, 0,
			  cons(NewFValue, Prev, TrUserData), F@_2, TrUserData).

d_field_rq_uuid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1,
		F@_2, TrUserData)
    when N < 57 ->
    d_field_rq_uuid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		    TrUserData);
d_field_rq_uuid(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1,
		_, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_rq(RestF, 0, 0, F@_1, NewFValue,
			  TrUserData).

skip_varint_rq(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    skip_varint_rq(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_rq(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_rq(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData).

skip_length_delimited_rq(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_rq(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
skip_length_delimited_rq(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rq(Rest2, 0, 0, F@_1, F@_2,
			  TrUserData).

skip_group_rq(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_rq(Rest, 0, Z2, F@_1, F@_2,
			  TrUserData).

skip_32_rq(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	   TrUserData) ->
    dfp_read_field_def_rq(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData).

skip_64_rq(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	   TrUserData) ->
    dfp_read_field_def_rq(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData).

decode_msg_add_rq_request(Bin, TrUserData) ->
    dfp_read_field_def_add_rq_request(Bin, 0, 0,
				      id('$undef', TrUserData),
				      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_add_rq_request(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_add_rq_request_rq(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_add_rq_request(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_add_rq_request_labels(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_add_rq_request(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{rq => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{labels => F@_2}
    end;
dfp_read_field_def_add_rq_request(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_add_rq_request(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_add_rq_request(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_add_rq_request(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_add_rq_request(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_add_rq_request_rq(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      18 ->
	  d_field_add_rq_request_labels(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_add_rq_request(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_add_rq_request(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_add_rq_request(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_add_rq_request(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_add_rq_request(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_add_rq_request(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{rq => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{labels => F@_2}
    end.

d_field_add_rq_request_rq(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_add_rq_request_rq(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_add_rq_request_rq(<<0:1, X:7, Rest/binary>>, N,
			  Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_rq(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_add_rq_request(RestF, 0, 0,
				      if Prev == '$undef' -> NewFValue;
					 true ->
					     merge_msg_rq(Prev, NewFValue,
							  TrUserData)
				      end,
				      F@_2, TrUserData).

d_field_add_rq_request_labels(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_add_rq_request_labels(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_add_rq_request_labels(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_rq_labels(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_add_rq_request(RestF, 0, 0, F@_1,
				      if Prev == '$undef' -> NewFValue;
					 true ->
					     merge_msg_rq_labels(Prev,
								 NewFValue,
								 TrUserData)
				      end,
				      TrUserData).

skip_varint_add_rq_request(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_add_rq_request(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_add_rq_request(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_add_rq_request(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_add_rq_request(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_add_rq_request(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_add_rq_request(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_add_rq_request(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_add_rq_request(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_add_rq_request(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_add_rq_request(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_add_rq_request(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_add_rq_request(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_add_rq_request(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

decode_msg_rq_labels(Bin, TrUserData) ->
    dfp_read_field_def_rq_labels(Bin, 0, 0,
				 id([], TrUserData), TrUserData).

dfp_read_field_def_rq_labels(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    d_field_rq_labels_labels(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_rq_labels(<<>>, 0, 0, R1,
			     TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{labels => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_rq_labels(Other, Z1, Z2, F@_1,
			     TrUserData) ->
    dg_read_field_def_rq_labels(Other, Z1, Z2, F@_1,
				TrUserData).

dg_read_field_def_rq_labels(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_rq_labels(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
dg_read_field_def_rq_labels(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_rq_labels_labels(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_rq_labels(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_rq_labels(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_rq_labels(Rest, 0, 0, F@_1,
						TrUserData);
	    3 ->
		skip_group_rq_labels(Rest, Key bsr 3, 0, F@_1,
				     TrUserData);
	    5 -> skip_32_rq_labels(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_rq_labels(<<>>, 0, 0, R1,
			    TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{labels => lists_reverse(R1, TrUserData)}
    end.

d_field_rq_labels_labels(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_rq_labels_labels(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_rq_labels_labels(<<0:1, X:7, Rest/binary>>, N,
			 Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_rq_label(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_rq_labels(RestF, 0, 0,
				 cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_rq_labels(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    skip_varint_rq_labels(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_rq_labels(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, TrUserData) ->
    dfp_read_field_def_rq_labels(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_length_delimited_rq_labels(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_rq_labels(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_rq_labels(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_rq_labels(Rest2, 0, 0, F@_1,
				 TrUserData).

skip_group_rq_labels(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_rq_labels(Rest, 0, Z2, F@_1,
				 TrUserData).

skip_32_rq_labels(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_rq_labels(Rest, Z1, Z2, F@_1,
				 TrUserData).

skip_64_rq_labels(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  TrUserData) ->
    dfp_read_field_def_rq_labels(Rest, Z1, Z2, F@_1,
				 TrUserData).

decode_msg_add_rq_response(Bin, TrUserData) ->
    dfp_read_field_def_add_rq_response(Bin, 0, 0,
				       id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_add_rq_response(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_add_rq_response_uuid(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_add_rq_response(<<>>, 0, 0, F@_1,
				   _) ->
    #{uuid => F@_1};
dfp_read_field_def_add_rq_response(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_add_rq_response(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_add_rq_response(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_add_rq_response(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_add_rq_response(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_add_rq_response_uuid(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_add_rq_response(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_add_rq_response(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_add_rq_response(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_add_rq_response(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_add_rq_response(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_add_rq_response(<<>>, 0, 0, F@_1,
				  _) ->
    #{uuid => F@_1}.

d_field_add_rq_response_uuid(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_add_rq_response_uuid(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_add_rq_response_uuid(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_add_rq_response(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_add_rq_response(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_add_rq_response(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_add_rq_response(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_add_rq_response(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_add_rq_response(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_add_rq_response(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_add_rq_response(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_add_rq_response(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_add_rq_response(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_add_rq_response(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_add_rq_response(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_add_rq_response(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_add_rq_response(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_add_rq_response(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_delete_rq_request(Bin, TrUserData) ->
    dfp_read_field_def_delete_rq_request(Bin, 0, 0,
					 id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_delete_rq_request(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, TrUserData) ->
    d_field_delete_rq_request_uuid(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_delete_rq_request(<<>>, 0, 0, F@_1,
				     _) ->
    #{uuid => F@_1};
dfp_read_field_def_delete_rq_request(Other, Z1, Z2,
				     F@_1, TrUserData) ->
    dg_read_field_def_delete_rq_request(Other, Z1, Z2, F@_1,
					TrUserData).

dg_read_field_def_delete_rq_request(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_delete_rq_request(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_delete_rq_request(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_delete_rq_request_uuid(Rest, 0, 0, F@_1,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_delete_rq_request(Rest, 0, 0, F@_1,
					      TrUserData);
	    1 ->
		skip_64_delete_rq_request(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_delete_rq_request(Rest, 0, 0,
							F@_1, TrUserData);
	    3 ->
		skip_group_delete_rq_request(Rest, Key bsr 3, 0, F@_1,
					     TrUserData);
	    5 ->
		skip_32_delete_rq_request(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_delete_rq_request(<<>>, 0, 0, F@_1,
				    _) ->
    #{uuid => F@_1}.

d_field_delete_rq_request_uuid(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_delete_rq_request_uuid(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_delete_rq_request_uuid(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_delete_rq_request(RestF, 0, 0,
					 NewFValue, TrUserData).

skip_varint_delete_rq_request(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    skip_varint_delete_rq_request(Rest, Z1, Z2, F@_1,
				  TrUserData);
skip_varint_delete_rq_request(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_delete_rq_request(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_length_delimited_delete_rq_request(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_delete_rq_request(Rest, N + 7,
					    X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_delete_rq_request(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_delete_rq_request(Rest2, 0, 0, F@_1,
					 TrUserData).

skip_group_delete_rq_request(Bin, FNum, Z2, F@_1,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_delete_rq_request(Rest, 0, Z2, F@_1,
					 TrUserData).

skip_32_delete_rq_request(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_delete_rq_request(Rest, Z1, Z2, F@_1,
					 TrUserData).

skip_64_delete_rq_request(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, TrUserData) ->
    dfp_read_field_def_delete_rq_request(Rest, Z1, Z2, F@_1,
					 TrUserData).

decode_msg_delete_rq_response(Bin, TrUserData) ->
    dfp_read_field_def_delete_rq_response(Bin, 0, 0,
					  TrUserData).

dfp_read_field_def_delete_rq_response(<<>>, 0, 0, _) ->
    #{};
dfp_read_field_def_delete_rq_response(Other, Z1, Z2,
				      TrUserData) ->
    dg_read_field_def_delete_rq_response(Other, Z1, Z2,
					 TrUserData).

dg_read_field_def_delete_rq_response(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_delete_rq_response(Rest, N + 7,
					 X bsl N + Acc, TrUserData);
dg_read_field_def_delete_rq_response(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_delete_rq_response(Rest, 0, 0, TrUserData);
      1 -> skip_64_delete_rq_response(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_delete_rq_response(Rest, 0, 0,
						   TrUserData);
      3 ->
	  skip_group_delete_rq_response(Rest, Key bsr 3, 0,
					TrUserData);
      5 -> skip_32_delete_rq_response(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_delete_rq_response(<<>>, 0, 0, _) ->
    #{}.

skip_varint_delete_rq_response(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    skip_varint_delete_rq_response(Rest, Z1, Z2,
				   TrUserData);
skip_varint_delete_rq_response(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, TrUserData) ->
    dfp_read_field_def_delete_rq_response(Rest, Z1, Z2,
					  TrUserData).

skip_length_delimited_delete_rq_response(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_delete_rq_response(Rest, N + 7,
					     X bsl N + Acc, TrUserData);
skip_length_delimited_delete_rq_response(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_delete_rq_response(Rest2, 0, 0,
					  TrUserData).

skip_group_delete_rq_response(Bin, FNum, Z2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_delete_rq_response(Rest, 0, Z2,
					  TrUserData).

skip_32_delete_rq_response(<<_:32, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_delete_rq_response(Rest, Z1, Z2,
					  TrUserData).

skip_64_delete_rq_response(<<_:64, Rest/binary>>, Z1,
			   Z2, TrUserData) ->
    dfp_read_field_def_delete_rq_response(Rest, Z1, Z2,
					  TrUserData).

decode_msg_get_rq_request(Bin, TrUserData) ->
    dfp_read_field_def_get_rq_request(Bin, 0, 0,
				      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_get_rq_request(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_get_rq_request_uuid(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_get_rq_request(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_get_rq_request_labels(Rest, Z1, Z2, F@_1,
				  TrUserData);
dfp_read_field_def_get_rq_request(<<>>, 0, 0, F@_1,
				  _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{field => F@_1}
    end;
dfp_read_field_def_get_rq_request(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_get_rq_request(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_get_rq_request(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_rq_request(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_get_rq_request(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_get_rq_request_uuid(Rest, 0, 0, F@_1,
				      TrUserData);
      18 ->
	  d_field_get_rq_request_labels(Rest, 0, 0, F@_1,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_rq_request(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_get_rq_request(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_get_rq_request(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_get_rq_request(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_get_rq_request(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_get_rq_request(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{field => F@_1}
    end.

d_field_get_rq_request_uuid(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_get_rq_request_uuid(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_get_rq_request_uuid(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_get_rq_request(RestF, 0, 0,
				      id({uuid, NewFValue}, TrUserData),
				      TrUserData).

d_field_get_rq_request_labels(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_get_rq_request_labels(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
d_field_get_rq_request_labels(<<0:1, X:7, Rest/binary>>,
			      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_rq_labels(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_get_rq_request(RestF, 0, 0,
				      case Prev of
					'$undef' ->
					    id({labels, NewFValue}, TrUserData);
					{labels, MVPrev} ->
					    id({labels,
						merge_msg_rq_labels(MVPrev,
								    NewFValue,
								    TrUserData)},
					       TrUserData);
					_ -> id({labels, NewFValue}, TrUserData)
				      end,
				      TrUserData).

skip_varint_get_rq_request(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_get_rq_request(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_get_rq_request(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_get_rq_request(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_get_rq_request(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_rq_request(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_get_rq_request(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_rq_request(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_get_rq_request(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_rq_request(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_get_rq_request(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_get_rq_request(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_get_rq_request(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_get_rq_request(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_get_rq_response(Bin, TrUserData) ->
    dfp_read_field_def_get_rq_response(Bin, 0, 0,
				       id('$undef', TrUserData),
				       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_get_rq_response(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_get_rq_response_rq(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_get_rq_response(<<18, Rest/binary>>,
				   Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_get_rq_response_labels(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_get_rq_response(<<>>, 0, 0, F@_1,
				   F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{rq => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{labels => F@_2}
    end;
dfp_read_field_def_get_rq_response(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData) ->
    dg_read_field_def_get_rq_response(Other, Z1, Z2, F@_1,
				      F@_2, TrUserData).

dg_read_field_def_get_rq_response(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_get_rq_response(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_get_rq_response(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_get_rq_response_rq(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      18 ->
	  d_field_get_rq_response_labels(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_get_rq_response(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    1 ->
		skip_64_get_rq_response(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    2 ->
		skip_length_delimited_get_rq_response(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    3 ->
		skip_group_get_rq_response(Rest, Key bsr 3, 0, F@_1,
					   F@_2, TrUserData);
	    5 ->
		skip_32_get_rq_response(Rest, 0, 0, F@_1, F@_2,
					TrUserData)
	  end
    end;
dg_read_field_def_get_rq_response(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{rq => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{labels => F@_2}
    end.

d_field_get_rq_response_rq(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_get_rq_response_rq(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_get_rq_response_rq(<<0:1, X:7, Rest/binary>>, N,
			   Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_rq(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_get_rq_response(RestF, 0, 0,
				       if Prev == '$undef' -> NewFValue;
					  true ->
					      merge_msg_rq(Prev, NewFValue,
							   TrUserData)
				       end,
				       F@_2, TrUserData).

d_field_get_rq_response_labels(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_get_rq_response_labels(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_get_rq_response_labels(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_rq_labels(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_get_rq_response(RestF, 0, 0, F@_1,
				       if Prev == '$undef' -> NewFValue;
					  true ->
					      merge_msg_rq_labels(Prev,
								  NewFValue,
								  TrUserData)
				       end,
				       TrUserData).

skip_varint_get_rq_response(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_get_rq_response(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
skip_varint_get_rq_response(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_rq_response(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_length_delimited_get_rq_response(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_get_rq_response(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
skip_length_delimited_get_rq_response(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_get_rq_response(Rest2, 0, 0, F@_1,
				       F@_2, TrUserData).

skip_group_get_rq_response(Bin, FNum, Z2, F@_1, F@_2,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_get_rq_response(Rest, 0, Z2, F@_1,
				       F@_2, TrUserData).

skip_32_get_rq_response(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_rq_response(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

skip_64_get_rq_response(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_get_rq_response(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData).

decode_msg_entry_value(Bin, TrUserData) ->
    dfp_read_field_def_entry_value(Bin, 0, 0,
				   id('$undef', TrUserData), TrUserData).

dfp_read_field_def_entry_value(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_entry_value_string(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_entry_value(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_entry_value_integer(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_entry_value(<<24, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_entry_value_boolean(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_entry_value(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{value => F@_1}
    end;
dfp_read_field_def_entry_value(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_entry_value(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_entry_value(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_entry_value(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_entry_value(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_entry_value_string(Rest, 0, 0, F@_1,
				     TrUserData);
      16 ->
	  d_field_entry_value_integer(Rest, 0, 0, F@_1,
				      TrUserData);
      24 ->
	  d_field_entry_value_boolean(Rest, 0, 0, F@_1,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_entry_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_entry_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_entry_value(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_entry_value(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_entry_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_entry_value(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{value => F@_1}
    end.

d_field_entry_value_string(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_entry_value_string(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_entry_value_string(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_entry_value(RestF, 0, 0,
				   id({string, NewFValue}, TrUserData),
				   TrUserData).

d_field_entry_value_integer(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_entry_value_integer(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_entry_value_integer(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    ZValue = X bsl N + Acc,
			    if ZValue band 1 =:= 0 ->
				   id(ZValue bsr 1, {var, 1003, TrUserData});
			       true ->
				   id(-(ZValue + 1 bsr 1),
				      {var, 1003, TrUserData})
			    end
			  end,
			  Rest},
    dfp_read_field_def_entry_value(RestF, 0, 0,
				   id({integer, NewFValue}, TrUserData),
				   TrUserData).

d_field_entry_value_boolean(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_entry_value_boolean(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_entry_value_boolean(<<0:1, X:7, Rest/binary>>,
			    N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_entry_value(RestF, 0, 0,
				   id({boolean, NewFValue}, TrUserData),
				   TrUserData).

skip_varint_entry_value(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_entry_value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_entry_value(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_entry_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_entry_value(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_entry_value(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_entry_value(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_entry_value(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_entry_value(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_entry_value(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_entry_value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_entry_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_entry_value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_entry_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_match_entry_request(Bin, TrUserData) ->
    dfp_read_field_def_match_entry_request(Bin, 0, 0,
					   'tr_decode_init_default_match_entry_request.entry'([],
											      TrUserData),
					   id(0, TrUserData), TrUserData).

dfp_read_field_def_match_entry_request(<<10,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_match_entry_request_entry(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_match_entry_request(<<16,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_match_entry_request_timeout(Rest, Z1, Z2, F@_1,
					F@_2, TrUserData);
dfp_read_field_def_match_entry_request(<<>>, 0, 0, R1,
				       F@_2, TrUserData) ->
    #{entry =>
	  'tr_decode_repeated_finalize_match_entry_request.entry'(R1,
								  TrUserData),
      timeout => F@_2};
dfp_read_field_def_match_entry_request(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    dg_read_field_def_match_entry_request(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

dg_read_field_def_match_entry_request(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_match_entry_request(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
dg_read_field_def_match_entry_request(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_match_entry_request_entry(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      16 ->
	  d_field_match_entry_request_timeout(Rest, 0, 0, F@_1,
					      F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_match_entry_request(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		skip_64_match_entry_request(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		skip_length_delimited_match_entry_request(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		skip_group_match_entry_request(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		skip_32_match_entry_request(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
dg_read_field_def_match_entry_request(<<>>, 0, 0, R1,
				      F@_2, TrUserData) ->
    #{entry =>
	  'tr_decode_repeated_finalize_match_entry_request.entry'(R1,
								  TrUserData),
      timeout => F@_2}.

d_field_match_entry_request_entry(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_match_entry_request_entry(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_match_entry_request_entry(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,entry_value>'(Bs,
								    TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_match_entry_request(RestF, 0, 0,
					   'tr_decode_repeated_add_elem_match_entry_request.entry'(NewFValue,
												   Prev,
												   TrUserData),
					   F@_2, TrUserData).

d_field_match_entry_request_timeout(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_match_entry_request_timeout(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_match_entry_request_timeout(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_match_entry_request(RestF, 0, 0,
					   F@_1, NewFValue, TrUserData).

skip_varint_match_entry_request(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_match_entry_request(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
skip_varint_match_entry_request(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_match_entry_request(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_length_delimited_match_entry_request(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_match_entry_request(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
skip_length_delimited_match_entry_request(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_match_entry_request(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

skip_group_match_entry_request(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_match_entry_request(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

skip_32_match_entry_request(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_match_entry_request(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_64_match_entry_request(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_match_entry_request(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

decode_msg_match_entry_response(Bin, TrUserData) ->
    dfp_read_field_def_match_entry_response(Bin, 0, 0,
					    id([], TrUserData), TrUserData).

dfp_read_field_def_match_entry_response(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, TrUserData) ->
    d_field_match_entry_response_rqs(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_match_entry_response(<<>>, 0, 0, R1,
					TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{rqs => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_match_entry_response(Other, Z1, Z2,
					F@_1, TrUserData) ->
    dg_read_field_def_match_entry_response(Other, Z1, Z2,
					   F@_1, TrUserData).

dg_read_field_def_match_entry_response(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_match_entry_response(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_match_entry_response(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_match_entry_response_rqs(Rest, 0, 0, F@_1,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_match_entry_response(Rest, 0, 0, F@_1,
						 TrUserData);
	    1 ->
		skip_64_match_entry_response(Rest, 0, 0, F@_1,
					     TrUserData);
	    2 ->
		skip_length_delimited_match_entry_response(Rest, 0, 0,
							   F@_1, TrUserData);
	    3 ->
		skip_group_match_entry_response(Rest, Key bsr 3, 0,
						F@_1, TrUserData);
	    5 ->
		skip_32_match_entry_response(Rest, 0, 0, F@_1,
					     TrUserData)
	  end
    end;
dg_read_field_def_match_entry_response(<<>>, 0, 0, R1,
				       TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{rqs => lists_reverse(R1, TrUserData)}
    end.

d_field_match_entry_response_rqs(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_match_entry_response_rqs(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_match_entry_response_rqs(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_rq(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_match_entry_response(RestF, 0, 0,
					    cons(NewFValue, Prev, TrUserData),
					    TrUserData).

skip_varint_match_entry_response(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    skip_varint_match_entry_response(Rest, Z1, Z2, F@_1,
				     TrUserData);
skip_varint_match_entry_response(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_match_entry_response(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_length_delimited_match_entry_response(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_match_entry_response(Rest, N + 7,
					       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_match_entry_response(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_match_entry_response(Rest2, 0, 0,
					    F@_1, TrUserData).

skip_group_match_entry_response(Bin, FNum, Z2, F@_1,
				TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_match_entry_response(Rest, 0, Z2,
					    F@_1, TrUserData).

skip_32_match_entry_response(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_match_entry_response(Rest, Z1, Z2,
					    F@_1, TrUserData).

skip_64_match_entry_response(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, TrUserData) ->
    dfp_read_field_def_match_entry_response(Rest, Z1, Z2,
					    F@_1, TrUserData).

decode_msg_request(Bin, TrUserData) ->
    dfp_read_field_def_request(Bin, 0, 0,
			       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_request(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_request_status_request(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_request(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_request_add_rq_request(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_request(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_request_delete_rq_request(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_request(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_request_get_rq_request(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_request(<<42, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_request_match_entry_request(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_request(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{msg => F@_1}
    end;
dfp_read_field_def_request(Other, Z1, Z2, F@_1,
			   TrUserData) ->
    dg_read_field_def_request(Other, Z1, Z2, F@_1,
			      TrUserData).

dg_read_field_def_request(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_request(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
dg_read_field_def_request(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_request_status_request(Rest, 0, 0, F@_1,
					 TrUserData);
      18 ->
	  d_field_request_add_rq_request(Rest, 0, 0, F@_1,
					 TrUserData);
      26 ->
	  d_field_request_delete_rq_request(Rest, 0, 0, F@_1,
					    TrUserData);
      34 ->
	  d_field_request_get_rq_request(Rest, 0, 0, F@_1,
					 TrUserData);
      42 ->
	  d_field_request_match_entry_request(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_request(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_request(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_request(Rest, 0, 0, F@_1,
					      TrUserData);
	    3 ->
		skip_group_request(Rest, Key bsr 3, 0, F@_1,
				   TrUserData);
	    5 -> skip_32_request(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_request(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{msg => F@_1}
    end.

d_field_request_status_request(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_request_status_request(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_request_status_request(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_status_request(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_request(RestF, 0, 0,
			       case Prev of
				 '$undef' ->
				     id({status_request, NewFValue},
					TrUserData);
				 {status_request, MVPrev} ->
				     id({status_request,
					 merge_msg_status_request(MVPrev,
								  NewFValue,
								  TrUserData)},
					TrUserData);
				 _ ->
				     id({status_request, NewFValue}, TrUserData)
			       end,
			       TrUserData).

d_field_request_add_rq_request(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_request_add_rq_request(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_request_add_rq_request(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_add_rq_request(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_request(RestF, 0, 0,
			       case Prev of
				 '$undef' ->
				     id({add_rq_request, NewFValue},
					TrUserData);
				 {add_rq_request, MVPrev} ->
				     id({add_rq_request,
					 merge_msg_add_rq_request(MVPrev,
								  NewFValue,
								  TrUserData)},
					TrUserData);
				 _ ->
				     id({add_rq_request, NewFValue}, TrUserData)
			       end,
			       TrUserData).

d_field_request_delete_rq_request(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_request_delete_rq_request(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_request_delete_rq_request(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_delete_rq_request(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_request(RestF, 0, 0,
			       case Prev of
				 '$undef' ->
				     id({delete_rq_request, NewFValue},
					TrUserData);
				 {delete_rq_request, MVPrev} ->
				     id({delete_rq_request,
					 merge_msg_delete_rq_request(MVPrev,
								     NewFValue,
								     TrUserData)},
					TrUserData);
				 _ ->
				     id({delete_rq_request, NewFValue},
					TrUserData)
			       end,
			       TrUserData).

d_field_request_get_rq_request(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_request_get_rq_request(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_request_get_rq_request(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_get_rq_request(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_request(RestF, 0, 0,
			       case Prev of
				 '$undef' ->
				     id({get_rq_request, NewFValue},
					TrUserData);
				 {get_rq_request, MVPrev} ->
				     id({get_rq_request,
					 merge_msg_get_rq_request(MVPrev,
								  NewFValue,
								  TrUserData)},
					TrUserData);
				 _ ->
				     id({get_rq_request, NewFValue}, TrUserData)
			       end,
			       TrUserData).

d_field_request_match_entry_request(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_request_match_entry_request(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_request_match_entry_request(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_match_entry_request(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_request(RestF, 0, 0,
			       case Prev of
				 '$undef' ->
				     id({match_entry_request, NewFValue},
					TrUserData);
				 {match_entry_request, MVPrev} ->
				     id({match_entry_request,
					 merge_msg_match_entry_request(MVPrev,
								       NewFValue,
								       TrUserData)},
					TrUserData);
				 _ ->
				     id({match_entry_request, NewFValue},
					TrUserData)
			       end,
			       TrUserData).

skip_varint_request(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    skip_varint_request(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_request(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    dfp_read_field_def_request(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_length_delimited_request(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_request(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_request(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_request(Rest2, 0, 0, F@_1,
			       TrUserData).

skip_group_request(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_request(Rest, 0, Z2, F@_1,
			       TrUserData).

skip_32_request(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_request(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_64_request(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_request(Rest, Z1, Z2, F@_1,
			       TrUserData).

decode_msg_response(Bin, TrUserData) ->
    dfp_read_field_def_response(Bin, 0, 0,
				id('$undef', TrUserData), TrUserData).

dfp_read_field_def_response(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_response_status_response(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_response(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_response_add_rq_response(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_response(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_response_delete_rq_response(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_response(<<34, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_response_get_rq_response(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_response(<<42, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_response_match_entry_response(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_response(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{msg => F@_1}
    end;
dfp_read_field_def_response(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_response(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_response(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_response(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_response(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_response_status_response(Rest, 0, 0, F@_1,
					   TrUserData);
      18 ->
	  d_field_response_add_rq_response(Rest, 0, 0, F@_1,
					   TrUserData);
      26 ->
	  d_field_response_delete_rq_response(Rest, 0, 0, F@_1,
					      TrUserData);
      34 ->
	  d_field_response_get_rq_response(Rest, 0, 0, F@_1,
					   TrUserData);
      42 ->
	  d_field_response_match_entry_response(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_response(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_response(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_response(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_response(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_response(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_response(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{msg => F@_1}
    end.

d_field_response_status_response(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_response_status_response(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_response_status_response(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_status_response(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_response(RestF, 0, 0,
				case Prev of
				  '$undef' ->
				      id({status_response, NewFValue},
					 TrUserData);
				  {status_response, MVPrev} ->
				      id({status_response,
					  merge_msg_status_response(MVPrev,
								    NewFValue,
								    TrUserData)},
					 TrUserData);
				  _ ->
				      id({status_response, NewFValue},
					 TrUserData)
				end,
				TrUserData).

d_field_response_add_rq_response(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_response_add_rq_response(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_response_add_rq_response(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_add_rq_response(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_response(RestF, 0, 0,
				case Prev of
				  '$undef' ->
				      id({add_rq_response, NewFValue},
					 TrUserData);
				  {add_rq_response, MVPrev} ->
				      id({add_rq_response,
					  merge_msg_add_rq_response(MVPrev,
								    NewFValue,
								    TrUserData)},
					 TrUserData);
				  _ ->
				      id({add_rq_response, NewFValue},
					 TrUserData)
				end,
				TrUserData).

d_field_response_delete_rq_response(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_response_delete_rq_response(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_response_delete_rq_response(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_delete_rq_response(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_response(RestF, 0, 0,
				case Prev of
				  '$undef' ->
				      id({delete_rq_response, NewFValue},
					 TrUserData);
				  {delete_rq_response, MVPrev} ->
				      id({delete_rq_response,
					  merge_msg_delete_rq_response(MVPrev,
								       NewFValue,
								       TrUserData)},
					 TrUserData);
				  _ ->
				      id({delete_rq_response, NewFValue},
					 TrUserData)
				end,
				TrUserData).

d_field_response_get_rq_response(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_response_get_rq_response(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_response_get_rq_response(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_get_rq_response(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_response(RestF, 0, 0,
				case Prev of
				  '$undef' ->
				      id({get_rq_response, NewFValue},
					 TrUserData);
				  {get_rq_response, MVPrev} ->
				      id({get_rq_response,
					  merge_msg_get_rq_response(MVPrev,
								    NewFValue,
								    TrUserData)},
					 TrUserData);
				  _ ->
				      id({get_rq_response, NewFValue},
					 TrUserData)
				end,
				TrUserData).

d_field_response_match_entry_response(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_response_match_entry_response(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_response_match_entry_response(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_match_entry_response(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_response(RestF, 0, 0,
				case Prev of
				  '$undef' ->
				      id({match_entry_response, NewFValue},
					 TrUserData);
				  {match_entry_response, MVPrev} ->
				      id({match_entry_response,
					  merge_msg_match_entry_response(MVPrev,
									 NewFValue,
									 TrUserData)},
					 TrUserData);
				  _ ->
				      id({match_entry_response, NewFValue},
					 TrUserData)
				end,
				TrUserData).

skip_varint_response(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_response(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_response(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_response(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_response(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_response(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_response(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_response(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_response(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_response(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_response(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_response(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_response(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_response(Rest, Z1, Z2, F@_1,
				TrUserData).

'decode_msg_map<string,entry_value>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,entry_value>'(Bin, 0, 0,
						 id(<<>>, TrUserData),
						 id('$undef', TrUserData),
						 TrUserData).

'dfp_read_field_def_map<string,entry_value>'(<<10,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,entry_value>_key'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,entry_value>'(<<18,
					       Rest/binary>>,
					     Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,entry_value>_value'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,entry_value>'(<<>>, 0, 0,
					     F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
'dfp_read_field_def_map<string,entry_value>'(Other, Z1,
					     Z2, F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<string,entry_value>'(Other, Z1,
						Z2, F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,entry_value>'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,entry_value>'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
'dg_read_field_def_map<string,entry_value>'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,entry_value>_key'(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      18 ->
	  'd_field_map<string,entry_value>_value'(Rest, 0, 0,
						  F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,entry_value>'(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    1 ->
		'skip_64_map<string,entry_value>'(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    2 ->
		'skip_length_delimited_map<string,entry_value>'(Rest, 0,
								0, F@_1, F@_2,
								TrUserData);
	    3 ->
		'skip_group_map<string,entry_value>'(Rest, Key bsr 3, 0,
						     F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_map<string,entry_value>'(Rest, 0, 0, F@_1,
						  F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_map<string,entry_value>'(<<>>, 0, 0,
					    F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

'd_field_map<string,entry_value>_key'(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,entry_value>_key'(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
'd_field_map<string,entry_value>_key'(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_map<string,entry_value>'(RestF, 0,
						 0, NewFValue, F@_2,
						 TrUserData).

'd_field_map<string,entry_value>_value'(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,entry_value>_value'(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
'd_field_map<string,entry_value>_value'(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_entry_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,entry_value>'(RestF, 0,
						 0, F@_1,
						 if Prev == '$undef' ->
							NewFValue;
						    true ->
							merge_msg_entry_value(Prev,
									      NewFValue,
									      TrUserData)
						 end,
						 TrUserData).

'skip_varint_map<string,entry_value>'(<<1:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,entry_value>'(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
'skip_varint_map<string,entry_value>'(<<0:1, _:7,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,entry_value>'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,entry_value>'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,entry_value>'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
'skip_length_delimited_map<string,entry_value>'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,entry_value>'(Rest2, 0,
						 0, F@_1, F@_2, TrUserData).

'skip_group_map<string,entry_value>'(Bin, FNum, Z2,
				     F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,entry_value>'(Rest, 0,
						 Z2, F@_1, F@_2, TrUserData).

'skip_32_map<string,entry_value>'(<<_:32, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,entry_value>'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

'skip_64_map<string,entry_value>'(<<_:64, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,entry_value>'(Rest, Z1,
						 Z2, F@_1, F@_2, TrUserData).

d_enum_NodeStatus(0) -> 'ONLINE';
d_enum_NodeStatus(1) -> 'OFFLINE';
d_enum_NodeStatus(2) -> 'TEMP_OFFLINE';
d_enum_NodeStatus(3) -> 'UNKNOWN';
d_enum_NodeStatus(V) -> V.

'd_enum_rq_item_type_options.Operator'(0) -> 'NULL';
'd_enum_rq_item_type_options.Operator'(1) -> 'GT';
'd_enum_rq_item_type_options.Operator'(2) -> 'LT';
'd_enum_rq_item_type_options.Operator'(3) -> 'GTE';
'd_enum_rq_item_type_options.Operator'(4) -> 'LTE';
'd_enum_rq_item_type_options.Operator'(5) -> 'AND';
'd_enum_rq_item_type_options.Operator'(6) -> 'NOT';
'd_enum_rq_item_type_options.Operator'(7) -> 'COUNT';
'd_enum_rq_item_type_options.Operator'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      node_info -> merge_msg_node_info(Prev, New, TrUserData);
      status_request ->
	  merge_msg_status_request(Prev, New, TrUserData);
      status_response ->
	  merge_msg_status_response(Prev, New, TrUserData);
      rq_item_type_options ->
	  merge_msg_rq_item_type_options(Prev, New, TrUserData);
      rq_item -> merge_msg_rq_item(Prev, New, TrUserData);
      rq_label -> merge_msg_rq_label(Prev, New, TrUserData);
      rq -> merge_msg_rq(Prev, New, TrUserData);
      add_rq_request ->
	  merge_msg_add_rq_request(Prev, New, TrUserData);
      rq_labels -> merge_msg_rq_labels(Prev, New, TrUserData);
      add_rq_response ->
	  merge_msg_add_rq_response(Prev, New, TrUserData);
      delete_rq_request ->
	  merge_msg_delete_rq_request(Prev, New, TrUserData);
      delete_rq_response ->
	  merge_msg_delete_rq_response(Prev, New, TrUserData);
      get_rq_request ->
	  merge_msg_get_rq_request(Prev, New, TrUserData);
      get_rq_response ->
	  merge_msg_get_rq_response(Prev, New, TrUserData);
      entry_value ->
	  merge_msg_entry_value(Prev, New, TrUserData);
      match_entry_request ->
	  merge_msg_match_entry_request(Prev, New, TrUserData);
      match_entry_response ->
	  merge_msg_match_entry_response(Prev, New, TrUserData);
      request -> merge_msg_request(Prev, New, TrUserData);
      response -> merge_msg_response(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_node_info/3}).
merge_msg_node_info(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S1#{name => NFname};
	   {#{name := PFname}, _} -> S1#{name => PFname};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{node_status := NFnode_status}} ->
	       S2#{node_status => NFnode_status};
	   {#{node_status := PFnode_status}, _} ->
	       S2#{node_status => PFnode_status};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{rq_count := NFrq_count}} ->
	  S3#{rq_count => NFrq_count};
      {#{rq_count := PFrq_count}, _} ->
	  S3#{rq_count => PFrq_count};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_status_request/3}).
merge_msg_status_request(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_status_response/3}).
merge_msg_status_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{node_info := PFnode_info},
       #{node_info := NFnode_info}} ->
	  S1#{node_info =>
		  'erlang_++'(PFnode_info, NFnode_info, TrUserData)};
      {_, #{node_info := NFnode_info}} ->
	  S1#{node_info => NFnode_info};
      {#{node_info := PFnode_info}, _} ->
	  S1#{node_info => PFnode_info};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_rq_item_type_options/3}).
merge_msg_rq_item_type_options(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{operator := NFoperator}} ->
	       S1#{operator => NFoperator};
	   {#{operator := PFoperator}, _} ->
	       S1#{operator => PFoperator};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{count := NFcount}} -> S2#{count => NFcount};
      {#{count := PFcount}, _} -> S2#{count => PFcount};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_rq_item/3}).
merge_msg_rq_item(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S1#{key => NFkey};
	   {#{key := PFkey}, _} -> S1#{key => PFkey};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{value := {rq, OPFvalue}},
	    #{value := {rq, ONFvalue}}} ->
	       S2#{value =>
		       {rq, merge_msg_rq(OPFvalue, ONFvalue, TrUserData)}};
	   {_, #{value := NFvalue}} -> S2#{value => NFvalue};
	   {#{value := PFvalue}, _} -> S2#{value => PFvalue};
	   {_, _} -> S2
	 end,
    case {PMsg, NMsg} of
      {#{type_options := PFtype_options},
       #{type_options := NFtype_options}} ->
	  S3#{type_options =>
		  merge_msg_rq_item_type_options(PFtype_options,
						 NFtype_options, TrUserData)};
      {_, #{type_options := NFtype_options}} ->
	  S3#{type_options => NFtype_options};
      {#{type_options := PFtype_options}, _} ->
	  S3#{type_options => PFtype_options};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_rq_label/3}).
merge_msg_rq_label(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S1#{key => NFkey};
	   {#{key := PFkey}, _} -> S1#{key => PFkey};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S2#{value => NFvalue};
      {#{value := PFvalue}, _} -> S2#{value => PFvalue};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_rq/3}).
merge_msg_rq(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{rq_items := PFrq_items},
	    #{rq_items := NFrq_items}} ->
	       S1#{rq_items =>
		       'erlang_++'(PFrq_items, NFrq_items, TrUserData)};
	   {_, #{rq_items := NFrq_items}} ->
	       S1#{rq_items => NFrq_items};
	   {#{rq_items := PFrq_items}, _} ->
	       S1#{rq_items => PFrq_items};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{uuid := NFuuid}} -> S2#{uuid => NFuuid};
      {#{uuid := PFuuid}, _} -> S2#{uuid => PFuuid};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_add_rq_request/3}).
merge_msg_add_rq_request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{rq := PFrq}, #{rq := NFrq}} ->
	       S1#{rq => merge_msg_rq(PFrq, NFrq, TrUserData)};
	   {_, #{rq := NFrq}} -> S1#{rq => NFrq};
	   {#{rq := PFrq}, _} -> S1#{rq => PFrq};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{labels := PFlabels}, #{labels := NFlabels}} ->
	  S2#{labels =>
		  merge_msg_rq_labels(PFlabels, NFlabels, TrUserData)};
      {_, #{labels := NFlabels}} -> S2#{labels => NFlabels};
      {#{labels := PFlabels}, _} -> S2#{labels => PFlabels};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_rq_labels/3}).
merge_msg_rq_labels(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{labels := PFlabels}, #{labels := NFlabels}} ->
	  S1#{labels =>
		  'erlang_++'(PFlabels, NFlabels, TrUserData)};
      {_, #{labels := NFlabels}} -> S1#{labels => NFlabels};
      {#{labels := PFlabels}, _} -> S1#{labels => PFlabels};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_add_rq_response/3}).
merge_msg_add_rq_response(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{uuid := NFuuid}} -> S1#{uuid => NFuuid};
      {#{uuid := PFuuid}, _} -> S1#{uuid => PFuuid};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_delete_rq_request/3}).
merge_msg_delete_rq_request(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{uuid := NFuuid}} -> S1#{uuid => NFuuid};
      {#{uuid := PFuuid}, _} -> S1#{uuid => PFuuid};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_delete_rq_response/3}).
merge_msg_delete_rq_response(_Prev, New, _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_get_rq_request/3}).
merge_msg_get_rq_request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{field := {labels, OPFfield}},
       #{field := {labels, ONFfield}}} ->
	  S1#{field =>
		  {labels,
		   merge_msg_rq_labels(OPFfield, ONFfield, TrUserData)}};
      {_, #{field := NFfield}} -> S1#{field => NFfield};
      {#{field := PFfield}, _} -> S1#{field => PFfield};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_get_rq_response/3}).
merge_msg_get_rq_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{rq := PFrq}, #{rq := NFrq}} ->
	       S1#{rq => merge_msg_rq(PFrq, NFrq, TrUserData)};
	   {_, #{rq := NFrq}} -> S1#{rq => NFrq};
	   {#{rq := PFrq}, _} -> S1#{rq => PFrq};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{labels := PFlabels}, #{labels := NFlabels}} ->
	  S2#{labels =>
		  merge_msg_rq_labels(PFlabels, NFlabels, TrUserData)};
      {_, #{labels := NFlabels}} -> S2#{labels => NFlabels};
      {#{labels := PFlabels}, _} -> S2#{labels => PFlabels};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_entry_value/3}).
merge_msg_entry_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_match_entry_request/3}).
merge_msg_match_entry_request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{entry := PFentry}, #{entry := NFentry}} ->
	       S1#{entry =>
		       'tr_merge_match_entry_request.entry'(PFentry, NFentry,
							    TrUserData)};
	   {_, #{entry := NFentry}} -> S1#{entry => NFentry};
	   {#{entry := PFentry}, _} -> S1#{entry => PFentry};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{timeout := NFtimeout}} ->
	  S2#{timeout => NFtimeout};
      {#{timeout := PFtimeout}, _} ->
	  S2#{timeout => PFtimeout};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_match_entry_response/3}).
merge_msg_match_entry_response(PMsg, NMsg,
			       TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{rqs := PFrqs}, #{rqs := NFrqs}} ->
	  S1#{rqs => 'erlang_++'(PFrqs, NFrqs, TrUserData)};
      {_, #{rqs := NFrqs}} -> S1#{rqs => NFrqs};
      {#{rqs := PFrqs}, _} -> S1#{rqs => PFrqs};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_request/3}).
merge_msg_request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{msg := {status_request, OPFmsg}},
       #{msg := {status_request, ONFmsg}}} ->
	  S1#{msg =>
		  {status_request,
		   merge_msg_status_request(OPFmsg, ONFmsg, TrUserData)}};
      {#{msg := {add_rq_request, OPFmsg}},
       #{msg := {add_rq_request, ONFmsg}}} ->
	  S1#{msg =>
		  {add_rq_request,
		   merge_msg_add_rq_request(OPFmsg, ONFmsg, TrUserData)}};
      {#{msg := {delete_rq_request, OPFmsg}},
       #{msg := {delete_rq_request, ONFmsg}}} ->
	  S1#{msg =>
		  {delete_rq_request,
		   merge_msg_delete_rq_request(OPFmsg, ONFmsg,
					       TrUserData)}};
      {#{msg := {get_rq_request, OPFmsg}},
       #{msg := {get_rq_request, ONFmsg}}} ->
	  S1#{msg =>
		  {get_rq_request,
		   merge_msg_get_rq_request(OPFmsg, ONFmsg, TrUserData)}};
      {#{msg := {match_entry_request, OPFmsg}},
       #{msg := {match_entry_request, ONFmsg}}} ->
	  S1#{msg =>
		  {match_entry_request,
		   merge_msg_match_entry_request(OPFmsg, ONFmsg,
						 TrUserData)}};
      {_, #{msg := NFmsg}} -> S1#{msg => NFmsg};
      {#{msg := PFmsg}, _} -> S1#{msg => PFmsg};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_response/3}).
merge_msg_response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{msg := {status_response, OPFmsg}},
       #{msg := {status_response, ONFmsg}}} ->
	  S1#{msg =>
		  {status_response,
		   merge_msg_status_response(OPFmsg, ONFmsg, TrUserData)}};
      {#{msg := {add_rq_response, OPFmsg}},
       #{msg := {add_rq_response, ONFmsg}}} ->
	  S1#{msg =>
		  {add_rq_response,
		   merge_msg_add_rq_response(OPFmsg, ONFmsg, TrUserData)}};
      {#{msg := {delete_rq_response, OPFmsg}},
       #{msg := {delete_rq_response, ONFmsg}}} ->
	  S1#{msg =>
		  {delete_rq_response,
		   merge_msg_delete_rq_response(OPFmsg, ONFmsg,
						TrUserData)}};
      {#{msg := {get_rq_response, OPFmsg}},
       #{msg := {get_rq_response, ONFmsg}}} ->
	  S1#{msg =>
		  {get_rq_response,
		   merge_msg_get_rq_response(OPFmsg, ONFmsg, TrUserData)}};
      {#{msg := {match_entry_response, OPFmsg}},
       #{msg := {match_entry_response, ONFmsg}}} ->
	  S1#{msg =>
		  {match_entry_response,
		   merge_msg_match_entry_response(OPFmsg, ONFmsg,
						  TrUserData)}};
      {_, #{msg := NFmsg}} -> S1#{msg => NFmsg};
      {#{msg := PFmsg}, _} -> S1#{msg => PFmsg};
      {_, _} -> S1
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      node_info ->
	  v_msg_node_info(Msg, [MsgName], TrUserData);
      status_request ->
	  v_msg_status_request(Msg, [MsgName], TrUserData);
      status_response ->
	  v_msg_status_response(Msg, [MsgName], TrUserData);
      rq_item_type_options ->
	  v_msg_rq_item_type_options(Msg, [MsgName], TrUserData);
      rq_item -> v_msg_rq_item(Msg, [MsgName], TrUserData);
      rq_label -> v_msg_rq_label(Msg, [MsgName], TrUserData);
      rq -> v_msg_rq(Msg, [MsgName], TrUserData);
      add_rq_request ->
	  v_msg_add_rq_request(Msg, [MsgName], TrUserData);
      rq_labels ->
	  v_msg_rq_labels(Msg, [MsgName], TrUserData);
      add_rq_response ->
	  v_msg_add_rq_response(Msg, [MsgName], TrUserData);
      delete_rq_request ->
	  v_msg_delete_rq_request(Msg, [MsgName], TrUserData);
      delete_rq_response ->
	  v_msg_delete_rq_response(Msg, [MsgName], TrUserData);
      get_rq_request ->
	  v_msg_get_rq_request(Msg, [MsgName], TrUserData);
      get_rq_response ->
	  v_msg_get_rq_response(Msg, [MsgName], TrUserData);
      entry_value ->
	  v_msg_entry_value(Msg, [MsgName], TrUserData);
      match_entry_request ->
	  v_msg_match_entry_request(Msg, [MsgName], TrUserData);
      match_entry_response ->
	  v_msg_match_entry_response(Msg, [MsgName], TrUserData);
      request -> v_msg_request(Msg, [MsgName], TrUserData);
      response -> v_msg_response(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_node_info/3}).
-dialyzer({nowarn_function,v_msg_node_info/3}).
v_msg_node_info(#{} = M, Path, TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{node_status := F2} ->
	  v_enum_NodeStatus(F2, [node_status | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{rq_count := F3} ->
	  v_type_sint32(F3, [rq_count | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (node_status) -> ok;
		      (rq_count) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_node_info(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   node_info},
		  M, Path);
v_msg_node_info(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, node_info}, X, Path).

-compile({nowarn_unused_function,v_msg_status_request/3}).
-dialyzer({nowarn_function,v_msg_status_request/3}).
v_msg_status_request(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_status_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   status_request},
		  M, Path);
v_msg_status_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, status_request}, X, Path).

-compile({nowarn_unused_function,v_msg_status_response/3}).
-dialyzer({nowarn_function,v_msg_status_response/3}).
v_msg_status_response(#{} = M, Path, TrUserData) ->
    case M of
      #{node_info := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_node_info(Elem, [node_info | Path],
				      TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, node_info}}, F1,
			       [node_info | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (node_info) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_status_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   status_response},
		  M, Path);
v_msg_status_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, status_response}, X, Path).

-compile({nowarn_unused_function,v_msg_rq_item_type_options/3}).
-dialyzer({nowarn_function,v_msg_rq_item_type_options/3}).
v_msg_rq_item_type_options(#{} = M, Path, TrUserData) ->
    case M of
      #{operator := F1} ->
	  'v_enum_rq_item_type_options.Operator'(F1,
						 [operator | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{count := F2} ->
	  v_type_int32(F2, [count | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (operator) -> ok;
		      (count) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_rq_item_type_options(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   rq_item_type_options},
		  M, Path);
v_msg_rq_item_type_options(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rq_item_type_options}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_rq_item/3}).
-dialyzer({nowarn_function,v_msg_rq_item/3}).
v_msg_rq_item(#{} = M, Path, TrUserData) ->
    case M of
      #{key := F1} ->
	  v_type_string(F1, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := {integer, OF2}} ->
	  v_type_sint32(OF2, [integer, value | Path], TrUserData);
      #{value := {string, OF2}} ->
	  v_type_string(OF2, [string, value | Path], TrUserData);
      #{value := {rq, OF2}} ->
	  v_msg_rq(OF2, [rq, value | Path], TrUserData);
      #{value := {boolean, OF2}} ->
	  v_type_bool(OF2, [boolean, value | Path], TrUserData);
      #{value := F2} ->
	  mk_type_error(invalid_oneof, F2, [value | Path]);
      _ -> ok
    end,
    case M of
      #{type_options := F3} ->
	  v_msg_rq_item_type_options(F3, [type_options | Path],
				     TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (key) -> ok;
		      (value) -> ok;
		      (type_options) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_rq_item(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   rq_item},
		  M, Path);
v_msg_rq_item(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rq_item}, X, Path).

-compile({nowarn_unused_function,v_msg_rq_label/3}).
-dialyzer({nowarn_function,v_msg_rq_label/3}).
v_msg_rq_label(#{} = M, Path, TrUserData) ->
    case M of
      #{key := F1} ->
	  v_type_string(F1, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := F2} ->
	  v_type_string(F2, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (key) -> ok;
		      (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_rq_label(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   rq_label},
		  M, Path);
v_msg_rq_label(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rq_label}, X, Path).

-compile({nowarn_unused_function,v_msg_rq/3}).
-dialyzer({nowarn_function,v_msg_rq/3}).
v_msg_rq(#{} = M, Path, TrUserData) ->
    case M of
      #{rq_items := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_rq_item(Elem, [rq_items | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, rq_item}}, F1,
			       [rq_items | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{uuid := F2} ->
	  v_type_string(F2, [uuid | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (rq_items) -> ok;
		      (uuid) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_rq(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M), rq},
		  M, Path);
v_msg_rq(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rq}, X, Path).

-compile({nowarn_unused_function,v_msg_add_rq_request/3}).
-dialyzer({nowarn_function,v_msg_add_rq_request/3}).
v_msg_add_rq_request(#{} = M, Path, TrUserData) ->
    case M of
      #{rq := F1} -> v_msg_rq(F1, [rq | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{labels := F2} ->
	  v_msg_rq_labels(F2, [labels | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (rq) -> ok;
		      (labels) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_add_rq_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   add_rq_request},
		  M, Path);
v_msg_add_rq_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, add_rq_request}, X, Path).

-compile({nowarn_unused_function,v_msg_rq_labels/3}).
-dialyzer({nowarn_function,v_msg_rq_labels/3}).
v_msg_rq_labels(#{} = M, Path, TrUserData) ->
    case M of
      #{labels := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_rq_label(Elem, [labels | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, rq_label}}, F1,
			       [labels | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (labels) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_rq_labels(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   rq_labels},
		  M, Path);
v_msg_rq_labels(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, rq_labels}, X, Path).

-compile({nowarn_unused_function,v_msg_add_rq_response/3}).
-dialyzer({nowarn_function,v_msg_add_rq_response/3}).
v_msg_add_rq_response(#{} = M, Path, TrUserData) ->
    case M of
      #{uuid := F1} ->
	  v_type_string(F1, [uuid | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (uuid) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_add_rq_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   add_rq_response},
		  M, Path);
v_msg_add_rq_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, add_rq_response}, X, Path).

-compile({nowarn_unused_function,v_msg_delete_rq_request/3}).
-dialyzer({nowarn_function,v_msg_delete_rq_request/3}).
v_msg_delete_rq_request(#{} = M, Path, TrUserData) ->
    case M of
      #{uuid := F1} ->
	  v_type_string(F1, [uuid | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (uuid) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_delete_rq_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   delete_rq_request},
		  M, Path);
v_msg_delete_rq_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, delete_rq_request}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_delete_rq_response/3}).
-dialyzer({nowarn_function,v_msg_delete_rq_response/3}).
v_msg_delete_rq_response(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_delete_rq_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   delete_rq_response},
		  M, Path);
v_msg_delete_rq_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, delete_rq_response}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_get_rq_request/3}).
-dialyzer({nowarn_function,v_msg_get_rq_request/3}).
v_msg_get_rq_request(#{} = M, Path, TrUserData) ->
    case M of
      #{field := {uuid, OF1}} ->
	  v_type_string(OF1, [uuid, field | Path], TrUserData);
      #{field := {labels, OF1}} ->
	  v_msg_rq_labels(OF1, [labels, field | Path],
			  TrUserData);
      #{field := F1} ->
	  mk_type_error(invalid_oneof, F1, [field | Path]);
      _ -> ok
    end,
    lists:foreach(fun (field) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_get_rq_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   get_rq_request},
		  M, Path);
v_msg_get_rq_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_rq_request}, X, Path).

-compile({nowarn_unused_function,v_msg_get_rq_response/3}).
-dialyzer({nowarn_function,v_msg_get_rq_response/3}).
v_msg_get_rq_response(#{} = M, Path, TrUserData) ->
    case M of
      #{rq := F1} -> v_msg_rq(F1, [rq | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{labels := F2} ->
	  v_msg_rq_labels(F2, [labels | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (rq) -> ok;
		      (labels) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_get_rq_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   get_rq_response},
		  M, Path);
v_msg_get_rq_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, get_rq_response}, X, Path).

-compile({nowarn_unused_function,v_msg_entry_value/3}).
-dialyzer({nowarn_function,v_msg_entry_value/3}).
v_msg_entry_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := {string, OF1}} ->
	  v_type_string(OF1, [string, value | Path], TrUserData);
      #{value := {integer, OF1}} ->
	  v_type_sint32(OF1, [integer, value | Path], TrUserData);
      #{value := {boolean, OF1}} ->
	  v_type_bool(OF1, [boolean, value | Path], TrUserData);
      #{value := F1} ->
	  mk_type_error(invalid_oneof, F1, [value | Path]);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_entry_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   entry_value},
		  M, Path);
v_msg_entry_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, entry_value}, X, Path).

-compile({nowarn_unused_function,v_msg_match_entry_request/3}).
-dialyzer({nowarn_function,v_msg_match_entry_request/3}).
v_msg_match_entry_request(#{} = M, Path, TrUserData) ->
    case M of
      #{entry := F1} ->
	  'v_map<string,entry_value>'(F1, [entry | Path],
				      TrUserData);
      _ -> ok
    end,
    case M of
      #{timeout := F2} ->
	  v_type_int32(F2, [timeout | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (entry) -> ok;
		      (timeout) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_match_entry_request(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   match_entry_request},
		  M, Path);
v_msg_match_entry_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, match_entry_request}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_match_entry_response/3}).
-dialyzer({nowarn_function,v_msg_match_entry_response/3}).
v_msg_match_entry_response(#{} = M, Path, TrUserData) ->
    case M of
      #{rqs := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_rq(Elem, [rqs | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, rq}}, F1,
			       [rqs | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (rqs) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_match_entry_response(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   match_entry_response},
		  M, Path);
v_msg_match_entry_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, match_entry_response}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_request/3}).
-dialyzer({nowarn_function,v_msg_request/3}).
v_msg_request(#{} = M, Path, TrUserData) ->
    case M of
      #{msg := {status_request, OF1}} ->
	  v_msg_status_request(OF1, [status_request, msg | Path],
			       TrUserData);
      #{msg := {add_rq_request, OF1}} ->
	  v_msg_add_rq_request(OF1, [add_rq_request, msg | Path],
			       TrUserData);
      #{msg := {delete_rq_request, OF1}} ->
	  v_msg_delete_rq_request(OF1,
				  [delete_rq_request, msg | Path], TrUserData);
      #{msg := {get_rq_request, OF1}} ->
	  v_msg_get_rq_request(OF1, [get_rq_request, msg | Path],
			       TrUserData);
      #{msg := {match_entry_request, OF1}} ->
	  v_msg_match_entry_request(OF1,
				    [match_entry_request, msg | Path],
				    TrUserData);
      #{msg := F1} ->
	  mk_type_error(invalid_oneof, F1, [msg | Path]);
      _ -> ok
    end,
    lists:foreach(fun (msg) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_request(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   request},
		  M, Path);
v_msg_request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, request}, X, Path).

-compile({nowarn_unused_function,v_msg_response/3}).
-dialyzer({nowarn_function,v_msg_response/3}).
v_msg_response(#{} = M, Path, TrUserData) ->
    case M of
      #{msg := {status_response, OF1}} ->
	  v_msg_status_response(OF1,
				[status_response, msg | Path], TrUserData);
      #{msg := {add_rq_response, OF1}} ->
	  v_msg_add_rq_response(OF1,
				[add_rq_response, msg | Path], TrUserData);
      #{msg := {delete_rq_response, OF1}} ->
	  v_msg_delete_rq_response(OF1,
				   [delete_rq_response, msg | Path],
				   TrUserData);
      #{msg := {get_rq_response, OF1}} ->
	  v_msg_get_rq_response(OF1,
				[get_rq_response, msg | Path], TrUserData);
      #{msg := {match_entry_response, OF1}} ->
	  v_msg_match_entry_response(OF1,
				     [match_entry_response, msg | Path],
				     TrUserData);
      #{msg := F1} ->
	  mk_type_error(invalid_oneof, F1, [msg | Path]);
      _ -> ok
    end,
    lists:foreach(fun (msg) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_response(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   response},
		  M, Path);
v_msg_response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, response}, X, Path).

-compile({nowarn_unused_function,v_enum_NodeStatus/3}).
-dialyzer({nowarn_function,v_enum_NodeStatus/3}).
v_enum_NodeStatus('ONLINE', _Path, _TrUserData) -> ok;
v_enum_NodeStatus('OFFLINE', _Path, _TrUserData) -> ok;
v_enum_NodeStatus('TEMP_OFFLINE', _Path, _TrUserData) ->
    ok;
v_enum_NodeStatus('UNKNOWN', _Path, _TrUserData) -> ok;
v_enum_NodeStatus(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_NodeStatus(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'NodeStatus'}, X, Path).

-compile({nowarn_unused_function,'v_enum_rq_item_type_options.Operator'/3}).
-dialyzer({nowarn_function,'v_enum_rq_item_type_options.Operator'/3}).
'v_enum_rq_item_type_options.Operator'('NULL', _Path,
				       _TrUserData) ->
    ok;
'v_enum_rq_item_type_options.Operator'('GT', _Path,
				       _TrUserData) ->
    ok;
'v_enum_rq_item_type_options.Operator'('LT', _Path,
				       _TrUserData) ->
    ok;
'v_enum_rq_item_type_options.Operator'('GTE', _Path,
				       _TrUserData) ->
    ok;
'v_enum_rq_item_type_options.Operator'('LTE', _Path,
				       _TrUserData) ->
    ok;
'v_enum_rq_item_type_options.Operator'('AND', _Path,
				       _TrUserData) ->
    ok;
'v_enum_rq_item_type_options.Operator'('NOT', _Path,
				       _TrUserData) ->
    ok;
'v_enum_rq_item_type_options.Operator'('COUNT', _Path,
				       _TrUserData) ->
    ok;
'v_enum_rq_item_type_options.Operator'(V, Path,
				       TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_rq_item_type_options.Operator'(X, Path,
				       _TrUserData) ->
    mk_type_error({invalid_enum,
		   'rq_item_type_options.Operator'},
		  X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,'v_map<string,entry_value>'/3}).
-dialyzer({nowarn_function,'v_map<string,entry_value>'/3}).
'v_map<string,entry_value>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_string(Key, [key | Path], TrUserData),
       v_msg_entry_value(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<string,entry_value>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_decode_init_default_match_entry_request.entry'/2}).
'tr_decode_init_default_match_entry_request.entry'(_,
						   _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_match_entry_request.entry'/3}).
'tr_merge_match_entry_request.entry'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_match_entry_request.entry'/2}).
'tr_decode_repeated_finalize_match_entry_request.entry'(L,
							TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_match_entry_request.entry'/2}).
'tr_encode_match_entry_request.entry'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_match_entry_request.entry'/3}).
'tr_decode_repeated_add_elem_match_entry_request.entry'(Elem,
							L, _) ->
    mt_add_item_m_verify_value(Elem, L).

-compile({inline,'tr_encode_match_entry_request.entry[x]'/2}).
'tr_encode_match_entry_request.entry[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m_verify_value/2}).
mt_add_item_m_verify_value(#{key := K, value := V},
			   M) ->
    if V =:= '$undef' -> error({gpb_error, missing_value});
       true -> M#{K => V}
    end.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).



get_msg_defs() ->
    [{{enum, 'NodeStatus'},
      [{'ONLINE', 0}, {'OFFLINE', 1}, {'TEMP_OFFLINE', 2},
       {'UNKNOWN', 3}]},
     {{enum, 'rq_item_type_options.Operator'},
      [{'NULL', 0}, {'GT', 1}, {'LT', 2}, {'GTE', 3},
       {'LTE', 4}, {'AND', 5}, {'NOT', 6}, {'COUNT', 7}]},
     {{msg, node_info},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => node_status, fnum => 2, rnum => 3,
	 type => {enum, 'NodeStatus'}, occurrence => optional,
	 opts => []},
       #{name => rq_count, fnum => 3, rnum => 4,
	 type => sint32, occurrence => optional, opts => []}]},
     {{msg, status_request}, []},
     {{msg, status_response},
      [#{name => node_info, fnum => 1, rnum => 2,
	 type => {msg, node_info}, occurrence => repeated,
	 opts => []}]},
     {{msg, rq_item_type_options},
      [#{name => operator, fnum => 1, rnum => 2,
	 type => {enum, 'rq_item_type_options.Operator'},
	 occurrence => optional, opts => []},
       #{name => count, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []}]},
     {{msg, rq_item},
      [#{name => key, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => value, rnum => 3,
	 fields =>
	     [#{name => integer, fnum => 2, rnum => 3,
		type => sint32, occurrence => optional, opts => []},
	      #{name => string, fnum => 3, rnum => 3, type => string,
		occurrence => optional, opts => []},
	      #{name => rq, fnum => 4, rnum => 3, type => {msg, rq},
		occurrence => optional, opts => []},
	      #{name => boolean, fnum => 5, rnum => 3, type => bool,
		occurrence => optional, opts => []}]},
       #{name => type_options, fnum => 6, rnum => 4,
	 type => {msg, rq_item_type_options},
	 occurrence => optional, opts => []}]},
     {{msg, rq_label},
      [#{name => key, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => value, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, rq},
      [#{name => rq_items, fnum => 1, rnum => 2,
	 type => {msg, rq_item}, occurrence => repeated,
	 opts => []},
       #{name => uuid, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, add_rq_request},
      [#{name => rq, fnum => 1, rnum => 2, type => {msg, rq},
	 occurrence => optional, opts => []},
       #{name => labels, fnum => 2, rnum => 3,
	 type => {msg, rq_labels}, occurrence => optional,
	 opts => []}]},
     {{msg, rq_labels},
      [#{name => labels, fnum => 1, rnum => 2,
	 type => {msg, rq_label}, occurrence => repeated,
	 opts => []}]},
     {{msg, add_rq_response},
      [#{name => uuid, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, delete_rq_request},
      [#{name => uuid, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, delete_rq_response}, []},
     {{msg, get_rq_request},
      [#{name => field, rnum => 2,
	 fields =>
	     [#{name => uuid, fnum => 1, rnum => 2, type => string,
		occurrence => optional, opts => []},
	      #{name => labels, fnum => 2, rnum => 2,
		type => {msg, rq_labels}, occurrence => optional,
		opts => []}]}]},
     {{msg, get_rq_response},
      [#{name => rq, fnum => 1, rnum => 2, type => {msg, rq},
	 occurrence => optional, opts => []},
       #{name => labels, fnum => 2, rnum => 3,
	 type => {msg, rq_labels}, occurrence => optional,
	 opts => []}]},
     {{msg, entry_value},
      [#{name => value, rnum => 2,
	 fields =>
	     [#{name => string, fnum => 1, rnum => 2, type => string,
		occurrence => optional, opts => []},
	      #{name => integer, fnum => 2, rnum => 2, type => sint32,
		occurrence => optional, opts => []},
	      #{name => boolean, fnum => 3, rnum => 2, type => bool,
		occurrence => optional, opts => []}]}]},
     {{msg, match_entry_request},
      [#{name => entry, fnum => 1, rnum => 2,
	 type => {map, string, {msg, entry_value}},
	 occurrence => repeated, opts => []},
       #{name => timeout, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []}]},
     {{msg, match_entry_response},
      [#{name => rqs, fnum => 1, rnum => 2, type => {msg, rq},
	 occurrence => repeated, opts => []}]},
     {{msg, request},
      [#{name => msg, rnum => 2,
	 fields =>
	     [#{name => status_request, fnum => 1, rnum => 2,
		type => {msg, status_request}, occurrence => optional,
		opts => []},
	      #{name => add_rq_request, fnum => 2, rnum => 2,
		type => {msg, add_rq_request}, occurrence => optional,
		opts => []},
	      #{name => delete_rq_request, fnum => 3, rnum => 2,
		type => {msg, delete_rq_request},
		occurrence => optional, opts => []},
	      #{name => get_rq_request, fnum => 4, rnum => 2,
		type => {msg, get_rq_request}, occurrence => optional,
		opts => []},
	      #{name => match_entry_request, fnum => 5, rnum => 2,
		type => {msg, match_entry_request},
		occurrence => optional, opts => []}]}]},
     {{msg, response},
      [#{name => msg, rnum => 2,
	 fields =>
	     [#{name => status_response, fnum => 1, rnum => 2,
		type => {msg, status_response}, occurrence => optional,
		opts => []},
	      #{name => add_rq_response, fnum => 2, rnum => 2,
		type => {msg, add_rq_response}, occurrence => optional,
		opts => []},
	      #{name => delete_rq_response, fnum => 3, rnum => 2,
		type => {msg, delete_rq_response},
		occurrence => optional, opts => []},
	      #{name => get_rq_response, fnum => 4, rnum => 2,
		type => {msg, get_rq_response}, occurrence => optional,
		opts => []},
	      #{name => match_entry_response, fnum => 5, rnum => 2,
		type => {msg, match_entry_response},
		occurrence => optional, opts => []}]}]}].


get_msg_names() ->
    [node_info, status_request, status_response,
     rq_item_type_options, rq_item, rq_label, rq,
     add_rq_request, rq_labels, add_rq_response,
     delete_rq_request, delete_rq_response, get_rq_request,
     get_rq_response, entry_value, match_entry_request,
     match_entry_response, request, response].


get_group_names() -> [].


get_msg_or_group_names() ->
    [node_info, status_request, status_response,
     rq_item_type_options, rq_item, rq_label, rq,
     add_rq_request, rq_labels, add_rq_response,
     delete_rq_request, delete_rq_response, get_rq_request,
     get_rq_response, entry_value, match_entry_request,
     match_entry_response, request, response].


get_enum_names() ->
    ['NodeStatus', 'rq_item_type_options.Operator'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(node_info) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => node_status, fnum => 2, rnum => 3,
       type => {enum, 'NodeStatus'}, occurrence => optional,
       opts => []},
     #{name => rq_count, fnum => 3, rnum => 4,
       type => sint32, occurrence => optional, opts => []}];
find_msg_def(status_request) -> [];
find_msg_def(status_response) ->
    [#{name => node_info, fnum => 1, rnum => 2,
       type => {msg, node_info}, occurrence => repeated,
       opts => []}];
find_msg_def(rq_item_type_options) ->
    [#{name => operator, fnum => 1, rnum => 2,
       type => {enum, 'rq_item_type_options.Operator'},
       occurrence => optional, opts => []},
     #{name => count, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []}];
find_msg_def(rq_item) ->
    [#{name => key, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => value, rnum => 3,
       fields =>
	   [#{name => integer, fnum => 2, rnum => 3,
	      type => sint32, occurrence => optional, opts => []},
	    #{name => string, fnum => 3, rnum => 3, type => string,
	      occurrence => optional, opts => []},
	    #{name => rq, fnum => 4, rnum => 3, type => {msg, rq},
	      occurrence => optional, opts => []},
	    #{name => boolean, fnum => 5, rnum => 3, type => bool,
	      occurrence => optional, opts => []}]},
     #{name => type_options, fnum => 6, rnum => 4,
       type => {msg, rq_item_type_options},
       occurrence => optional, opts => []}];
find_msg_def(rq_label) ->
    [#{name => key, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => value, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(rq) ->
    [#{name => rq_items, fnum => 1, rnum => 2,
       type => {msg, rq_item}, occurrence => repeated,
       opts => []},
     #{name => uuid, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(add_rq_request) ->
    [#{name => rq, fnum => 1, rnum => 2, type => {msg, rq},
       occurrence => optional, opts => []},
     #{name => labels, fnum => 2, rnum => 3,
       type => {msg, rq_labels}, occurrence => optional,
       opts => []}];
find_msg_def(rq_labels) ->
    [#{name => labels, fnum => 1, rnum => 2,
       type => {msg, rq_label}, occurrence => repeated,
       opts => []}];
find_msg_def(add_rq_response) ->
    [#{name => uuid, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(delete_rq_request) ->
    [#{name => uuid, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(delete_rq_response) -> [];
find_msg_def(get_rq_request) ->
    [#{name => field, rnum => 2,
       fields =>
	   [#{name => uuid, fnum => 1, rnum => 2, type => string,
	      occurrence => optional, opts => []},
	    #{name => labels, fnum => 2, rnum => 2,
	      type => {msg, rq_labels}, occurrence => optional,
	      opts => []}]}];
find_msg_def(get_rq_response) ->
    [#{name => rq, fnum => 1, rnum => 2, type => {msg, rq},
       occurrence => optional, opts => []},
     #{name => labels, fnum => 2, rnum => 3,
       type => {msg, rq_labels}, occurrence => optional,
       opts => []}];
find_msg_def(entry_value) ->
    [#{name => value, rnum => 2,
       fields =>
	   [#{name => string, fnum => 1, rnum => 2, type => string,
	      occurrence => optional, opts => []},
	    #{name => integer, fnum => 2, rnum => 2, type => sint32,
	      occurrence => optional, opts => []},
	    #{name => boolean, fnum => 3, rnum => 2, type => bool,
	      occurrence => optional, opts => []}]}];
find_msg_def(match_entry_request) ->
    [#{name => entry, fnum => 1, rnum => 2,
       type => {map, string, {msg, entry_value}},
       occurrence => repeated, opts => []},
     #{name => timeout, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []}];
find_msg_def(match_entry_response) ->
    [#{name => rqs, fnum => 1, rnum => 2, type => {msg, rq},
       occurrence => repeated, opts => []}];
find_msg_def(request) ->
    [#{name => msg, rnum => 2,
       fields =>
	   [#{name => status_request, fnum => 1, rnum => 2,
	      type => {msg, status_request}, occurrence => optional,
	      opts => []},
	    #{name => add_rq_request, fnum => 2, rnum => 2,
	      type => {msg, add_rq_request}, occurrence => optional,
	      opts => []},
	    #{name => delete_rq_request, fnum => 3, rnum => 2,
	      type => {msg, delete_rq_request},
	      occurrence => optional, opts => []},
	    #{name => get_rq_request, fnum => 4, rnum => 2,
	      type => {msg, get_rq_request}, occurrence => optional,
	      opts => []},
	    #{name => match_entry_request, fnum => 5, rnum => 2,
	      type => {msg, match_entry_request},
	      occurrence => optional, opts => []}]}];
find_msg_def(response) ->
    [#{name => msg, rnum => 2,
       fields =>
	   [#{name => status_response, fnum => 1, rnum => 2,
	      type => {msg, status_response}, occurrence => optional,
	      opts => []},
	    #{name => add_rq_response, fnum => 2, rnum => 2,
	      type => {msg, add_rq_response}, occurrence => optional,
	      opts => []},
	    #{name => delete_rq_response, fnum => 3, rnum => 2,
	      type => {msg, delete_rq_response},
	      occurrence => optional, opts => []},
	    #{name => get_rq_response, fnum => 4, rnum => 2,
	      type => {msg, get_rq_response}, occurrence => optional,
	      opts => []},
	    #{name => match_entry_response, fnum => 5, rnum => 2,
	      type => {msg, match_entry_response},
	      occurrence => optional, opts => []}]}];
find_msg_def(_) -> error.


find_enum_def('NodeStatus') ->
    [{'ONLINE', 0}, {'OFFLINE', 1}, {'TEMP_OFFLINE', 2},
     {'UNKNOWN', 3}];
find_enum_def('rq_item_type_options.Operator') ->
    [{'NULL', 0}, {'GT', 1}, {'LT', 2}, {'GTE', 3},
     {'LTE', 4}, {'AND', 5}, {'NOT', 6}, {'COUNT', 7}];
find_enum_def(_) -> error.


enum_symbol_by_value('NodeStatus', Value) ->
    enum_symbol_by_value_NodeStatus(Value);
enum_symbol_by_value('rq_item_type_options.Operator',
		     Value) ->
    'enum_symbol_by_value_rq_item_type_options.Operator'(Value).


enum_value_by_symbol('NodeStatus', Sym) ->
    enum_value_by_symbol_NodeStatus(Sym);
enum_value_by_symbol('rq_item_type_options.Operator',
		     Sym) ->
    'enum_value_by_symbol_rq_item_type_options.Operator'(Sym).


enum_symbol_by_value_NodeStatus(0) -> 'ONLINE';
enum_symbol_by_value_NodeStatus(1) -> 'OFFLINE';
enum_symbol_by_value_NodeStatus(2) -> 'TEMP_OFFLINE';
enum_symbol_by_value_NodeStatus(3) -> 'UNKNOWN'.


enum_value_by_symbol_NodeStatus('ONLINE') -> 0;
enum_value_by_symbol_NodeStatus('OFFLINE') -> 1;
enum_value_by_symbol_NodeStatus('TEMP_OFFLINE') -> 2;
enum_value_by_symbol_NodeStatus('UNKNOWN') -> 3.

'enum_symbol_by_value_rq_item_type_options.Operator'(0) ->
    'NULL';
'enum_symbol_by_value_rq_item_type_options.Operator'(1) ->
    'GT';
'enum_symbol_by_value_rq_item_type_options.Operator'(2) ->
    'LT';
'enum_symbol_by_value_rq_item_type_options.Operator'(3) ->
    'GTE';
'enum_symbol_by_value_rq_item_type_options.Operator'(4) ->
    'LTE';
'enum_symbol_by_value_rq_item_type_options.Operator'(5) ->
    'AND';
'enum_symbol_by_value_rq_item_type_options.Operator'(6) ->
    'NOT';
'enum_symbol_by_value_rq_item_type_options.Operator'(7) ->
    'COUNT'.


'enum_value_by_symbol_rq_item_type_options.Operator'('NULL') ->
    0;
'enum_value_by_symbol_rq_item_type_options.Operator'('GT') ->
    1;
'enum_value_by_symbol_rq_item_type_options.Operator'('LT') ->
    2;
'enum_value_by_symbol_rq_item_type_options.Operator'('GTE') ->
    3;
'enum_value_by_symbol_rq_item_type_options.Operator'('LTE') ->
    4;
'enum_value_by_symbol_rq_item_type_options.Operator'('AND') ->
    5;
'enum_value_by_symbol_rq_item_type_options.Operator'('NOT') ->
    6;
'enum_value_by_symbol_rq_item_type_options.Operator'('COUNT') ->
    7.


get_service_names() -> [rqeService].


get_service_def(rqeService) ->
    {{service, rqeService},
     [#{name => rqeMessage, input => request,
	output => response, input_stream => false,
	output_stream => false, opts => []}]};
get_service_def(_) -> error.


get_rpc_names(rqeService) -> [rqeMessage];
get_rpc_names(_) -> error.


find_rpc_def(rqeService, RpcName) ->
    find_rpc_def_rqeService(RpcName);
find_rpc_def(_, _) -> error.


find_rpc_def_rqeService(rqeMessage) ->
    #{name => rqeMessage, input => request,
      output => response, input_stream => false,
      output_stream => false, opts => []};
find_rpc_def_rqeService(_) -> error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_map(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"rqeService">>) -> rqeService;
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin(rqeService) -> <<"rqeService">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"rqeService">>, <<"rqeMessage">>) ->
    {rqeService, rqeMessage};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins(rqeService,
			       rqeMessage) ->
    {<<"rqeService">>, <<"rqeMessage">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"NodeInfo">>) -> node_info;
fqbin_to_msg_name(<<"StatusRequest">>) -> status_request;
fqbin_to_msg_name(<<"StatusResponse">>) -> status_response;
fqbin_to_msg_name(<<"RQItemTypeOptions">>) -> rq_item_type_options;
fqbin_to_msg_name(<<"RQItem">>) -> rq_item;
fqbin_to_msg_name(<<"RQLabel">>) -> rq_label;
fqbin_to_msg_name(<<"RQ">>) -> rq;
fqbin_to_msg_name(<<"AddRQRequest">>) -> add_rq_request;
fqbin_to_msg_name(<<"RQLabels">>) -> rq_labels;
fqbin_to_msg_name(<<"AddRQResponse">>) -> add_rq_response;
fqbin_to_msg_name(<<"DeleteRQRequest">>) -> delete_rq_request;
fqbin_to_msg_name(<<"DeleteRQResponse">>) -> delete_rq_response;
fqbin_to_msg_name(<<"GetRQRequest">>) -> get_rq_request;
fqbin_to_msg_name(<<"GetRQResponse">>) -> get_rq_response;
fqbin_to_msg_name(<<"MatchEntryRequest.EntryValue">>) -> entry_value;
fqbin_to_msg_name(<<"MatchEntryRequest">>) -> match_entry_request;
fqbin_to_msg_name(<<"MatchEntryResponse">>) -> match_entry_response;
fqbin_to_msg_name(<<"Request">>) -> request;
fqbin_to_msg_name(<<"Response">>) -> response;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(node_info) -> <<"NodeInfo">>;
msg_name_to_fqbin(status_request) -> <<"StatusRequest">>;
msg_name_to_fqbin(status_response) -> <<"StatusResponse">>;
msg_name_to_fqbin(rq_item_type_options) -> <<"RQItemTypeOptions">>;
msg_name_to_fqbin(rq_item) -> <<"RQItem">>;
msg_name_to_fqbin(rq_label) -> <<"RQLabel">>;
msg_name_to_fqbin(rq) -> <<"RQ">>;
msg_name_to_fqbin(add_rq_request) -> <<"AddRQRequest">>;
msg_name_to_fqbin(rq_labels) -> <<"RQLabels">>;
msg_name_to_fqbin(add_rq_response) -> <<"AddRQResponse">>;
msg_name_to_fqbin(delete_rq_request) -> <<"DeleteRQRequest">>;
msg_name_to_fqbin(delete_rq_response) -> <<"DeleteRQResponse">>;
msg_name_to_fqbin(get_rq_request) -> <<"GetRQRequest">>;
msg_name_to_fqbin(get_rq_response) -> <<"GetRQResponse">>;
msg_name_to_fqbin(entry_value) -> <<"MatchEntryRequest.EntryValue">>;
msg_name_to_fqbin(match_entry_request) -> <<"MatchEntryRequest">>;
msg_name_to_fqbin(match_entry_response) -> <<"MatchEntryResponse">>;
msg_name_to_fqbin(request) -> <<"Request">>;
msg_name_to_fqbin(response) -> <<"Response">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"NodeStatus">>) -> 'NodeStatus';
fqbin_to_enum_name(<<"RQItemTypeOptions.Operator">>) ->
    'rq_item_type_options.Operator';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('NodeStatus') -> <<"NodeStatus">>;
enum_name_to_fqbin('rq_item_type_options.Operator') ->
    <<"RQItemTypeOptions.Operator">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "rqe_pb.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["rqe_pb.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["rqe_pb"].


get_msg_containment("rqe_pb") ->
    [add_rq_request, add_rq_response, delete_rq_request,
     delete_rq_response, get_rq_request, get_rq_response,
     match_entry_request, entry_value, match_entry_response,
     node_info, rq, rq_item, rq_item_type_options, rq_label,
     rq_labels, request, response, status_request,
     status_response];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("rqe_pb") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("rqe_pb") -> [rqeService];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("rqe_pb") ->
    [{rqeService, rqeMessage}];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("rqe_pb") ->
    ['NodeStatus', 'rq_item_type_options.Operator'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"RQ">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"RQLabels">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"RQItemTypeOptions">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"StatusRequest">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"Request">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"MatchEntryRequest">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"GetRQRequest">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"DeleteRQRequest">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"AddRQRequest">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"StatusResponse">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"Response">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"MatchEntryResponse">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"MatchEntryRequest.EntryValue">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"GetRQResponse">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"DeleteRQResponse">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"AddRQResponse">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"RQLabel">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"RQItem">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"NodeInfo">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"rqeService">>) -> "rqe_pb";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"RQItemTypeOptions.Operator">>) -> "rqe_pb";
get_proto_by_enum_name_as_fqbin(<<"NodeStatus">>) -> "rqe_pb";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.7.3".

gpb_version_as_list() ->
    [4,7,3].
