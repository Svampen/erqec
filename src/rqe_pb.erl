%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.10.1
-module(rqe_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_NodeStatus/1, enum_value_by_symbol_NodeStatus/1]).
-export(['enum_symbol_by_value_ResponseStatus.Status'/1, 'enum_value_by_symbol_ResponseStatus.Status'/1]).
-export(['enum_symbol_by_value_RQItemTypeOptions.Operator'/1, 'enum_value_by_symbol_RQItemTypeOptions.Operator'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types
-type 'NodeStatus'() :: 'ONLINE' | 'OFFLINE' | 'TEMP_OFFLINE' | 'UNKNOWN'.
-type 'ResponseStatus.Status'() :: 'OK' | 'NOK'.
-type 'RQItemTypeOptions.Operator'() :: 'NULL' | 'GT' | 'LT' | 'GTE' | 'LTE' | 'AND' | 'NOT' | 'COUNT'.
-export_type(['NodeStatus'/0, 'ResponseStatus.Status'/0, 'RQItemTypeOptions.Operator'/0]).

%% message types
-type 'NodeInfo'() ::
      #{name                    => iodata(),        % = 1
        node_status             => 'ONLINE' | 'OFFLINE' | 'TEMP_OFFLINE' | 'UNKNOWN' | integer(), % = 2, enum NodeStatus
        rq_count                => integer()        % = 3, 32 bits
       }.

-type 'ResponseStatus'() ::
      #{status                  => 'OK' | 'NOK' | integer(), % = 1, enum ResponseStatus.Status
        reason                  => iodata()         % = 2
       }.

-type 'StatusRequest'() ::
      #{
       }.

-type 'StatusResponse'() ::
      #{node_info               => ['NodeInfo'()],  % = 1
        response_status         => 'ResponseStatus'() % = 2
       }.

-type 'RQItemTypeOptions'() ::
      #{operator                => 'NULL' | 'GT' | 'LT' | 'GTE' | 'LTE' | 'AND' | 'NOT' | 'COUNT' | integer(), % = 1, enum RQItemTypeOptions.Operator
        count                   => integer()        % = 2, 32 bits
       }.

-type 'RQItem'() ::
      #{key                     => iodata(),        % = 1
        value                   => {integer, integer()} | {string, iodata()} | {rq, 'RQ'()} | {boolean, boolean() | 0 | 1}, % oneof
        type_options            => 'RQItemTypeOptions'() % = 6
       }.

-type 'RQLabel'() ::
      #{key                     => iodata(),        % = 1
        value                   => iodata()         % = 2
       }.

-type 'RQ'() ::
      #{rq_items                => ['RQItem'()],    % = 1
        uuid                    => iodata()         % = 2
       }.

-type 'AddRQRequest'() ::
      #{rq                      => 'RQ'(),          % = 1
        labels                  => 'RQLabels'()     % = 2
       }.

-type 'RQLabels'() ::
      #{labels                  => ['RQLabel'()]    % = 1
       }.

-type 'AddRQResponse'() ::
      #{uuid                    => iodata(),        % = 1
        response_status         => 'ResponseStatus'() % = 4
       }.

-type 'DeleteRQRequest'() ::
      #{uuid                    => iodata()         % = 1
       }.

-type 'DeleteRQResponse'() ::
      #{response_status         => 'ResponseStatus'() % = 1
       }.

-type 'GetRQRequest'() ::
      #{field                   => {uuid, iodata()} | {labels, 'RQLabels'()} % oneof
       }.

-type 'GetRQResponse'() ::
      #{response_status         => 'ResponseStatus'(), % = 1
        rq                      => 'RQ'(),          % = 2
        labels                  => 'RQLabels'()     % = 3
       }.

-type 'MatchEntryRequest.EntryValue'() ::
      #{value                   => {string, iodata()} | {integer, integer()} | {boolean, boolean() | 0 | 1} % oneof
       }.

-type 'MatchEntryRequest'() ::
      #{entry                   => #{iodata() := 'MatchEntryRequest.EntryValue'()}, % = 1
        timeout                 => integer()        % = 2, 32 bits
       }.

-type 'MatchEntryResponse'() ::
      #{response_status         => 'ResponseStatus'(), % = 1
        rqs                     => ['RQ'()]         % = 2
       }.

-type 'Request'() ::
      #{msg                     => {status_request, 'StatusRequest'()} | {add_rq_request, 'AddRQRequest'()} | {delete_rq_request, 'DeleteRQRequest'()} | {get_rq_request, 'GetRQRequest'()} | {match_entry_request, 'MatchEntryRequest'()} % oneof
       }.

-type 'Response'() ::
      #{msg                     => {status_response, 'StatusResponse'()} | {add_rq_response, 'AddRQResponse'()} | {delete_rq_response, 'DeleteRQResponse'()} | {get_rq_response, 'GetRQResponse'()} | {match_entry_response, 'MatchEntryResponse'()} % oneof
       }.

-export_type(['NodeInfo'/0, 'ResponseStatus'/0, 'StatusRequest'/0, 'StatusResponse'/0, 'RQItemTypeOptions'/0, 'RQItem'/0, 'RQLabel'/0, 'RQ'/0, 'AddRQRequest'/0, 'RQLabels'/0, 'AddRQResponse'/0, 'DeleteRQRequest'/0, 'DeleteRQResponse'/0, 'GetRQRequest'/0, 'GetRQResponse'/0, 'MatchEntryRequest.EntryValue'/0, 'MatchEntryRequest'/0, 'MatchEntryResponse'/0, 'Request'/0, 'Response'/0]).

-spec encode_msg('NodeInfo'() | 'ResponseStatus'() | 'StatusRequest'() | 'StatusResponse'() | 'RQItemTypeOptions'() | 'RQItem'() | 'RQLabel'() | 'RQ'() | 'AddRQRequest'() | 'RQLabels'() | 'AddRQResponse'() | 'DeleteRQRequest'() | 'DeleteRQResponse'() | 'GetRQRequest'() | 'GetRQResponse'() | 'MatchEntryRequest.EntryValue'() | 'MatchEntryRequest'() | 'MatchEntryResponse'() | 'Request'() | 'Response'(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg('NodeInfo'() | 'ResponseStatus'() | 'StatusRequest'() | 'StatusResponse'() | 'RQItemTypeOptions'() | 'RQItem'() | 'RQLabel'() | 'RQ'() | 'AddRQRequest'() | 'RQLabels'() | 'AddRQResponse'() | 'DeleteRQRequest'() | 'DeleteRQResponse'() | 'GetRQRequest'() | 'GetRQResponse'() | 'MatchEntryRequest.EntryValue'() | 'MatchEntryRequest'() | 'MatchEntryResponse'() | 'Request'() | 'Response'(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'NodeInfo' ->
	  encode_msg_NodeInfo(id(Msg, TrUserData), TrUserData);
      'ResponseStatus' ->
	  encode_msg_ResponseStatus(id(Msg, TrUserData),
				    TrUserData);
      'StatusRequest' ->
	  encode_msg_StatusRequest(id(Msg, TrUserData),
				   TrUserData);
      'StatusResponse' ->
	  encode_msg_StatusResponse(id(Msg, TrUserData),
				    TrUserData);
      'RQItemTypeOptions' ->
	  encode_msg_RQItemTypeOptions(id(Msg, TrUserData),
				       TrUserData);
      'RQItem' ->
	  encode_msg_RQItem(id(Msg, TrUserData), TrUserData);
      'RQLabel' ->
	  encode_msg_RQLabel(id(Msg, TrUserData), TrUserData);
      'RQ' -> encode_msg_RQ(id(Msg, TrUserData), TrUserData);
      'AddRQRequest' ->
	  encode_msg_AddRQRequest(id(Msg, TrUserData),
				  TrUserData);
      'RQLabels' ->
	  encode_msg_RQLabels(id(Msg, TrUserData), TrUserData);
      'AddRQResponse' ->
	  encode_msg_AddRQResponse(id(Msg, TrUserData),
				   TrUserData);
      'DeleteRQRequest' ->
	  encode_msg_DeleteRQRequest(id(Msg, TrUserData),
				     TrUserData);
      'DeleteRQResponse' ->
	  encode_msg_DeleteRQResponse(id(Msg, TrUserData),
				      TrUserData);
      'GetRQRequest' ->
	  encode_msg_GetRQRequest(id(Msg, TrUserData),
				  TrUserData);
      'GetRQResponse' ->
	  encode_msg_GetRQResponse(id(Msg, TrUserData),
				   TrUserData);
      'MatchEntryRequest.EntryValue' ->
	  'encode_msg_MatchEntryRequest.EntryValue'(id(Msg,
						       TrUserData),
						    TrUserData);
      'MatchEntryRequest' ->
	  encode_msg_MatchEntryRequest(id(Msg, TrUserData),
				       TrUserData);
      'MatchEntryResponse' ->
	  encode_msg_MatchEntryResponse(id(Msg, TrUserData),
					TrUserData);
      'Request' ->
	  encode_msg_Request(id(Msg, TrUserData), TrUserData);
      'Response' ->
	  encode_msg_Response(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_NodeInfo(Msg, TrUserData) ->
    encode_msg_NodeInfo(Msg, <<>>, TrUserData).


encode_msg_NodeInfo(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{node_status := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 'ONLINE'; TrF2 =:= 0 -> B1;
		    true ->
			e_enum_NodeStatus(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{rq_count := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= 0 -> B2;
	       true -> e_type_sint(TrF3, <<B2/binary, 24>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_ResponseStatus(Msg, TrUserData) ->
    encode_msg_ResponseStatus(Msg, <<>>, TrUserData).


encode_msg_ResponseStatus(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{status := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 'OK'; TrF1 =:= 0 -> Bin;
		    true ->
			'e_enum_ResponseStatus.Status'(TrF1, <<Bin/binary, 8>>,
						       TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{reason := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_StatusRequest(_Msg, _TrUserData) -> <<>>.

encode_msg_StatusResponse(Msg, TrUserData) ->
    encode_msg_StatusResponse(Msg, <<>>, TrUserData).


encode_msg_StatusResponse(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{node_info := F1} ->
	       TrF1 = id(F1, TrUserData),
	       if TrF1 == [] -> Bin;
		  true ->
		      e_field_StatusResponse_node_info(TrF1, Bin, TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{response_status := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_StatusResponse_response_status(TrF2,
							   <<B1/binary, 18>>,
							   TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_RQItemTypeOptions(Msg, TrUserData) ->
    encode_msg_RQItemTypeOptions(Msg, <<>>, TrUserData).


encode_msg_RQItemTypeOptions(#{} = M, Bin,
			     TrUserData) ->
    B1 = case M of
	   #{operator := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 'NULL'; TrF1 =:= 0 -> Bin;
		    true ->
			'e_enum_RQItemTypeOptions.Operator'(TrF1,
							    <<Bin/binary, 8>>,
							    TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{count := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_RQItem(Msg, TrUserData) ->
    encode_msg_RQItem(Msg, <<>>, TrUserData).


encode_msg_RQItem(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{key := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{value := F2} ->
	       case id(F2, TrUserData) of
		 {integer, TF2} ->
		     begin
		       TrTF2 = id(TF2, TrUserData),
		       e_type_sint(TrTF2, <<B1/binary, 16>>, TrUserData)
		     end;
		 {string, TF2} ->
		     begin
		       TrTF2 = id(TF2, TrUserData),
		       e_type_string(TrTF2, <<B1/binary, 26>>, TrUserData)
		     end;
		 {rq, TF2} ->
		     begin
		       TrTF2 = id(TF2, TrUserData),
		       e_mfield_RQItem_rq(TrTF2, <<B1/binary, 34>>, TrUserData)
		     end;
		 {boolean, TF2} ->
		     begin
		       TrTF2 = id(TF2, TrUserData),
		       e_type_bool(TrTF2, <<B1/binary, 40>>, TrUserData)
		     end
	       end;
	   _ -> B1
	 end,
    case M of
      #{type_options := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= undefined -> B2;
	       true ->
		   e_mfield_RQItem_type_options(TrF3, <<B2/binary, 50>>,
						TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_RQLabel(Msg, TrUserData) ->
    encode_msg_RQLabel(Msg, <<>>, TrUserData).


encode_msg_RQLabel(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{key := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{value := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_RQ(Msg, TrUserData) ->
    encode_msg_RQ(Msg, <<>>, TrUserData).


encode_msg_RQ(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{rq_items := F1} ->
	       TrF1 = id(F1, TrUserData),
	       if TrF1 == [] -> Bin;
		  true -> e_field_RQ_rq_items(TrF1, Bin, TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{uuid := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_AddRQRequest(Msg, TrUserData) ->
    encode_msg_AddRQRequest(Msg, <<>>, TrUserData).


encode_msg_AddRQRequest(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{rq := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_AddRQRequest_rq(TrF1, <<Bin/binary, 10>>,
						 TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{labels := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_AddRQRequest_labels(TrF2, <<B1/binary, 18>>,
						TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_RQLabels(Msg, TrUserData) ->
    encode_msg_RQLabels(Msg, <<>>, TrUserData).


encode_msg_RQLabels(#{} = M, Bin, TrUserData) ->
    case M of
      #{labels := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true -> e_field_RQLabels_labels(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

encode_msg_AddRQResponse(Msg, TrUserData) ->
    encode_msg_AddRQResponse(Msg, <<>>, TrUserData).


encode_msg_AddRQResponse(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{uuid := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{response_status := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_AddRQResponse_response_status(TrF2,
							  <<B1/binary, 34>>,
							  TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_DeleteRQRequest(Msg, TrUserData) ->
    encode_msg_DeleteRQRequest(Msg, <<>>, TrUserData).


encode_msg_DeleteRQRequest(#{} = M, Bin, TrUserData) ->
    case M of
      #{uuid := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case is_empty_string(TrF1) of
	      true -> Bin;
	      false ->
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_DeleteRQResponse(Msg, TrUserData) ->
    encode_msg_DeleteRQResponse(Msg, <<>>, TrUserData).


encode_msg_DeleteRQResponse(#{} = M, Bin, TrUserData) ->
    case M of
      #{response_status := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= undefined -> Bin;
	       true ->
		   e_mfield_DeleteRQResponse_response_status(TrF1,
							     <<Bin/binary, 10>>,
							     TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_GetRQRequest(Msg, TrUserData) ->
    encode_msg_GetRQRequest(Msg, <<>>, TrUserData).


encode_msg_GetRQRequest(#{} = M, Bin, TrUserData) ->
    case M of
      #{field := F1} ->
	  case id(F1, TrUserData) of
	    {uuid, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_string(TrTF1, <<Bin/binary, 10>>, TrUserData)
		end;
	    {labels, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_GetRQRequest_labels(TrTF1, <<Bin/binary, 18>>,
					       TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_GetRQResponse(Msg, TrUserData) ->
    encode_msg_GetRQResponse(Msg, <<>>, TrUserData).


encode_msg_GetRQResponse(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{response_status := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_GetRQResponse_response_status(TrF1,
							       <<Bin/binary,
								 10>>,
							       TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{rq := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= undefined -> B1;
		    true ->
			e_mfield_GetRQResponse_rq(TrF2, <<B1/binary, 18>>,
						  TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{labels := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= undefined -> B2;
	       true ->
		   e_mfield_GetRQResponse_labels(TrF3, <<B2/binary, 26>>,
						 TrUserData)
	    end
	  end;
      _ -> B2
    end.

'encode_msg_MatchEntryRequest.EntryValue'(Msg,
					  TrUserData) ->
    'encode_msg_MatchEntryRequest.EntryValue'(Msg, <<>>,
					      TrUserData).


'encode_msg_MatchEntryRequest.EntryValue'(#{} = M, Bin,
					  TrUserData) ->
    case M of
      #{value := F1} ->
	  case id(F1, TrUserData) of
	    {string, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_string(TrTF1, <<Bin/binary, 10>>, TrUserData)
		end;
	    {integer, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_sint(TrTF1, <<Bin/binary, 16>>, TrUserData)
		end;
	    {boolean, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_bool(TrTF1, <<Bin/binary, 24>>, TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_MatchEntryRequest(Msg, TrUserData) ->
    encode_msg_MatchEntryRequest(Msg, <<>>, TrUserData).


encode_msg_MatchEntryRequest(#{} = M, Bin,
			     TrUserData) ->
    B1 = case M of
	   #{entry := F1} ->
	       TrF1 = 'tr_encode_MatchEntryRequest.entry'(F1,
							  TrUserData),
	       if TrF1 == [] -> Bin;
		  true ->
		      e_field_MatchEntryRequest_entry(TrF1, Bin, TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{timeout := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_MatchEntryResponse(Msg, TrUserData) ->
    encode_msg_MatchEntryResponse(Msg, <<>>, TrUserData).


encode_msg_MatchEntryResponse(#{} = M, Bin,
			      TrUserData) ->
    B1 = case M of
	   #{response_status := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_MatchEntryResponse_response_status(TrF1,
								    <<Bin/binary,
								      10>>,
								    TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{rqs := F2} ->
	  TrF2 = id(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true ->
		 e_field_MatchEntryResponse_rqs(TrF2, B1, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_Request(Msg, TrUserData) ->
    encode_msg_Request(Msg, <<>>, TrUserData).


encode_msg_Request(#{} = M, Bin, TrUserData) ->
    case M of
      #{msg := F1} ->
	  case id(F1, TrUserData) of
	    {status_request, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_Request_status_request(TrTF1,
						  <<Bin/binary, 10>>,
						  TrUserData)
		end;
	    {add_rq_request, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_Request_add_rq_request(TrTF1,
						  <<Bin/binary, 18>>,
						  TrUserData)
		end;
	    {delete_rq_request, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_Request_delete_rq_request(TrTF1,
						     <<Bin/binary, 26>>,
						     TrUserData)
		end;
	    {get_rq_request, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_Request_get_rq_request(TrTF1,
						  <<Bin/binary, 34>>,
						  TrUserData)
		end;
	    {match_entry_request, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_Request_match_entry_request(TrTF1,
						       <<Bin/binary, 42>>,
						       TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_Response(Msg, TrUserData) ->
    encode_msg_Response(Msg, <<>>, TrUserData).


encode_msg_Response(#{} = M, Bin, TrUserData) ->
    case M of
      #{msg := F1} ->
	  case id(F1, TrUserData) of
	    {status_response, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_Response_status_response(TrTF1,
						    <<Bin/binary, 10>>,
						    TrUserData)
		end;
	    {add_rq_response, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_Response_add_rq_response(TrTF1,
						    <<Bin/binary, 18>>,
						    TrUserData)
		end;
	    {delete_rq_response, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_Response_delete_rq_response(TrTF1,
						       <<Bin/binary, 26>>,
						       TrUserData)
		end;
	    {get_rq_response, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_Response_get_rq_response(TrTF1,
						    <<Bin/binary, 34>>,
						    TrUserData)
		end;
	    {match_entry_response, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_Response_match_entry_response(TrTF1,
							 <<Bin/binary, 42>>,
							 TrUserData)
		end
	  end;
      _ -> Bin
    end.

e_mfield_StatusResponse_node_info(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_NodeInfo(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_StatusResponse_node_info([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_StatusResponse_node_info(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_StatusResponse_node_info(Rest, Bin3,
				     TrUserData);
e_field_StatusResponse_node_info([], Bin,
				 _TrUserData) ->
    Bin.

e_mfield_StatusResponse_response_status(Msg, Bin,
					TrUserData) ->
    SubBin = encode_msg_ResponseStatus(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RQItem_rq(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RQ(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RQItem_type_options(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RQItemTypeOptions(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RQ_rq_items(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RQItem(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_RQ_rq_items([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_RQ_rq_items(id(Elem, TrUserData), Bin2,
				TrUserData),
    e_field_RQ_rq_items(Rest, Bin3, TrUserData);
e_field_RQ_rq_items([], Bin, _TrUserData) -> Bin.

e_mfield_AddRQRequest_rq(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RQ(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_AddRQRequest_labels(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RQLabels(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_RQLabels_labels(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RQLabel(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_RQLabels_labels([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_RQLabels_labels(id(Elem, TrUserData),
				    Bin2, TrUserData),
    e_field_RQLabels_labels(Rest, Bin3, TrUserData);
e_field_RQLabels_labels([], Bin, _TrUserData) -> Bin.

e_mfield_AddRQResponse_response_status(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_ResponseStatus(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_DeleteRQResponse_response_status(Msg, Bin,
					  TrUserData) ->
    SubBin = encode_msg_ResponseStatus(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetRQRequest_labels(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RQLabels(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetRQResponse_response_status(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_ResponseStatus(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetRQResponse_rq(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RQ(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_GetRQResponse_labels(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RQLabels(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MatchEntryRequest_entry(Msg, Bin,
				 TrUserData) ->
    SubBin =
	'encode_msg_map<string,MatchEntryRequest.EntryValue>'(Msg,
							      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MatchEntryRequest_entry([Elem | Rest], Bin,
				TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_MatchEntryRequest_entry('tr_encode_MatchEntryRequest.entry[x]'(Elem,
										TrUserData),
					 Bin2, TrUserData),
    e_field_MatchEntryRequest_entry(Rest, Bin3, TrUserData);
e_field_MatchEntryRequest_entry([], Bin, _TrUserData) ->
    Bin.

e_mfield_MatchEntryResponse_response_status(Msg, Bin,
					    TrUserData) ->
    SubBin = encode_msg_ResponseStatus(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_MatchEntryResponse_rqs(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_RQ(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_MatchEntryResponse_rqs([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_MatchEntryResponse_rqs(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_MatchEntryResponse_rqs(Rest, Bin3, TrUserData);
e_field_MatchEntryResponse_rqs([], Bin, _TrUserData) ->
    Bin.

e_mfield_Request_status_request(_Msg, Bin,
				_TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_Request_add_rq_request(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_AddRQRequest(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_delete_rq_request(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_DeleteRQRequest(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_get_rq_request(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_GetRQRequest(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Request_match_entry_request(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_MatchEntryRequest(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_status_response(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_StatusResponse(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_add_rq_response(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_AddRQResponse(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_delete_rq_response(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_DeleteRQResponse(Msg, <<>>,
					 TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_get_rq_response(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_GetRQResponse(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_Response_match_entry_response(Msg, Bin,
				       TrUserData) ->
    SubBin = encode_msg_MatchEntryResponse(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'encode_msg_map<string,MatchEntryRequest.EntryValue>'(#{key
							    := F1,
							value := F2},
						      Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      'e_mfield_map<string,MatchEntryRequest.EntryValue>_value'(TrF2,
								<<B1/binary,
								  18>>,
								TrUserData)
    end.

'e_mfield_map<string,MatchEntryRequest.EntryValue>_value'(Msg,
							  Bin, TrUserData) ->
    SubBin = 'encode_msg_MatchEntryRequest.EntryValue'(Msg,
						       <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_enum_NodeStatus('ONLINE', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_NodeStatus('OFFLINE', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_NodeStatus('TEMP_OFFLINE', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_NodeStatus('UNKNOWN', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
e_enum_NodeStatus(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_ResponseStatus.Status'('OK', Bin,
			       _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_ResponseStatus.Status'('NOK', Bin,
			       _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_ResponseStatus.Status'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_RQItemTypeOptions.Operator'('NULL', Bin,
				    _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_RQItemTypeOptions.Operator'('GT', Bin,
				    _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_RQItemTypeOptions.Operator'('LT', Bin,
				    _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_RQItemTypeOptions.Operator'('GTE', Bin,
				    _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_RQItemTypeOptions.Operator'('LTE', Bin,
				    _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_RQItemTypeOptions.Operator'('AND', Bin,
				    _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_RQItemTypeOptions.Operator'('NOT', Bin,
				    _TrUserData) ->
    <<Bin/binary, 6>>;
'e_enum_RQItemTypeOptions.Operator'('COUNT', Bin,
				    _TrUserData) ->
    <<Bin/binary, 7>>;
'e_enum_RQItemTypeOptions.Operator'(V, Bin,
				    _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit('NodeInfo', Bin, TrUserData) ->
    id(decode_msg_NodeInfo(Bin, TrUserData), TrUserData);
decode_msg_2_doit('ResponseStatus', Bin, TrUserData) ->
    id(decode_msg_ResponseStatus(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('StatusRequest', Bin, TrUserData) ->
    id(decode_msg_StatusRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('StatusResponse', Bin, TrUserData) ->
    id(decode_msg_StatusResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('RQItemTypeOptions', Bin,
		  TrUserData) ->
    id(decode_msg_RQItemTypeOptions(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('RQItem', Bin, TrUserData) ->
    id(decode_msg_RQItem(Bin, TrUserData), TrUserData);
decode_msg_2_doit('RQLabel', Bin, TrUserData) ->
    id(decode_msg_RQLabel(Bin, TrUserData), TrUserData);
decode_msg_2_doit('RQ', Bin, TrUserData) ->
    id(decode_msg_RQ(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AddRQRequest', Bin, TrUserData) ->
    id(decode_msg_AddRQRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('RQLabels', Bin, TrUserData) ->
    id(decode_msg_RQLabels(Bin, TrUserData), TrUserData);
decode_msg_2_doit('AddRQResponse', Bin, TrUserData) ->
    id(decode_msg_AddRQResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('DeleteRQRequest', Bin, TrUserData) ->
    id(decode_msg_DeleteRQRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('DeleteRQResponse', Bin,
		  TrUserData) ->
    id(decode_msg_DeleteRQResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('GetRQRequest', Bin, TrUserData) ->
    id(decode_msg_GetRQRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('GetRQResponse', Bin, TrUserData) ->
    id(decode_msg_GetRQResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchEntryRequest.EntryValue', Bin,
		  TrUserData) ->
    id('decode_msg_MatchEntryRequest.EntryValue'(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit('MatchEntryRequest', Bin,
		  TrUserData) ->
    id(decode_msg_MatchEntryRequest(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('MatchEntryResponse', Bin,
		  TrUserData) ->
    id(decode_msg_MatchEntryResponse(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit('Request', Bin, TrUserData) ->
    id(decode_msg_Request(Bin, TrUserData), TrUserData);
decode_msg_2_doit('Response', Bin, TrUserData) ->
    id(decode_msg_Response(Bin, TrUserData), TrUserData).



decode_msg_NodeInfo(Bin, TrUserData) ->
    dfp_read_field_def_NodeInfo(Bin, 0, 0,
				id([], TrUserData), id('ONLINE', TrUserData),
				id(0, TrUserData), TrUserData).

dfp_read_field_def_NodeInfo(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_NodeInfo_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_NodeInfo(<<16, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_NodeInfo_node_status(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_NodeInfo(<<24, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_NodeInfo_rq_count(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_NodeInfo(<<>>, 0, 0, F@_1, F@_2,
			    F@_3, _) ->
    #{name => F@_1, node_status => F@_2, rq_count => F@_3};
dfp_read_field_def_NodeInfo(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    dg_read_field_def_NodeInfo(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

dg_read_field_def_NodeInfo(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_NodeInfo(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_NodeInfo(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_NodeInfo_name(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      16 ->
	  d_field_NodeInfo_node_status(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      24 ->
	  d_field_NodeInfo_rq_count(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_NodeInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    1 ->
		skip_64_NodeInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    2 ->
		skip_length_delimited_NodeInfo(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    3 ->
		skip_group_NodeInfo(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, TrUserData);
	    5 ->
		skip_32_NodeInfo(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData)
	  end
    end;
dg_read_field_def_NodeInfo(<<>>, 0, 0, F@_1, F@_2, F@_3,
			   _) ->
    #{name => F@_1, node_status => F@_2, rq_count => F@_3}.

d_field_NodeInfo_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_NodeInfo_name(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_NodeInfo_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_NodeInfo(RestF, 0, 0, NewFValue,
				F@_2, F@_3, TrUserData).

d_field_NodeInfo_node_status(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_NodeInfo_node_status(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_NodeInfo_node_status(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_NodeStatus(begin
						 <<Res:32/signed-native>> = <<(X
										 bsl
										 N
										 +
										 Acc):32/unsigned-native>>,
						 id(Res, TrUserData)
					       end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_NodeInfo(RestF, 0, 0, F@_1,
				NewFValue, F@_3, TrUserData).

d_field_NodeInfo_rq_count(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_NodeInfo_rq_count(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_NodeInfo_rq_count(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    ZValue = X bsl N + Acc,
			    if ZValue band 1 =:= 0 ->
				   id(ZValue bsr 1, TrUserData);
			       true -> id(-(ZValue + 1 bsr 1), TrUserData)
			    end
			  end,
			  Rest},
    dfp_read_field_def_NodeInfo(RestF, 0, 0, F@_1, F@_2,
				NewFValue, TrUserData).

skip_varint_NodeInfo(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_NodeInfo(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
skip_varint_NodeInfo(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_NodeInfo(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_length_delimited_NodeInfo(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_NodeInfo(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_NodeInfo(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_NodeInfo(Rest2, 0, 0, F@_1, F@_2,
				F@_3, TrUserData).

skip_group_NodeInfo(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_NodeInfo(Rest, 0, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_32_NodeInfo(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_NodeInfo(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_64_NodeInfo(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_NodeInfo(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

decode_msg_ResponseStatus(Bin, TrUserData) ->
    dfp_read_field_def_ResponseStatus(Bin, 0, 0,
				      id('OK', TrUserData), id([], TrUserData),
				      TrUserData).

dfp_read_field_def_ResponseStatus(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ResponseStatus_status(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_ResponseStatus(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_ResponseStatus_reason(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_ResponseStatus(<<>>, 0, 0, F@_1,
				  F@_2, _) ->
    #{status => F@_1, reason => F@_2};
dfp_read_field_def_ResponseStatus(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_ResponseStatus(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_ResponseStatus(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_ResponseStatus(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_ResponseStatus(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_ResponseStatus_status(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      18 ->
	  d_field_ResponseStatus_reason(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_ResponseStatus(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_ResponseStatus(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_ResponseStatus(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_ResponseStatus(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_ResponseStatus(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_ResponseStatus(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    #{status => F@_1, reason => F@_2}.

d_field_ResponseStatus_status(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ResponseStatus_status(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_ResponseStatus_status(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_ResponseStatus.Status'(begin
					     <<Res:32/signed-native>> = <<(X bsl
									     N
									     +
									     Acc):32/unsigned-native>>,
					     id(Res, TrUserData)
					   end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_ResponseStatus(RestF, 0, 0,
				      NewFValue, F@_2, TrUserData).

d_field_ResponseStatus_reason(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_ResponseStatus_reason(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_ResponseStatus_reason(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_ResponseStatus(RestF, 0, 0, F@_1,
				      NewFValue, TrUserData).

skip_varint_ResponseStatus(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_ResponseStatus(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_ResponseStatus(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ResponseStatus(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_ResponseStatus(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_ResponseStatus(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_ResponseStatus(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_ResponseStatus(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_ResponseStatus(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_ResponseStatus(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_ResponseStatus(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ResponseStatus(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_ResponseStatus(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_ResponseStatus(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

decode_msg_StatusRequest(Bin, TrUserData) ->
    dfp_read_field_def_StatusRequest(Bin, 0, 0, TrUserData).

dfp_read_field_def_StatusRequest(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_StatusRequest(Other, Z1, Z2,
				 TrUserData) ->
    dg_read_field_def_StatusRequest(Other, Z1, Z2,
				    TrUserData).

dg_read_field_def_StatusRequest(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_StatusRequest(Rest, N + 7,
				    X bsl N + Acc, TrUserData);
dg_read_field_def_StatusRequest(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 -> skip_varint_StatusRequest(Rest, 0, 0, TrUserData);
      1 -> skip_64_StatusRequest(Rest, 0, 0, TrUserData);
      2 ->
	  skip_length_delimited_StatusRequest(Rest, 0, 0,
					      TrUserData);
      3 ->
	  skip_group_StatusRequest(Rest, Key bsr 3, 0,
				   TrUserData);
      5 -> skip_32_StatusRequest(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_StatusRequest(<<>>, 0, 0, _) -> #{}.

skip_varint_StatusRequest(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    skip_varint_StatusRequest(Rest, Z1, Z2, TrUserData);
skip_varint_StatusRequest(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, TrUserData) ->
    dfp_read_field_def_StatusRequest(Rest, Z1, Z2,
				     TrUserData).

skip_length_delimited_StatusRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_StatusRequest(Rest, N + 7,
					X bsl N + Acc, TrUserData);
skip_length_delimited_StatusRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StatusRequest(Rest2, 0, 0,
				     TrUserData).

skip_group_StatusRequest(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StatusRequest(Rest, 0, Z2,
				     TrUserData).

skip_32_StatusRequest(<<_:32, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_StatusRequest(Rest, Z1, Z2,
				     TrUserData).

skip_64_StatusRequest(<<_:64, Rest/binary>>, Z1, Z2,
		      TrUserData) ->
    dfp_read_field_def_StatusRequest(Rest, Z1, Z2,
				     TrUserData).

decode_msg_StatusResponse(Bin, TrUserData) ->
    dfp_read_field_def_StatusResponse(Bin, 0, 0,
				      id([], TrUserData),
				      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_StatusResponse(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_StatusResponse_node_info(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_StatusResponse(<<18, Rest/binary>>,
				  Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_StatusResponse_response_status(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
dfp_read_field_def_StatusResponse(<<>>, 0, 0, R1, F@_2,
				  TrUserData) ->
    S1 = #{},
    S2 = if R1 == '$undef' -> S1;
	    true -> S1#{node_info => lists_reverse(R1, TrUserData)}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{response_status => F@_2}
    end;
dfp_read_field_def_StatusResponse(Other, Z1, Z2, F@_1,
				  F@_2, TrUserData) ->
    dg_read_field_def_StatusResponse(Other, Z1, Z2, F@_1,
				     F@_2, TrUserData).

dg_read_field_def_StatusResponse(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_StatusResponse(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_StatusResponse(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_StatusResponse_node_info(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      18 ->
	  d_field_StatusResponse_response_status(Rest, 0, 0, F@_1,
						 F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_StatusResponse(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    1 ->
		skip_64_StatusResponse(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    2 ->
		skip_length_delimited_StatusResponse(Rest, 0, 0, F@_1,
						     F@_2, TrUserData);
	    3 ->
		skip_group_StatusResponse(Rest, Key bsr 3, 0, F@_1,
					  F@_2, TrUserData);
	    5 ->
		skip_32_StatusResponse(Rest, 0, 0, F@_1, F@_2,
				       TrUserData)
	  end
    end;
dg_read_field_def_StatusResponse(<<>>, 0, 0, R1, F@_2,
				 TrUserData) ->
    S1 = #{},
    S2 = if R1 == '$undef' -> S1;
	    true -> S1#{node_info => lists_reverse(R1, TrUserData)}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{response_status => F@_2}
    end.

d_field_StatusResponse_node_info(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_StatusResponse_node_info(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_StatusResponse_node_info(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_NodeInfo(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_StatusResponse(RestF, 0, 0,
				      cons(NewFValue, Prev, TrUserData), F@_2,
				      TrUserData).

d_field_StatusResponse_response_status(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_StatusResponse_response_status(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
d_field_StatusResponse_response_status(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseStatus(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_StatusResponse(RestF, 0, 0, F@_1,
				      if Prev == '$undef' -> NewFValue;
					 true ->
					     merge_msg_ResponseStatus(Prev,
								      NewFValue,
								      TrUserData)
				      end,
				      TrUserData).

skip_varint_StatusResponse(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_StatusResponse(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
skip_varint_StatusResponse(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_StatusResponse(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_length_delimited_StatusResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_StatusResponse(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_StatusResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_StatusResponse(Rest2, 0, 0, F@_1,
				      F@_2, TrUserData).

skip_group_StatusResponse(Bin, FNum, Z2, F@_1, F@_2,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_StatusResponse(Rest, 0, Z2, F@_1,
				      F@_2, TrUserData).

skip_32_StatusResponse(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_StatusResponse(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

skip_64_StatusResponse(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_StatusResponse(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData).

decode_msg_RQItemTypeOptions(Bin, TrUserData) ->
    dfp_read_field_def_RQItemTypeOptions(Bin, 0, 0,
					 id('NULL', TrUserData),
					 id(0, TrUserData), TrUserData).

dfp_read_field_def_RQItemTypeOptions(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_RQItemTypeOptions_operator(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
dfp_read_field_def_RQItemTypeOptions(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_RQItemTypeOptions_count(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_RQItemTypeOptions(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{operator => F@_1, count => F@_2};
dfp_read_field_def_RQItemTypeOptions(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_RQItemTypeOptions(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_RQItemTypeOptions(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RQItemTypeOptions(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_RQItemTypeOptions(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_RQItemTypeOptions_operator(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      16 ->
	  d_field_RQItemTypeOptions_count(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RQItemTypeOptions(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_RQItemTypeOptions(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_RQItemTypeOptions(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_RQItemTypeOptions(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_RQItemTypeOptions(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_RQItemTypeOptions(<<>>, 0, 0, F@_1,
				    F@_2, _) ->
    #{operator => F@_1, count => F@_2}.

d_field_RQItemTypeOptions_operator(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_RQItemTypeOptions_operator(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_RQItemTypeOptions_operator(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_RQItemTypeOptions.Operator'(begin
						  <<Res:32/signed-native>> =
						      <<(X bsl N +
							   Acc):32/unsigned-native>>,
						  id(Res, TrUserData)
						end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_RQItemTypeOptions(RestF, 0, 0,
					 NewFValue, F@_2, TrUserData).

d_field_RQItemTypeOptions_count(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_RQItemTypeOptions_count(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_RQItemTypeOptions_count(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_RQItemTypeOptions(RestF, 0, 0, F@_1,
					 NewFValue, TrUserData).

skip_varint_RQItemTypeOptions(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_RQItemTypeOptions(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_RQItemTypeOptions(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_RQItemTypeOptions(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_RQItemTypeOptions(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_RQItemTypeOptions(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_RQItemTypeOptions(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RQItemTypeOptions(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_RQItemTypeOptions(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RQItemTypeOptions(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_RQItemTypeOptions(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_RQItemTypeOptions(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_RQItemTypeOptions(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_RQItemTypeOptions(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

decode_msg_RQItem(Bin, TrUserData) ->
    dfp_read_field_def_RQItem(Bin, 0, 0, id([], TrUserData),
			      id('$undef', TrUserData),
			      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_RQItem(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_RQItem_key(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
dfp_read_field_def_RQItem(<<16, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_RQItem_integer(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_RQItem(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_RQItem_string(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  TrUserData);
dfp_read_field_def_RQItem(<<34, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_RQItem_rq(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		      TrUserData);
dfp_read_field_def_RQItem(<<40, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_RQItem_boolean(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_RQItem(<<50, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_RQItem_type_options(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_RQItem(<<>>, 0, 0, F@_1, F@_2, F@_3,
			  _) ->
    S1 = #{key => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{value => F@_2}
	 end,
    if F@_3 == '$undef' -> S2;
       true -> S2#{type_options => F@_3}
    end;
dfp_read_field_def_RQItem(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, TrUserData) ->
    dg_read_field_def_RQItem(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData).

dg_read_field_def_RQItem(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RQItem(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_RQItem(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RQItem_key(Rest, 0, 0, F@_1, F@_2, F@_3,
			     TrUserData);
      16 ->
	  d_field_RQItem_integer(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      26 ->
	  d_field_RQItem_string(Rest, 0, 0, F@_1, F@_2, F@_3,
				TrUserData);
      34 ->
	  d_field_RQItem_rq(Rest, 0, 0, F@_1, F@_2, F@_3,
			    TrUserData);
      40 ->
	  d_field_RQItem_boolean(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      50 ->
	  d_field_RQItem_type_options(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RQItem(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    1 ->
		skip_64_RQItem(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
	    2 ->
		skip_length_delimited_RQItem(Rest, 0, 0, F@_1, F@_2,
					     F@_3, TrUserData);
	    3 ->
		skip_group_RQItem(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    5 ->
		skip_32_RQItem(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_RQItem(<<>>, 0, 0, F@_1, F@_2, F@_3,
			 _) ->
    S1 = #{key => F@_1},
    S2 = if F@_2 == '$undef' -> S1;
	    true -> S1#{value => F@_2}
	 end,
    if F@_3 == '$undef' -> S2;
       true -> S2#{type_options => F@_3}
    end.

d_field_RQItem_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_RQItem_key(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, TrUserData);
d_field_RQItem_key(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		   F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RQItem(RestF, 0, 0, NewFValue, F@_2,
			      F@_3, TrUserData).

d_field_RQItem_integer(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_RQItem_integer(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_RQItem_integer(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {begin
			    ZValue = X bsl N + Acc,
			    if ZValue band 1 =:= 0 ->
				   id(ZValue bsr 1, TrUserData);
			       true -> id(-(ZValue + 1 bsr 1), TrUserData)
			    end
			  end,
			  Rest},
    dfp_read_field_def_RQItem(RestF, 0, 0, F@_1,
			      id({integer, NewFValue}, TrUserData), F@_3,
			      TrUserData).

d_field_RQItem_string(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_RQItem_string(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, TrUserData);
d_field_RQItem_string(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RQItem(RestF, 0, 0, F@_1,
			      id({string, NewFValue}, TrUserData), F@_3,
			      TrUserData).

d_field_RQItem_rq(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_RQItem_rq(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, TrUserData);
d_field_RQItem_rq(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_RQ(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RQItem(RestF, 0, 0, F@_1,
			      case Prev of
				'$undef' -> id({rq, NewFValue}, TrUserData);
				{rq, MVPrev} ->
				    id({rq,
					merge_msg_RQ(MVPrev, NewFValue,
						     TrUserData)},
				       TrUserData);
				_ -> id({rq, NewFValue}, TrUserData)
			      end,
			      F@_3, TrUserData).

d_field_RQItem_boolean(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_RQItem_boolean(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_RQItem_boolean(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_RQItem(RestF, 0, 0, F@_1,
			      id({boolean, NewFValue}, TrUserData), F@_3,
			      TrUserData).

d_field_RQItem_type_options(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_RQItem_type_options(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_RQItem_type_options(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_RQItemTypeOptions(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RQItem(RestF, 0, 0, F@_1, F@_2,
			      if Prev == '$undef' -> NewFValue;
				 true ->
				     merge_msg_RQItemTypeOptions(Prev,
								 NewFValue,
								 TrUserData)
			      end,
			      TrUserData).

skip_varint_RQItem(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_RQItem(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
skip_varint_RQItem(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_RQItem(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

skip_length_delimited_RQItem(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_RQItem(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_RQItem(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RQItem(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData).

skip_group_RQItem(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RQItem(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      TrUserData).

skip_32_RQItem(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_RQItem(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

skip_64_RQItem(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_RQItem(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

decode_msg_RQLabel(Bin, TrUserData) ->
    dfp_read_field_def_RQLabel(Bin, 0, 0,
			       id([], TrUserData), id([], TrUserData),
			       TrUserData).

dfp_read_field_def_RQLabel(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_RQLabel_key(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_RQLabel(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, F@_2, TrUserData) ->
    d_field_RQLabel_value(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_RQLabel(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{key => F@_1, value => F@_2};
dfp_read_field_def_RQLabel(Other, Z1, Z2, F@_1, F@_2,
			   TrUserData) ->
    dg_read_field_def_RQLabel(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData).

dg_read_field_def_RQLabel(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RQLabel(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
dg_read_field_def_RQLabel(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RQLabel_key(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_RQLabel_value(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_RQLabel(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 ->
		skip_64_RQLabel(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_RQLabel(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    3 ->
		skip_group_RQLabel(Rest, Key bsr 3, 0, F@_1, F@_2,
				   TrUserData);
	    5 -> skip_32_RQLabel(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_RQLabel(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{key => F@_1, value => F@_2}.

d_field_RQLabel_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_RQLabel_key(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_RQLabel_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RQLabel(RestF, 0, 0, NewFValue, F@_2,
			       TrUserData).

d_field_RQLabel_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_RQLabel_value(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_RQLabel_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RQLabel(RestF, 0, 0, F@_1, NewFValue,
			       TrUserData).

skip_varint_RQLabel(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    skip_varint_RQLabel(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
skip_varint_RQLabel(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_RQLabel(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_length_delimited_RQLabel(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_RQLabel(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_RQLabel(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RQLabel(Rest2, 0, 0, F@_1, F@_2,
			       TrUserData).

skip_group_RQLabel(Bin, FNum, Z2, F@_1, F@_2,
		   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RQLabel(Rest, 0, Z2, F@_1, F@_2,
			       TrUserData).

skip_32_RQLabel(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_RQLabel(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

skip_64_RQLabel(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		F@_2, TrUserData) ->
    dfp_read_field_def_RQLabel(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData).

decode_msg_RQ(Bin, TrUserData) ->
    dfp_read_field_def_RQ(Bin, 0, 0, id([], TrUserData),
			  id([], TrUserData), TrUserData).

dfp_read_field_def_RQ(<<10, Rest/binary>>, Z1, Z2, F@_1,
		      F@_2, TrUserData) ->
    d_field_RQ_rq_items(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_RQ(<<18, Rest/binary>>, Z1, Z2, F@_1,
		      F@_2, TrUserData) ->
    d_field_RQ_uuid(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_RQ(<<>>, 0, 0, R1, F@_2,
		      TrUserData) ->
    S1 = #{uuid => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{rq_items => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_RQ(Other, Z1, Z2, F@_1, F@_2,
		      TrUserData) ->
    dg_read_field_def_RQ(Other, Z1, Z2, F@_1, F@_2,
			 TrUserData).

dg_read_field_def_RQ(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RQ(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
dg_read_field_def_RQ(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RQ_rq_items(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_RQ_uuid(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_RQ(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_RQ(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_RQ(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    3 ->
		skip_group_RQ(Rest, Key bsr 3, 0, F@_1, F@_2,
			      TrUserData);
	    5 -> skip_32_RQ(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_RQ(<<>>, 0, 0, R1, F@_2,
		     TrUserData) ->
    S1 = #{uuid => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{rq_items => lists_reverse(R1, TrUserData)}
    end.

d_field_RQ_rq_items(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_RQ_rq_items(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_RQ_rq_items(<<0:1, X:7, Rest/binary>>, N, Acc,
		    Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_RQItem(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RQ(RestF, 0, 0,
			  cons(NewFValue, Prev, TrUserData), F@_2, TrUserData).

d_field_RQ_uuid(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1,
		F@_2, TrUserData)
    when N < 57 ->
    d_field_RQ_uuid(Rest, N + 7, X bsl N + Acc, F@_1, F@_2,
		    TrUserData);
d_field_RQ_uuid(<<0:1, X:7, Rest/binary>>, N, Acc, F@_1,
		_, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RQ(RestF, 0, 0, F@_1, NewFValue,
			  TrUserData).

skip_varint_RQ(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    skip_varint_RQ(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_RQ(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_RQ(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData).

skip_length_delimited_RQ(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_RQ(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
skip_length_delimited_RQ(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RQ(Rest2, 0, 0, F@_1, F@_2,
			  TrUserData).

skip_group_RQ(Bin, FNum, Z2, F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RQ(Rest, 0, Z2, F@_1, F@_2,
			  TrUserData).

skip_32_RQ(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	   TrUserData) ->
    dfp_read_field_def_RQ(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData).

skip_64_RQ(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	   TrUserData) ->
    dfp_read_field_def_RQ(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData).

decode_msg_AddRQRequest(Bin, TrUserData) ->
    dfp_read_field_def_AddRQRequest(Bin, 0, 0,
				    id('$undef', TrUserData),
				    id('$undef', TrUserData), TrUserData).

dfp_read_field_def_AddRQRequest(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_AddRQRequest_rq(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_AddRQRequest(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_AddRQRequest_labels(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_AddRQRequest(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{rq => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{labels => F@_2}
    end;
dfp_read_field_def_AddRQRequest(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_AddRQRequest(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_AddRQRequest(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddRQRequest(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_AddRQRequest(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AddRQRequest_rq(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      18 ->
	  d_field_AddRQRequest_labels(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddRQRequest(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_AddRQRequest(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_AddRQRequest(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_AddRQRequest(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_AddRQRequest(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_AddRQRequest(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{rq => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{labels => F@_2}
    end.

d_field_AddRQRequest_rq(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AddRQRequest_rq(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_AddRQRequest_rq(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_RQ(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AddRQRequest(RestF, 0, 0,
				    if Prev == '$undef' -> NewFValue;
				       true ->
					   merge_msg_RQ(Prev, NewFValue,
							TrUserData)
				    end,
				    F@_2, TrUserData).

d_field_AddRQRequest_labels(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AddRQRequest_labels(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_AddRQRequest_labels(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_RQLabels(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AddRQRequest(RestF, 0, 0, F@_1,
				    if Prev == '$undef' -> NewFValue;
				       true ->
					   merge_msg_RQLabels(Prev, NewFValue,
							      TrUserData)
				    end,
				    TrUserData).

skip_varint_AddRQRequest(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AddRQRequest(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_AddRQRequest(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AddRQRequest(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_AddRQRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddRQRequest(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_AddRQRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddRQRequest(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_AddRQRequest(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddRQRequest(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_AddRQRequest(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AddRQRequest(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_AddRQRequest(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AddRQRequest(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

decode_msg_RQLabels(Bin, TrUserData) ->
    dfp_read_field_def_RQLabels(Bin, 0, 0,
				id([], TrUserData), TrUserData).

dfp_read_field_def_RQLabels(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_RQLabels_labels(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_RQLabels(<<>>, 0, 0, R1,
			    TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{labels => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_RQLabels(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_RQLabels(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_RQLabels(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_RQLabels(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_RQLabels(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_RQLabels_labels(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_RQLabels(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_RQLabels(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_RQLabels(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_RQLabels(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_RQLabels(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_RQLabels(<<>>, 0, 0, R1,
			   TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{labels => lists_reverse(R1, TrUserData)}
    end.

d_field_RQLabels_labels(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_RQLabels_labels(Rest, N + 7, X bsl N + Acc,
			    F@_1, TrUserData);
d_field_RQLabels_labels(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_RQLabel(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_RQLabels(RestF, 0, 0,
				cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_RQLabels(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_RQLabels(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_RQLabels(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_RQLabels(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_RQLabels(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_RQLabels(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_RQLabels(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_RQLabels(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_RQLabels(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_RQLabels(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_RQLabels(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_RQLabels(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_RQLabels(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_RQLabels(Rest, Z1, Z2, F@_1,
				TrUserData).

decode_msg_AddRQResponse(Bin, TrUserData) ->
    dfp_read_field_def_AddRQResponse(Bin, 0, 0,
				     id([], TrUserData),
				     id('$undef', TrUserData), TrUserData).

dfp_read_field_def_AddRQResponse(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AddRQResponse_uuid(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_AddRQResponse(<<34, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_AddRQResponse_response_status(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData);
dfp_read_field_def_AddRQResponse(<<>>, 0, 0, F@_1, F@_2,
				 _) ->
    S1 = #{uuid => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{response_status => F@_2}
    end;
dfp_read_field_def_AddRQResponse(Other, Z1, Z2, F@_1,
				 F@_2, TrUserData) ->
    dg_read_field_def_AddRQResponse(Other, Z1, Z2, F@_1,
				    F@_2, TrUserData).

dg_read_field_def_AddRQResponse(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_AddRQResponse(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_AddRQResponse(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_AddRQResponse_uuid(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      34 ->
	  d_field_AddRQResponse_response_status(Rest, 0, 0, F@_1,
						F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_AddRQResponse(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    1 ->
		skip_64_AddRQResponse(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    2 ->
		skip_length_delimited_AddRQResponse(Rest, 0, 0, F@_1,
						    F@_2, TrUserData);
	    3 ->
		skip_group_AddRQResponse(Rest, Key bsr 3, 0, F@_1, F@_2,
					 TrUserData);
	    5 ->
		skip_32_AddRQResponse(Rest, 0, 0, F@_1, F@_2,
				      TrUserData)
	  end
    end;
dg_read_field_def_AddRQResponse(<<>>, 0, 0, F@_1, F@_2,
				_) ->
    S1 = #{uuid => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{response_status => F@_2}
    end.

d_field_AddRQResponse_uuid(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AddRQResponse_uuid(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_AddRQResponse_uuid(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AddRQResponse(RestF, 0, 0, NewFValue,
				     F@_2, TrUserData).

d_field_AddRQResponse_response_status(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_AddRQResponse_response_status(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
d_field_AddRQResponse_response_status(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseStatus(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_AddRQResponse(RestF, 0, 0, F@_1,
				     if Prev == '$undef' -> NewFValue;
					true ->
					    merge_msg_ResponseStatus(Prev,
								     NewFValue,
								     TrUserData)
				     end,
				     TrUserData).

skip_varint_AddRQResponse(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_AddRQResponse(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
skip_varint_AddRQResponse(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AddRQResponse(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_length_delimited_AddRQResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_AddRQResponse(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_AddRQResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_AddRQResponse(Rest2, 0, 0, F@_1,
				     F@_2, TrUserData).

skip_group_AddRQResponse(Bin, FNum, Z2, F@_1, F@_2,
			 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_AddRQResponse(Rest, 0, Z2, F@_1,
				     F@_2, TrUserData).

skip_32_AddRQResponse(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AddRQResponse(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

skip_64_AddRQResponse(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_AddRQResponse(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData).

decode_msg_DeleteRQRequest(Bin, TrUserData) ->
    dfp_read_field_def_DeleteRQRequest(Bin, 0, 0,
				       id([], TrUserData), TrUserData).

dfp_read_field_def_DeleteRQRequest(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_DeleteRQRequest_uuid(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_DeleteRQRequest(<<>>, 0, 0, F@_1,
				   _) ->
    #{uuid => F@_1};
dfp_read_field_def_DeleteRQRequest(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_DeleteRQRequest(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_DeleteRQRequest(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteRQRequest(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_DeleteRQRequest(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DeleteRQRequest_uuid(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DeleteRQRequest(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_DeleteRQRequest(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_DeleteRQRequest(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_DeleteRQRequest(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_DeleteRQRequest(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_DeleteRQRequest(<<>>, 0, 0, F@_1,
				  _) ->
    #{uuid => F@_1}.

d_field_DeleteRQRequest_uuid(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_DeleteRQRequest_uuid(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_DeleteRQRequest_uuid(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DeleteRQRequest(RestF, 0, 0,
				       NewFValue, TrUserData).

skip_varint_DeleteRQRequest(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_DeleteRQRequest(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_DeleteRQRequest(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_DeleteRQRequest(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_DeleteRQRequest(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteRQRequest(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_DeleteRQRequest(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteRQRequest(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_DeleteRQRequest(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteRQRequest(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_DeleteRQRequest(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_DeleteRQRequest(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_DeleteRQRequest(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_DeleteRQRequest(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_DeleteRQResponse(Bin, TrUserData) ->
    dfp_read_field_def_DeleteRQResponse(Bin, 0, 0,
					id('$undef', TrUserData), TrUserData).

dfp_read_field_def_DeleteRQResponse(<<10, Rest/binary>>,
				    Z1, Z2, F@_1, TrUserData) ->
    d_field_DeleteRQResponse_response_status(Rest, Z1, Z2,
					     F@_1, TrUserData);
dfp_read_field_def_DeleteRQResponse(<<>>, 0, 0, F@_1,
				    _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{response_status => F@_1}
    end;
dfp_read_field_def_DeleteRQResponse(Other, Z1, Z2, F@_1,
				    TrUserData) ->
    dg_read_field_def_DeleteRQResponse(Other, Z1, Z2, F@_1,
				       TrUserData).

dg_read_field_def_DeleteRQResponse(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_DeleteRQResponse(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_DeleteRQResponse(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_DeleteRQResponse_response_status(Rest, 0, 0,
						   F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_DeleteRQResponse(Rest, 0, 0, F@_1,
					     TrUserData);
	    1 ->
		skip_64_DeleteRQResponse(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_DeleteRQResponse(Rest, 0, 0, F@_1,
						       TrUserData);
	    3 ->
		skip_group_DeleteRQResponse(Rest, Key bsr 3, 0, F@_1,
					    TrUserData);
	    5 ->
		skip_32_DeleteRQResponse(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_DeleteRQResponse(<<>>, 0, 0, F@_1,
				   _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{response_status => F@_1}
    end.

d_field_DeleteRQResponse_response_status(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_DeleteRQResponse_response_status(Rest, N + 7,
					     X bsl N + Acc, F@_1, TrUserData);
d_field_DeleteRQResponse_response_status(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseStatus(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_DeleteRQResponse(RestF, 0, 0,
					if Prev == '$undef' -> NewFValue;
					   true ->
					       merge_msg_ResponseStatus(Prev,
									NewFValue,
									TrUserData)
					end,
					TrUserData).

skip_varint_DeleteRQResponse(<<1:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    skip_varint_DeleteRQResponse(Rest, Z1, Z2, F@_1,
				 TrUserData);
skip_varint_DeleteRQResponse(<<0:1, _:7, Rest/binary>>,
			     Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_DeleteRQResponse(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_length_delimited_DeleteRQResponse(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_DeleteRQResponse(Rest, N + 7,
					   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_DeleteRQResponse(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_DeleteRQResponse(Rest2, 0, 0, F@_1,
					TrUserData).

skip_group_DeleteRQResponse(Bin, FNum, Z2, F@_1,
			    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_DeleteRQResponse(Rest, 0, Z2, F@_1,
					TrUserData).

skip_32_DeleteRQResponse(<<_:32, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_DeleteRQResponse(Rest, Z1, Z2, F@_1,
					TrUserData).

skip_64_DeleteRQResponse(<<_:64, Rest/binary>>, Z1, Z2,
			 F@_1, TrUserData) ->
    dfp_read_field_def_DeleteRQResponse(Rest, Z1, Z2, F@_1,
					TrUserData).

decode_msg_GetRQRequest(Bin, TrUserData) ->
    dfp_read_field_def_GetRQRequest(Bin, 0, 0,
				    id('$undef', TrUserData), TrUserData).

dfp_read_field_def_GetRQRequest(<<10, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_GetRQRequest_uuid(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_GetRQRequest(<<18, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_GetRQRequest_labels(Rest, Z1, Z2, F@_1,
				TrUserData);
dfp_read_field_def_GetRQRequest(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{field => F@_1}
    end;
dfp_read_field_def_GetRQRequest(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_GetRQRequest(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_GetRQRequest(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetRQRequest(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_GetRQRequest(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetRQRequest_uuid(Rest, 0, 0, F@_1, TrUserData);
      18 ->
	  d_field_GetRQRequest_labels(Rest, 0, 0, F@_1,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetRQRequest(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_GetRQRequest(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_GetRQRequest(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_GetRQRequest(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_GetRQRequest(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_GetRQRequest(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{field => F@_1}
    end.

d_field_GetRQRequest_uuid(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_GetRQRequest_uuid(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_GetRQRequest_uuid(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GetRQRequest(RestF, 0, 0,
				    id({uuid, NewFValue}, TrUserData),
				    TrUserData).

d_field_GetRQRequest_labels(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_GetRQRequest_labels(Rest, N + 7, X bsl N + Acc,
				F@_1, TrUserData);
d_field_GetRQRequest_labels(<<0:1, X:7, Rest/binary>>,
			    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_RQLabels(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GetRQRequest(RestF, 0, 0,
				    case Prev of
				      '$undef' ->
					  id({labels, NewFValue}, TrUserData);
				      {labels, MVPrev} ->
					  id({labels,
					      merge_msg_RQLabels(MVPrev,
								 NewFValue,
								 TrUserData)},
					     TrUserData);
				      _ -> id({labels, NewFValue}, TrUserData)
				    end,
				    TrUserData).

skip_varint_GetRQRequest(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_GetRQRequest(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_GetRQRequest(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_GetRQRequest(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_GetRQRequest(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetRQRequest(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_GetRQRequest(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetRQRequest(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_GetRQRequest(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetRQRequest(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_GetRQRequest(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_GetRQRequest(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_GetRQRequest(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_GetRQRequest(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_GetRQResponse(Bin, TrUserData) ->
    dfp_read_field_def_GetRQResponse(Bin, 0, 0,
				     id('$undef', TrUserData),
				     id('$undef', TrUserData),
				     id('$undef', TrUserData), TrUserData).

dfp_read_field_def_GetRQResponse(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_GetRQResponse_response_status(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_GetRQResponse(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_GetRQResponse_rq(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
dfp_read_field_def_GetRQResponse(<<26, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_GetRQResponse_labels(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_GetRQResponse(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{response_status => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{rq => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{labels => F@_3}
    end;
dfp_read_field_def_GetRQResponse(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, TrUserData) ->
    dg_read_field_def_GetRQResponse(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

dg_read_field_def_GetRQResponse(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_GetRQResponse(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
dg_read_field_def_GetRQResponse(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_GetRQResponse_response_status(Rest, 0, 0, F@_1,
						F@_2, F@_3, TrUserData);
      18 ->
	  d_field_GetRQResponse_rq(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
      26 ->
	  d_field_GetRQResponse_labels(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_GetRQResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    1 ->
		skip_64_GetRQResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    2 ->
		skip_length_delimited_GetRQResponse(Rest, 0, 0, F@_1,
						    F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_GetRQResponse(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, TrUserData);
	    5 ->
		skip_32_GetRQResponse(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData)
	  end
    end;
dg_read_field_def_GetRQResponse(<<>>, 0, 0, F@_1, F@_2,
				F@_3, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{response_status => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{rq => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{labels => F@_3}
    end.

d_field_GetRQResponse_response_status(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_GetRQResponse_response_status(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
d_field_GetRQResponse_response_status(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseStatus(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GetRQResponse(RestF, 0, 0,
				     if Prev == '$undef' -> NewFValue;
					true ->
					    merge_msg_ResponseStatus(Prev,
								     NewFValue,
								     TrUserData)
				     end,
				     F@_2, F@_3, TrUserData).

d_field_GetRQResponse_rq(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_GetRQResponse_rq(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
d_field_GetRQResponse_rq(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_RQ(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GetRQResponse(RestF, 0, 0, F@_1,
				     if Prev == '$undef' -> NewFValue;
					true ->
					    merge_msg_RQ(Prev, NewFValue,
							 TrUserData)
				     end,
				     F@_3, TrUserData).

d_field_GetRQResponse_labels(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_GetRQResponse_labels(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_GetRQResponse_labels(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_RQLabels(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_GetRQResponse(RestF, 0, 0, F@_1,
				     F@_2,
				     if Prev == '$undef' -> NewFValue;
					true ->
					    merge_msg_RQLabels(Prev, NewFValue,
							       TrUserData)
				     end,
				     TrUserData).

skip_varint_GetRQResponse(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_GetRQResponse(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
skip_varint_GetRQResponse(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_GetRQResponse(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_length_delimited_GetRQResponse(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_GetRQResponse(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
skip_length_delimited_GetRQResponse(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_GetRQResponse(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, TrUserData).

skip_group_GetRQResponse(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_GetRQResponse(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_32_GetRQResponse(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_GetRQResponse(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_64_GetRQResponse(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_GetRQResponse(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

'decode_msg_MatchEntryRequest.EntryValue'(Bin,
					  TrUserData) ->
    'dfp_read_field_def_MatchEntryRequest.EntryValue'(Bin,
						      0, 0,
						      id('$undef', TrUserData),
						      TrUserData).

'dfp_read_field_def_MatchEntryRequest.EntryValue'(<<10,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_MatchEntryRequest.EntryValue_string'(Rest, Z1,
						  Z2, F@_1, TrUserData);
'dfp_read_field_def_MatchEntryRequest.EntryValue'(<<16,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_MatchEntryRequest.EntryValue_integer'(Rest, Z1,
						   Z2, F@_1, TrUserData);
'dfp_read_field_def_MatchEntryRequest.EntryValue'(<<24,
						    Rest/binary>>,
						  Z1, Z2, F@_1, TrUserData) ->
    'd_field_MatchEntryRequest.EntryValue_boolean'(Rest, Z1,
						   Z2, F@_1, TrUserData);
'dfp_read_field_def_MatchEntryRequest.EntryValue'(<<>>,
						  0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{value => F@_1}
    end;
'dfp_read_field_def_MatchEntryRequest.EntryValue'(Other,
						  Z1, Z2, F@_1, TrUserData) ->
    'dg_read_field_def_MatchEntryRequest.EntryValue'(Other,
						     Z1, Z2, F@_1, TrUserData).

'dg_read_field_def_MatchEntryRequest.EntryValue'(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_MatchEntryRequest.EntryValue'(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     TrUserData);
'dg_read_field_def_MatchEntryRequest.EntryValue'(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_MatchEntryRequest.EntryValue_string'(Rest, 0,
							0, F@_1, TrUserData);
      16 ->
	  'd_field_MatchEntryRequest.EntryValue_integer'(Rest, 0,
							 0, F@_1, TrUserData);
      24 ->
	  'd_field_MatchEntryRequest.EntryValue_boolean'(Rest, 0,
							 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_MatchEntryRequest.EntryValue'(Rest, 0, 0,
							   F@_1, TrUserData);
	    1 ->
		'skip_64_MatchEntryRequest.EntryValue'(Rest, 0, 0, F@_1,
						       TrUserData);
	    2 ->
		'skip_length_delimited_MatchEntryRequest.EntryValue'(Rest,
								     0, 0, F@_1,
								     TrUserData);
	    3 ->
		'skip_group_MatchEntryRequest.EntryValue'(Rest,
							  Key bsr 3, 0, F@_1,
							  TrUserData);
	    5 ->
		'skip_32_MatchEntryRequest.EntryValue'(Rest, 0, 0, F@_1,
						       TrUserData)
	  end
    end;
'dg_read_field_def_MatchEntryRequest.EntryValue'(<<>>,
						 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{value => F@_1}
    end.

'd_field_MatchEntryRequest.EntryValue_string'(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_MatchEntryRequest.EntryValue_string'(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  TrUserData);
'd_field_MatchEntryRequest.EntryValue_string'(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_MatchEntryRequest.EntryValue'(RestF,
						      0, 0,
						      id({string, NewFValue},
							 TrUserData),
						      TrUserData).

'd_field_MatchEntryRequest.EntryValue_integer'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_MatchEntryRequest.EntryValue_integer'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
'd_field_MatchEntryRequest.EntryValue_integer'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    ZValue = X bsl N + Acc,
			    if ZValue band 1 =:= 0 ->
				   id(ZValue bsr 1, TrUserData);
			       true -> id(-(ZValue + 1 bsr 1), TrUserData)
			    end
			  end,
			  Rest},
    'dfp_read_field_def_MatchEntryRequest.EntryValue'(RestF,
						      0, 0,
						      id({integer, NewFValue},
							 TrUserData),
						      TrUserData).

'd_field_MatchEntryRequest.EntryValue_boolean'(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'd_field_MatchEntryRequest.EntryValue_boolean'(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   TrUserData);
'd_field_MatchEntryRequest.EntryValue_boolean'(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    'dfp_read_field_def_MatchEntryRequest.EntryValue'(RestF,
						      0, 0,
						      id({boolean, NewFValue},
							 TrUserData),
						      TrUserData).

'skip_varint_MatchEntryRequest.EntryValue'(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'skip_varint_MatchEntryRequest.EntryValue'(Rest, Z1, Z2,
					       F@_1, TrUserData);
'skip_varint_MatchEntryRequest.EntryValue'(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_MatchEntryRequest.EntryValue'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'skip_length_delimited_MatchEntryRequest.EntryValue'(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    'skip_length_delimited_MatchEntryRequest.EntryValue'(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, TrUserData);
'skip_length_delimited_MatchEntryRequest.EntryValue'(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_MatchEntryRequest.EntryValue'(Rest2,
						      0, 0, F@_1, TrUserData).

'skip_group_MatchEntryRequest.EntryValue'(Bin, FNum, Z2,
					  F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_MatchEntryRequest.EntryValue'(Rest,
						      0, Z2, F@_1, TrUserData).

'skip_32_MatchEntryRequest.EntryValue'(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_MatchEntryRequest.EntryValue'(Rest,
						      Z1, Z2, F@_1, TrUserData).

'skip_64_MatchEntryRequest.EntryValue'(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, TrUserData) ->
    'dfp_read_field_def_MatchEntryRequest.EntryValue'(Rest,
						      Z1, Z2, F@_1, TrUserData).

decode_msg_MatchEntryRequest(Bin, TrUserData) ->
    dfp_read_field_def_MatchEntryRequest(Bin, 0, 0,
					 'tr_decode_init_default_MatchEntryRequest.entry'([],
											  TrUserData),
					 id(0, TrUserData), TrUserData).

dfp_read_field_def_MatchEntryRequest(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchEntryRequest_entry(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
dfp_read_field_def_MatchEntryRequest(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchEntryRequest_timeout(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_MatchEntryRequest(<<>>, 0, 0, R1,
				     F@_2, TrUserData) ->
    #{entry =>
	  'tr_decode_repeated_finalize_MatchEntryRequest.entry'(R1,
								TrUserData),
      timeout => F@_2};
dfp_read_field_def_MatchEntryRequest(Other, Z1, Z2,
				     F@_1, F@_2, TrUserData) ->
    dg_read_field_def_MatchEntryRequest(Other, Z1, Z2, F@_1,
					F@_2, TrUserData).

dg_read_field_def_MatchEntryRequest(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchEntryRequest(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_MatchEntryRequest(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_MatchEntryRequest_entry(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
      16 ->
	  d_field_MatchEntryRequest_timeout(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MatchEntryRequest(Rest, 0, 0, F@_1, F@_2,
					      TrUserData);
	    1 ->
		skip_64_MatchEntryRequest(Rest, 0, 0, F@_1, F@_2,
					  TrUserData);
	    2 ->
		skip_length_delimited_MatchEntryRequest(Rest, 0, 0,
							F@_1, F@_2, TrUserData);
	    3 ->
		skip_group_MatchEntryRequest(Rest, Key bsr 3, 0, F@_1,
					     F@_2, TrUserData);
	    5 ->
		skip_32_MatchEntryRequest(Rest, 0, 0, F@_1, F@_2,
					  TrUserData)
	  end
    end;
dg_read_field_def_MatchEntryRequest(<<>>, 0, 0, R1,
				    F@_2, TrUserData) ->
    #{entry =>
	  'tr_decode_repeated_finalize_MatchEntryRequest.entry'(R1,
								TrUserData),
      timeout => F@_2}.

d_field_MatchEntryRequest_entry(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchEntryRequest_entry(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_MatchEntryRequest_entry(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,MatchEntryRequest.EntryValue>'(Bs,
										     TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MatchEntryRequest(RestF, 0, 0,
					 'tr_decode_repeated_add_elem_MatchEntryRequest.entry'(NewFValue,
											       Prev,
											       TrUserData),
					 F@_2, TrUserData).

d_field_MatchEntryRequest_timeout(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchEntryRequest_timeout(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_MatchEntryRequest_timeout(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_MatchEntryRequest(RestF, 0, 0, F@_1,
					 NewFValue, TrUserData).

skip_varint_MatchEntryRequest(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_MatchEntryRequest(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
skip_varint_MatchEntryRequest(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchEntryRequest(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_length_delimited_MatchEntryRequest(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchEntryRequest(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
skip_length_delimited_MatchEntryRequest(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchEntryRequest(Rest2, 0, 0, F@_1,
					 F@_2, TrUserData).

skip_group_MatchEntryRequest(Bin, FNum, Z2, F@_1, F@_2,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchEntryRequest(Rest, 0, Z2, F@_1,
					 F@_2, TrUserData).

skip_32_MatchEntryRequest(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchEntryRequest(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

skip_64_MatchEntryRequest(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchEntryRequest(Rest, Z1, Z2, F@_1,
					 F@_2, TrUserData).

decode_msg_MatchEntryResponse(Bin, TrUserData) ->
    dfp_read_field_def_MatchEntryResponse(Bin, 0, 0,
					  id('$undef', TrUserData),
					  id([], TrUserData), TrUserData).

dfp_read_field_def_MatchEntryResponse(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchEntryResponse_response_status(Rest, Z1, Z2,
					       F@_1, F@_2, TrUserData);
dfp_read_field_def_MatchEntryResponse(<<18,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_MatchEntryResponse_rqs(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_MatchEntryResponse(<<>>, 0, 0, F@_1,
				      R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{response_status => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{rqs => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_MatchEntryResponse(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    dg_read_field_def_MatchEntryResponse(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

dg_read_field_def_MatchEntryResponse(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_MatchEntryResponse(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_MatchEntryResponse(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_MatchEntryResponse_response_status(Rest, 0, 0,
						     F@_1, F@_2, TrUserData);
      18 ->
	  d_field_MatchEntryResponse_rqs(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_MatchEntryResponse(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		skip_64_MatchEntryResponse(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		skip_length_delimited_MatchEntryResponse(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		skip_group_MatchEntryResponse(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		skip_32_MatchEntryResponse(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
dg_read_field_def_MatchEntryResponse(<<>>, 0, 0, F@_1,
				     R1, TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{response_status => F@_1}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{rqs => lists_reverse(R1, TrUserData)}
    end.

d_field_MatchEntryResponse_response_status(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchEntryResponse_response_status(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
d_field_MatchEntryResponse_response_status(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_ResponseStatus(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MatchEntryResponse(RestF, 0, 0,
					  if Prev == '$undef' -> NewFValue;
					     true ->
						 merge_msg_ResponseStatus(Prev,
									  NewFValue,
									  TrUserData)
					  end,
					  F@_2, TrUserData).

d_field_MatchEntryResponse_rqs(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_MatchEntryResponse_rqs(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_MatchEntryResponse_rqs(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_RQ(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_MatchEntryResponse(RestF, 0, 0, F@_1,
					  cons(NewFValue, Prev, TrUserData),
					  TrUserData).

skip_varint_MatchEntryResponse(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_MatchEntryResponse(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
skip_varint_MatchEntryResponse(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchEntryResponse(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_length_delimited_MatchEntryResponse(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_MatchEntryResponse(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
skip_length_delimited_MatchEntryResponse(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_MatchEntryResponse(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

skip_group_MatchEntryResponse(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_MatchEntryResponse(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

skip_32_MatchEntryResponse(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchEntryResponse(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_64_MatchEntryResponse(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_MatchEntryResponse(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

decode_msg_Request(Bin, TrUserData) ->
    dfp_read_field_def_Request(Bin, 0, 0,
			       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Request(<<10, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Request_status_request(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_Request(<<18, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Request_add_rq_request(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_Request(<<26, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Request_delete_rq_request(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_Request(<<34, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Request_get_rq_request(Rest, Z1, Z2, F@_1,
				   TrUserData);
dfp_read_field_def_Request(<<42, Rest/binary>>, Z1, Z2,
			   F@_1, TrUserData) ->
    d_field_Request_match_entry_request(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_Request(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{msg => F@_1}
    end;
dfp_read_field_def_Request(Other, Z1, Z2, F@_1,
			   TrUserData) ->
    dg_read_field_def_Request(Other, Z1, Z2, F@_1,
			      TrUserData).

dg_read_field_def_Request(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Request(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
dg_read_field_def_Request(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Request_status_request(Rest, 0, 0, F@_1,
					 TrUserData);
      18 ->
	  d_field_Request_add_rq_request(Rest, 0, 0, F@_1,
					 TrUserData);
      26 ->
	  d_field_Request_delete_rq_request(Rest, 0, 0, F@_1,
					    TrUserData);
      34 ->
	  d_field_Request_get_rq_request(Rest, 0, 0, F@_1,
					 TrUserData);
      42 ->
	  d_field_Request_match_entry_request(Rest, 0, 0, F@_1,
					      TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Request(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Request(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Request(Rest, 0, 0, F@_1,
					      TrUserData);
	    3 ->
		skip_group_Request(Rest, Key bsr 3, 0, F@_1,
				   TrUserData);
	    5 -> skip_32_Request(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Request(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{msg => F@_1}
    end.

d_field_Request_status_request(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Request_status_request(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_Request_status_request(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_StatusRequest(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0,
			       case Prev of
				 '$undef' ->
				     id({status_request, NewFValue},
					TrUserData);
				 {status_request, MVPrev} ->
				     id({status_request,
					 merge_msg_StatusRequest(MVPrev,
								 NewFValue,
								 TrUserData)},
					TrUserData);
				 _ ->
				     id({status_request, NewFValue}, TrUserData)
			       end,
			       TrUserData).

d_field_Request_add_rq_request(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Request_add_rq_request(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_Request_add_rq_request(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_AddRQRequest(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0,
			       case Prev of
				 '$undef' ->
				     id({add_rq_request, NewFValue},
					TrUserData);
				 {add_rq_request, MVPrev} ->
				     id({add_rq_request,
					 merge_msg_AddRQRequest(MVPrev,
								NewFValue,
								TrUserData)},
					TrUserData);
				 _ ->
				     id({add_rq_request, NewFValue}, TrUserData)
			       end,
			       TrUserData).

d_field_Request_delete_rq_request(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Request_delete_rq_request(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_Request_delete_rq_request(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_DeleteRQRequest(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0,
			       case Prev of
				 '$undef' ->
				     id({delete_rq_request, NewFValue},
					TrUserData);
				 {delete_rq_request, MVPrev} ->
				     id({delete_rq_request,
					 merge_msg_DeleteRQRequest(MVPrev,
								   NewFValue,
								   TrUserData)},
					TrUserData);
				 _ ->
				     id({delete_rq_request, NewFValue},
					TrUserData)
			       end,
			       TrUserData).

d_field_Request_get_rq_request(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Request_get_rq_request(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
d_field_Request_get_rq_request(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_GetRQRequest(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0,
			       case Prev of
				 '$undef' ->
				     id({get_rq_request, NewFValue},
					TrUserData);
				 {get_rq_request, MVPrev} ->
				     id({get_rq_request,
					 merge_msg_GetRQRequest(MVPrev,
								NewFValue,
								TrUserData)},
					TrUserData);
				 _ ->
				     id({get_rq_request, NewFValue}, TrUserData)
			       end,
			       TrUserData).

d_field_Request_match_entry_request(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Request_match_entry_request(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_Request_match_entry_request(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_MatchEntryRequest(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Request(RestF, 0, 0,
			       case Prev of
				 '$undef' ->
				     id({match_entry_request, NewFValue},
					TrUserData);
				 {match_entry_request, MVPrev} ->
				     id({match_entry_request,
					 merge_msg_MatchEntryRequest(MVPrev,
								     NewFValue,
								     TrUserData)},
					TrUserData);
				 _ ->
				     id({match_entry_request, NewFValue},
					TrUserData)
			       end,
			       TrUserData).

skip_varint_Request(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    skip_varint_Request(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Request(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		    F@_1, TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_length_delimited_Request(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Request(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Request(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Request(Rest2, 0, 0, F@_1,
			       TrUserData).

skip_group_Request(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Request(Rest, 0, Z2, F@_1,
			       TrUserData).

skip_32_Request(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1,
			       TrUserData).

skip_64_Request(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		TrUserData) ->
    dfp_read_field_def_Request(Rest, Z1, Z2, F@_1,
			       TrUserData).

decode_msg_Response(Bin, TrUserData) ->
    dfp_read_field_def_Response(Bin, 0, 0,
				id('$undef', TrUserData), TrUserData).

dfp_read_field_def_Response(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Response_status_response(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_Response(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Response_add_rq_response(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_Response(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Response_delete_rq_response(Rest, Z1, Z2, F@_1,
					TrUserData);
dfp_read_field_def_Response(<<34, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Response_get_rq_response(Rest, Z1, Z2, F@_1,
				     TrUserData);
dfp_read_field_def_Response(<<42, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_Response_match_entry_response(Rest, Z1, Z2,
					  F@_1, TrUserData);
dfp_read_field_def_Response(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{msg => F@_1}
    end;
dfp_read_field_def_Response(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_Response(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_Response(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_Response(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_Response(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_Response_status_response(Rest, 0, 0, F@_1,
					   TrUserData);
      18 ->
	  d_field_Response_add_rq_response(Rest, 0, 0, F@_1,
					   TrUserData);
      26 ->
	  d_field_Response_delete_rq_response(Rest, 0, 0, F@_1,
					      TrUserData);
      34 ->
	  d_field_Response_get_rq_response(Rest, 0, 0, F@_1,
					   TrUserData);
      42 ->
	  d_field_Response_match_entry_response(Rest, 0, 0, F@_1,
						TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_Response(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_Response(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_Response(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_Response(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_Response(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_Response(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{msg => F@_1}
    end.

d_field_Response_status_response(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Response_status_response(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_Response_status_response(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_StatusResponse(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0,
				case Prev of
				  '$undef' ->
				      id({status_response, NewFValue},
					 TrUserData);
				  {status_response, MVPrev} ->
				      id({status_response,
					  merge_msg_StatusResponse(MVPrev,
								   NewFValue,
								   TrUserData)},
					 TrUserData);
				  _ ->
				      id({status_response, NewFValue},
					 TrUserData)
				end,
				TrUserData).

d_field_Response_add_rq_response(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Response_add_rq_response(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_Response_add_rq_response(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_AddRQResponse(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0,
				case Prev of
				  '$undef' ->
				      id({add_rq_response, NewFValue},
					 TrUserData);
				  {add_rq_response, MVPrev} ->
				      id({add_rq_response,
					  merge_msg_AddRQResponse(MVPrev,
								  NewFValue,
								  TrUserData)},
					 TrUserData);
				  _ ->
				      id({add_rq_response, NewFValue},
					 TrUserData)
				end,
				TrUserData).

d_field_Response_delete_rq_response(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Response_delete_rq_response(Rest, N + 7,
					X bsl N + Acc, F@_1, TrUserData);
d_field_Response_delete_rq_response(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_DeleteRQResponse(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0,
				case Prev of
				  '$undef' ->
				      id({delete_rq_response, NewFValue},
					 TrUserData);
				  {delete_rq_response, MVPrev} ->
				      id({delete_rq_response,
					  merge_msg_DeleteRQResponse(MVPrev,
								     NewFValue,
								     TrUserData)},
					 TrUserData);
				  _ ->
				      id({delete_rq_response, NewFValue},
					 TrUserData)
				end,
				TrUserData).

d_field_Response_get_rq_response(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Response_get_rq_response(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
d_field_Response_get_rq_response(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_GetRQResponse(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0,
				case Prev of
				  '$undef' ->
				      id({get_rq_response, NewFValue},
					 TrUserData);
				  {get_rq_response, MVPrev} ->
				      id({get_rq_response,
					  merge_msg_GetRQResponse(MVPrev,
								  NewFValue,
								  TrUserData)},
					 TrUserData);
				  _ ->
				      id({get_rq_response, NewFValue},
					 TrUserData)
				end,
				TrUserData).

d_field_Response_match_entry_response(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_Response_match_entry_response(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
d_field_Response_match_entry_response(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_MatchEntryResponse(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_Response(RestF, 0, 0,
				case Prev of
				  '$undef' ->
				      id({match_entry_response, NewFValue},
					 TrUserData);
				  {match_entry_response, MVPrev} ->
				      id({match_entry_response,
					  merge_msg_MatchEntryResponse(MVPrev,
								       NewFValue,
								       TrUserData)},
					 TrUserData);
				  _ ->
				      id({match_entry_response, NewFValue},
					 TrUserData)
				end,
				TrUserData).

skip_varint_Response(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_Response(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_Response(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_Response(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_Response(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_Response(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_Response(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_Response(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_Response(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_Response(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_Response(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_Response(Rest, Z1, Z2, F@_1,
				TrUserData).

'decode_msg_map<string,MatchEntryRequest.EntryValue>'(Bin,
						      TrUserData) ->
    'dfp_read_field_def_map<string,MatchEntryRequest.EntryValue>'(Bin,
								  0, 0,
								  id([],
								     TrUserData),
								  id('$undef',
								     TrUserData),
								  TrUserData).

'dfp_read_field_def_map<string,MatchEntryRequest.EntryValue>'(<<10,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2,
							      TrUserData) ->
    'd_field_map<string,MatchEntryRequest.EntryValue>_key'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData);
'dfp_read_field_def_map<string,MatchEntryRequest.EntryValue>'(<<18,
								Rest/binary>>,
							      Z1, Z2, F@_1,
							      F@_2,
							      TrUserData) ->
    'd_field_map<string,MatchEntryRequest.EntryValue>_value'(Rest,
							     Z1, Z2, F@_1, F@_2,
							     TrUserData);
'dfp_read_field_def_map<string,MatchEntryRequest.EntryValue>'(<<>>,
							      0, 0, F@_1, F@_2,
							      _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
'dfp_read_field_def_map<string,MatchEntryRequest.EntryValue>'(Other,
							      Z1, Z2, F@_1,
							      F@_2,
							      TrUserData) ->
    'dg_read_field_def_map<string,MatchEntryRequest.EntryValue>'(Other,
								 Z1, Z2, F@_1,
								 F@_2,
								 TrUserData).

'dg_read_field_def_map<string,MatchEntryRequest.EntryValue>'(<<1:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,MatchEntryRequest.EntryValue>'(Rest,
								 N + 7,
								 X bsl N + Acc,
								 F@_1, F@_2,
								 TrUserData);
'dg_read_field_def_map<string,MatchEntryRequest.EntryValue>'(<<0:1,
							       X:7,
							       Rest/binary>>,
							     N, Acc, F@_1, F@_2,
							     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,MatchEntryRequest.EntryValue>_key'(Rest,
								 0, 0, F@_1,
								 F@_2,
								 TrUserData);
      18 ->
	  'd_field_map<string,MatchEntryRequest.EntryValue>_value'(Rest,
								   0, 0, F@_1,
								   F@_2,
								   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,MatchEntryRequest.EntryValue>'(Rest,
								       0, 0,
								       F@_1,
								       F@_2,
								       TrUserData);
	    1 ->
		'skip_64_map<string,MatchEntryRequest.EntryValue>'(Rest,
								   0, 0, F@_1,
								   F@_2,
								   TrUserData);
	    2 ->
		'skip_length_delimited_map<string,MatchEntryRequest.EntryValue>'(Rest,
										 0,
										 0,
										 F@_1,
										 F@_2,
										 TrUserData);
	    3 ->
		'skip_group_map<string,MatchEntryRequest.EntryValue>'(Rest,
								      Key bsr 3,
								      0, F@_1,
								      F@_2,
								      TrUserData);
	    5 ->
		'skip_32_map<string,MatchEntryRequest.EntryValue>'(Rest,
								   0, 0, F@_1,
								   F@_2,
								   TrUserData)
	  end
    end;
'dg_read_field_def_map<string,MatchEntryRequest.EntryValue>'(<<>>,
							     0, 0, F@_1, F@_2,
							     _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

'd_field_map<string,MatchEntryRequest.EntryValue>_key'(<<1:1,
							 X:7, Rest/binary>>,
						       N, Acc, F@_1, F@_2,
						       TrUserData)
    when N < 57 ->
    'd_field_map<string,MatchEntryRequest.EntryValue>_key'(Rest,
							   N + 7, X bsl N + Acc,
							   F@_1, F@_2,
							   TrUserData);
'd_field_map<string,MatchEntryRequest.EntryValue>_key'(<<0:1,
							 X:7, Rest/binary>>,
						       N, Acc, _, F@_2,
						       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Utf8:Len/binary, Rest2/binary>> = Rest,
			   {id(unicode:characters_to_list(Utf8, unicode),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,MatchEntryRequest.EntryValue>'(RestF,
								  0, 0,
								  NewFValue,
								  F@_2,
								  TrUserData).

'd_field_map<string,MatchEntryRequest.EntryValue>_value'(<<1:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, F@_2,
							 TrUserData)
    when N < 57 ->
    'd_field_map<string,MatchEntryRequest.EntryValue>_value'(Rest,
							     N + 7,
							     X bsl N + Acc,
							     F@_1, F@_2,
							     TrUserData);
'd_field_map<string,MatchEntryRequest.EntryValue>_value'(<<0:1,
							   X:7, Rest/binary>>,
							 N, Acc, F@_1, Prev,
							 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_MatchEntryRequest.EntryValue'(Bs,
									 TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,MatchEntryRequest.EntryValue>'(RestF,
								  0, 0, F@_1,
								  if Prev ==
								       '$undef' ->
									 NewFValue;
								     true ->
									 'merge_msg_MatchEntryRequest.EntryValue'(Prev,
														  NewFValue,
														  TrUserData)
								  end,
								  TrUserData).

'skip_varint_map<string,MatchEntryRequest.EntryValue>'(<<1:1,
							 _:7, Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'skip_varint_map<string,MatchEntryRequest.EntryValue>'(Rest,
							   Z1, Z2, F@_1, F@_2,
							   TrUserData);
'skip_varint_map<string,MatchEntryRequest.EntryValue>'(<<0:1,
							 _:7, Rest/binary>>,
						       Z1, Z2, F@_1, F@_2,
						       TrUserData) ->
    'dfp_read_field_def_map<string,MatchEntryRequest.EntryValue>'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData).

'skip_length_delimited_map<string,MatchEntryRequest.EntryValue>'(<<1:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2,
								 TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,MatchEntryRequest.EntryValue>'(Rest,
								     N + 7,
								     X bsl N +
								       Acc,
								     F@_1, F@_2,
								     TrUserData);
'skip_length_delimited_map<string,MatchEntryRequest.EntryValue>'(<<0:1,
								   X:7,
								   Rest/binary>>,
								 N, Acc, F@_1,
								 F@_2,
								 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,MatchEntryRequest.EntryValue>'(Rest2,
								  0, 0, F@_1,
								  F@_2,
								  TrUserData).

'skip_group_map<string,MatchEntryRequest.EntryValue>'(Bin,
						      FNum, Z2, F@_1, F@_2,
						      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,MatchEntryRequest.EntryValue>'(Rest,
								  0, Z2, F@_1,
								  F@_2,
								  TrUserData).

'skip_32_map<string,MatchEntryRequest.EntryValue>'(<<_:32,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    'dfp_read_field_def_map<string,MatchEntryRequest.EntryValue>'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData).

'skip_64_map<string,MatchEntryRequest.EntryValue>'(<<_:64,
						     Rest/binary>>,
						   Z1, Z2, F@_1, F@_2,
						   TrUserData) ->
    'dfp_read_field_def_map<string,MatchEntryRequest.EntryValue>'(Rest,
								  Z1, Z2, F@_1,
								  F@_2,
								  TrUserData).

d_enum_NodeStatus(0) -> 'ONLINE';
d_enum_NodeStatus(1) -> 'OFFLINE';
d_enum_NodeStatus(2) -> 'TEMP_OFFLINE';
d_enum_NodeStatus(3) -> 'UNKNOWN';
d_enum_NodeStatus(V) -> V.

'd_enum_ResponseStatus.Status'(0) -> 'OK';
'd_enum_ResponseStatus.Status'(1) -> 'NOK';
'd_enum_ResponseStatus.Status'(V) -> V.

'd_enum_RQItemTypeOptions.Operator'(0) -> 'NULL';
'd_enum_RQItemTypeOptions.Operator'(1) -> 'GT';
'd_enum_RQItemTypeOptions.Operator'(2) -> 'LT';
'd_enum_RQItemTypeOptions.Operator'(3) -> 'GTE';
'd_enum_RQItemTypeOptions.Operator'(4) -> 'LTE';
'd_enum_RQItemTypeOptions.Operator'(5) -> 'AND';
'd_enum_RQItemTypeOptions.Operator'(6) -> 'NOT';
'd_enum_RQItemTypeOptions.Operator'(7) -> 'COUNT';
'd_enum_RQItemTypeOptions.Operator'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'NodeInfo' -> merge_msg_NodeInfo(Prev, New, TrUserData);
      'ResponseStatus' ->
	  merge_msg_ResponseStatus(Prev, New, TrUserData);
      'StatusRequest' ->
	  merge_msg_StatusRequest(Prev, New, TrUserData);
      'StatusResponse' ->
	  merge_msg_StatusResponse(Prev, New, TrUserData);
      'RQItemTypeOptions' ->
	  merge_msg_RQItemTypeOptions(Prev, New, TrUserData);
      'RQItem' -> merge_msg_RQItem(Prev, New, TrUserData);
      'RQLabel' -> merge_msg_RQLabel(Prev, New, TrUserData);
      'RQ' -> merge_msg_RQ(Prev, New, TrUserData);
      'AddRQRequest' ->
	  merge_msg_AddRQRequest(Prev, New, TrUserData);
      'RQLabels' -> merge_msg_RQLabels(Prev, New, TrUserData);
      'AddRQResponse' ->
	  merge_msg_AddRQResponse(Prev, New, TrUserData);
      'DeleteRQRequest' ->
	  merge_msg_DeleteRQRequest(Prev, New, TrUserData);
      'DeleteRQResponse' ->
	  merge_msg_DeleteRQResponse(Prev, New, TrUserData);
      'GetRQRequest' ->
	  merge_msg_GetRQRequest(Prev, New, TrUserData);
      'GetRQResponse' ->
	  merge_msg_GetRQResponse(Prev, New, TrUserData);
      'MatchEntryRequest.EntryValue' ->
	  'merge_msg_MatchEntryRequest.EntryValue'(Prev, New,
						   TrUserData);
      'MatchEntryRequest' ->
	  merge_msg_MatchEntryRequest(Prev, New, TrUserData);
      'MatchEntryResponse' ->
	  merge_msg_MatchEntryResponse(Prev, New, TrUserData);
      'Request' -> merge_msg_Request(Prev, New, TrUserData);
      'Response' -> merge_msg_Response(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_NodeInfo/3}).
merge_msg_NodeInfo(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S1#{name => NFname};
	   {#{name := PFname}, _} -> S1#{name => PFname};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{node_status := NFnode_status}} ->
	       S2#{node_status => NFnode_status};
	   {#{node_status := PFnode_status}, _} ->
	       S2#{node_status => PFnode_status};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_, #{rq_count := NFrq_count}} ->
	  S3#{rq_count => NFrq_count};
      {#{rq_count := PFrq_count}, _} ->
	  S3#{rq_count => PFrq_count};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_ResponseStatus/3}).
merge_msg_ResponseStatus(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{status := NFstatus}} -> S1#{status => NFstatus};
	   {#{status := PFstatus}, _} -> S1#{status => PFstatus};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{reason := NFreason}} -> S2#{reason => NFreason};
      {#{reason := PFreason}, _} -> S2#{reason => PFreason};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_StatusRequest/3}).
merge_msg_StatusRequest(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_StatusResponse/3}).
merge_msg_StatusResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{node_info := PFnode_info},
	    #{node_info := NFnode_info}} ->
	       S1#{node_info =>
		       'erlang_++'(PFnode_info, NFnode_info, TrUserData)};
	   {_, #{node_info := NFnode_info}} ->
	       S1#{node_info => NFnode_info};
	   {#{node_info := PFnode_info}, _} ->
	       S1#{node_info => PFnode_info};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{response_status := PFresponse_status},
       #{response_status := NFresponse_status}} ->
	  S2#{response_status =>
		  merge_msg_ResponseStatus(PFresponse_status,
					   NFresponse_status, TrUserData)};
      {_, #{response_status := NFresponse_status}} ->
	  S2#{response_status => NFresponse_status};
      {#{response_status := PFresponse_status}, _} ->
	  S2#{response_status => PFresponse_status};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_RQItemTypeOptions/3}).
merge_msg_RQItemTypeOptions(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{operator := NFoperator}} ->
	       S1#{operator => NFoperator};
	   {#{operator := PFoperator}, _} ->
	       S1#{operator => PFoperator};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{count := NFcount}} -> S2#{count => NFcount};
      {#{count := PFcount}, _} -> S2#{count => PFcount};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_RQItem/3}).
merge_msg_RQItem(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S1#{key => NFkey};
	   {#{key := PFkey}, _} -> S1#{key => PFkey};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{value := {rq, OPFvalue}},
	    #{value := {rq, ONFvalue}}} ->
	       S2#{value =>
		       {rq, merge_msg_RQ(OPFvalue, ONFvalue, TrUserData)}};
	   {_, #{value := NFvalue}} -> S2#{value => NFvalue};
	   {#{value := PFvalue}, _} -> S2#{value => PFvalue};
	   {_, _} -> S2
	 end,
    case {PMsg, NMsg} of
      {#{type_options := PFtype_options},
       #{type_options := NFtype_options}} ->
	  S3#{type_options =>
		  merge_msg_RQItemTypeOptions(PFtype_options,
					      NFtype_options, TrUserData)};
      {_, #{type_options := NFtype_options}} ->
	  S3#{type_options => NFtype_options};
      {#{type_options := PFtype_options}, _} ->
	  S3#{type_options => PFtype_options};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_RQLabel/3}).
merge_msg_RQLabel(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S1#{key => NFkey};
	   {#{key := PFkey}, _} -> S1#{key => PFkey};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S2#{value => NFvalue};
      {#{value := PFvalue}, _} -> S2#{value => PFvalue};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_RQ/3}).
merge_msg_RQ(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{rq_items := PFrq_items},
	    #{rq_items := NFrq_items}} ->
	       S1#{rq_items =>
		       'erlang_++'(PFrq_items, NFrq_items, TrUserData)};
	   {_, #{rq_items := NFrq_items}} ->
	       S1#{rq_items => NFrq_items};
	   {#{rq_items := PFrq_items}, _} ->
	       S1#{rq_items => PFrq_items};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{uuid := NFuuid}} -> S2#{uuid => NFuuid};
      {#{uuid := PFuuid}, _} -> S2#{uuid => PFuuid};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_AddRQRequest/3}).
merge_msg_AddRQRequest(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{rq := PFrq}, #{rq := NFrq}} ->
	       S1#{rq => merge_msg_RQ(PFrq, NFrq, TrUserData)};
	   {_, #{rq := NFrq}} -> S1#{rq => NFrq};
	   {#{rq := PFrq}, _} -> S1#{rq => PFrq};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{labels := PFlabels}, #{labels := NFlabels}} ->
	  S2#{labels =>
		  merge_msg_RQLabels(PFlabels, NFlabels, TrUserData)};
      {_, #{labels := NFlabels}} -> S2#{labels => NFlabels};
      {#{labels := PFlabels}, _} -> S2#{labels => PFlabels};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_RQLabels/3}).
merge_msg_RQLabels(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{labels := PFlabels}, #{labels := NFlabels}} ->
	  S1#{labels =>
		  'erlang_++'(PFlabels, NFlabels, TrUserData)};
      {_, #{labels := NFlabels}} -> S1#{labels => NFlabels};
      {#{labels := PFlabels}, _} -> S1#{labels => PFlabels};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_AddRQResponse/3}).
merge_msg_AddRQResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{uuid := NFuuid}} -> S1#{uuid => NFuuid};
	   {#{uuid := PFuuid}, _} -> S1#{uuid => PFuuid};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{response_status := PFresponse_status},
       #{response_status := NFresponse_status}} ->
	  S2#{response_status =>
		  merge_msg_ResponseStatus(PFresponse_status,
					   NFresponse_status, TrUserData)};
      {_, #{response_status := NFresponse_status}} ->
	  S2#{response_status => NFresponse_status};
      {#{response_status := PFresponse_status}, _} ->
	  S2#{response_status => PFresponse_status};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_DeleteRQRequest/3}).
merge_msg_DeleteRQRequest(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{uuid := NFuuid}} -> S1#{uuid => NFuuid};
      {#{uuid := PFuuid}, _} -> S1#{uuid => PFuuid};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_DeleteRQResponse/3}).
merge_msg_DeleteRQResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{response_status := PFresponse_status},
       #{response_status := NFresponse_status}} ->
	  S1#{response_status =>
		  merge_msg_ResponseStatus(PFresponse_status,
					   NFresponse_status, TrUserData)};
      {_, #{response_status := NFresponse_status}} ->
	  S1#{response_status => NFresponse_status};
      {#{response_status := PFresponse_status}, _} ->
	  S1#{response_status => PFresponse_status};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_GetRQRequest/3}).
merge_msg_GetRQRequest(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{field := {labels, OPFfield}},
       #{field := {labels, ONFfield}}} ->
	  S1#{field =>
		  {labels,
		   merge_msg_RQLabels(OPFfield, ONFfield, TrUserData)}};
      {_, #{field := NFfield}} -> S1#{field => NFfield};
      {#{field := PFfield}, _} -> S1#{field => PFfield};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_GetRQResponse/3}).
merge_msg_GetRQResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{response_status := PFresponse_status},
	    #{response_status := NFresponse_status}} ->
	       S1#{response_status =>
		       merge_msg_ResponseStatus(PFresponse_status,
						NFresponse_status, TrUserData)};
	   {_, #{response_status := NFresponse_status}} ->
	       S1#{response_status => NFresponse_status};
	   {#{response_status := PFresponse_status}, _} ->
	       S1#{response_status => PFresponse_status};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{rq := PFrq}, #{rq := NFrq}} ->
	       S2#{rq => merge_msg_RQ(PFrq, NFrq, TrUserData)};
	   {_, #{rq := NFrq}} -> S2#{rq => NFrq};
	   {#{rq := PFrq}, _} -> S2#{rq => PFrq};
	   {_, _} -> S2
	 end,
    case {PMsg, NMsg} of
      {#{labels := PFlabels}, #{labels := NFlabels}} ->
	  S3#{labels =>
		  merge_msg_RQLabels(PFlabels, NFlabels, TrUserData)};
      {_, #{labels := NFlabels}} -> S3#{labels => NFlabels};
      {#{labels := PFlabels}, _} -> S3#{labels => PFlabels};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,'merge_msg_MatchEntryRequest.EntryValue'/3}).
'merge_msg_MatchEntryRequest.EntryValue'(PMsg, NMsg,
					 _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_MatchEntryRequest/3}).
merge_msg_MatchEntryRequest(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{entry := PFentry}, #{entry := NFentry}} ->
	       S1#{entry =>
		       'tr_merge_MatchEntryRequest.entry'(PFentry, NFentry,
							  TrUserData)};
	   {_, #{entry := NFentry}} -> S1#{entry => NFentry};
	   {#{entry := PFentry}, _} -> S1#{entry => PFentry};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{timeout := NFtimeout}} ->
	  S2#{timeout => NFtimeout};
      {#{timeout := PFtimeout}, _} ->
	  S2#{timeout => PFtimeout};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_MatchEntryResponse/3}).
merge_msg_MatchEntryResponse(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{response_status := PFresponse_status},
	    #{response_status := NFresponse_status}} ->
	       S1#{response_status =>
		       merge_msg_ResponseStatus(PFresponse_status,
						NFresponse_status, TrUserData)};
	   {_, #{response_status := NFresponse_status}} ->
	       S1#{response_status => NFresponse_status};
	   {#{response_status := PFresponse_status}, _} ->
	       S1#{response_status => PFresponse_status};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{rqs := PFrqs}, #{rqs := NFrqs}} ->
	  S2#{rqs => 'erlang_++'(PFrqs, NFrqs, TrUserData)};
      {_, #{rqs := NFrqs}} -> S2#{rqs => NFrqs};
      {#{rqs := PFrqs}, _} -> S2#{rqs => PFrqs};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_Request/3}).
merge_msg_Request(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{msg := {status_request, OPFmsg}},
       #{msg := {status_request, ONFmsg}}} ->
	  S1#{msg =>
		  {status_request,
		   merge_msg_StatusRequest(OPFmsg, ONFmsg, TrUserData)}};
      {#{msg := {add_rq_request, OPFmsg}},
       #{msg := {add_rq_request, ONFmsg}}} ->
	  S1#{msg =>
		  {add_rq_request,
		   merge_msg_AddRQRequest(OPFmsg, ONFmsg, TrUserData)}};
      {#{msg := {delete_rq_request, OPFmsg}},
       #{msg := {delete_rq_request, ONFmsg}}} ->
	  S1#{msg =>
		  {delete_rq_request,
		   merge_msg_DeleteRQRequest(OPFmsg, ONFmsg, TrUserData)}};
      {#{msg := {get_rq_request, OPFmsg}},
       #{msg := {get_rq_request, ONFmsg}}} ->
	  S1#{msg =>
		  {get_rq_request,
		   merge_msg_GetRQRequest(OPFmsg, ONFmsg, TrUserData)}};
      {#{msg := {match_entry_request, OPFmsg}},
       #{msg := {match_entry_request, ONFmsg}}} ->
	  S1#{msg =>
		  {match_entry_request,
		   merge_msg_MatchEntryRequest(OPFmsg, ONFmsg,
					       TrUserData)}};
      {_, #{msg := NFmsg}} -> S1#{msg => NFmsg};
      {#{msg := PFmsg}, _} -> S1#{msg => PFmsg};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_Response/3}).
merge_msg_Response(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{msg := {status_response, OPFmsg}},
       #{msg := {status_response, ONFmsg}}} ->
	  S1#{msg =>
		  {status_response,
		   merge_msg_StatusResponse(OPFmsg, ONFmsg, TrUserData)}};
      {#{msg := {add_rq_response, OPFmsg}},
       #{msg := {add_rq_response, ONFmsg}}} ->
	  S1#{msg =>
		  {add_rq_response,
		   merge_msg_AddRQResponse(OPFmsg, ONFmsg, TrUserData)}};
      {#{msg := {delete_rq_response, OPFmsg}},
       #{msg := {delete_rq_response, ONFmsg}}} ->
	  S1#{msg =>
		  {delete_rq_response,
		   merge_msg_DeleteRQResponse(OPFmsg, ONFmsg,
					      TrUserData)}};
      {#{msg := {get_rq_response, OPFmsg}},
       #{msg := {get_rq_response, ONFmsg}}} ->
	  S1#{msg =>
		  {get_rq_response,
		   merge_msg_GetRQResponse(OPFmsg, ONFmsg, TrUserData)}};
      {#{msg := {match_entry_response, OPFmsg}},
       #{msg := {match_entry_response, ONFmsg}}} ->
	  S1#{msg =>
		  {match_entry_response,
		   merge_msg_MatchEntryResponse(OPFmsg, ONFmsg,
						TrUserData)}};
      {_, #{msg := NFmsg}} -> S1#{msg => NFmsg};
      {#{msg := PFmsg}, _} -> S1#{msg => PFmsg};
      {_, _} -> S1
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      'NodeInfo' ->
	  v_msg_NodeInfo(Msg, [MsgName], TrUserData);
      'ResponseStatus' ->
	  v_msg_ResponseStatus(Msg, [MsgName], TrUserData);
      'StatusRequest' ->
	  v_msg_StatusRequest(Msg, [MsgName], TrUserData);
      'StatusResponse' ->
	  v_msg_StatusResponse(Msg, [MsgName], TrUserData);
      'RQItemTypeOptions' ->
	  v_msg_RQItemTypeOptions(Msg, [MsgName], TrUserData);
      'RQItem' -> v_msg_RQItem(Msg, [MsgName], TrUserData);
      'RQLabel' -> v_msg_RQLabel(Msg, [MsgName], TrUserData);
      'RQ' -> v_msg_RQ(Msg, [MsgName], TrUserData);
      'AddRQRequest' ->
	  v_msg_AddRQRequest(Msg, [MsgName], TrUserData);
      'RQLabels' ->
	  v_msg_RQLabels(Msg, [MsgName], TrUserData);
      'AddRQResponse' ->
	  v_msg_AddRQResponse(Msg, [MsgName], TrUserData);
      'DeleteRQRequest' ->
	  v_msg_DeleteRQRequest(Msg, [MsgName], TrUserData);
      'DeleteRQResponse' ->
	  v_msg_DeleteRQResponse(Msg, [MsgName], TrUserData);
      'GetRQRequest' ->
	  v_msg_GetRQRequest(Msg, [MsgName], TrUserData);
      'GetRQResponse' ->
	  v_msg_GetRQResponse(Msg, [MsgName], TrUserData);
      'MatchEntryRequest.EntryValue' ->
	  'v_msg_MatchEntryRequest.EntryValue'(Msg, [MsgName],
					       TrUserData);
      'MatchEntryRequest' ->
	  v_msg_MatchEntryRequest(Msg, [MsgName], TrUserData);
      'MatchEntryResponse' ->
	  v_msg_MatchEntryResponse(Msg, [MsgName], TrUserData);
      'Request' -> v_msg_Request(Msg, [MsgName], TrUserData);
      'Response' ->
	  v_msg_Response(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_NodeInfo/3}).
-dialyzer({nowarn_function,v_msg_NodeInfo/3}).
v_msg_NodeInfo(#{} = M, Path, TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{node_status := F2} ->
	  v_enum_NodeStatus(F2, [node_status | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{rq_count := F3} ->
	  v_type_sint32(F3, [rq_count | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (node_status) -> ok;
		      (rq_count) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_NodeInfo(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'NodeInfo'},
		  M, Path);
v_msg_NodeInfo(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'NodeInfo'}, X, Path).

-compile({nowarn_unused_function,v_msg_ResponseStatus/3}).
-dialyzer({nowarn_function,v_msg_ResponseStatus/3}).
v_msg_ResponseStatus(#{} = M, Path, TrUserData) ->
    case M of
      #{status := F1} ->
	  'v_enum_ResponseStatus.Status'(F1, [status | Path],
					 TrUserData);
      _ -> ok
    end,
    case M of
      #{reason := F2} ->
	  v_type_string(F2, [reason | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (status) -> ok;
		      (reason) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_ResponseStatus(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'ResponseStatus'},
		  M, Path);
v_msg_ResponseStatus(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'ResponseStatus'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_StatusRequest/3}).
-dialyzer({nowarn_function,v_msg_StatusRequest/3}).
v_msg_StatusRequest(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_StatusRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'StatusRequest'},
		  M, Path);
v_msg_StatusRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'StatusRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_StatusResponse/3}).
-dialyzer({nowarn_function,v_msg_StatusResponse/3}).
v_msg_StatusResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{node_info := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_NodeInfo(Elem, [node_info | Path],
				     TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'NodeInfo'}}, F1,
			       [node_info | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{response_status := F2} ->
	  v_msg_ResponseStatus(F2, [response_status | Path],
			       TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (node_info) -> ok;
		      (response_status) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_StatusResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'StatusResponse'},
		  M, Path);
v_msg_StatusResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'StatusResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_RQItemTypeOptions/3}).
-dialyzer({nowarn_function,v_msg_RQItemTypeOptions/3}).
v_msg_RQItemTypeOptions(#{} = M, Path, TrUserData) ->
    case M of
      #{operator := F1} ->
	  'v_enum_RQItemTypeOptions.Operator'(F1,
					      [operator | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{count := F2} ->
	  v_type_int32(F2, [count | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (operator) -> ok;
		      (count) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_RQItemTypeOptions(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'RQItemTypeOptions'},
		  M, Path);
v_msg_RQItemTypeOptions(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RQItemTypeOptions'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_RQItem/3}).
-dialyzer({nowarn_function,v_msg_RQItem/3}).
v_msg_RQItem(#{} = M, Path, TrUserData) ->
    case M of
      #{key := F1} ->
	  v_type_string(F1, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := {integer, OF2}} ->
	  v_type_sint32(OF2, [integer, value | Path], TrUserData);
      #{value := {string, OF2}} ->
	  v_type_string(OF2, [string, value | Path], TrUserData);
      #{value := {rq, OF2}} ->
	  v_msg_RQ(OF2, [rq, value | Path], TrUserData);
      #{value := {boolean, OF2}} ->
	  v_type_bool(OF2, [boolean, value | Path], TrUserData);
      #{value := F2} ->
	  mk_type_error(invalid_oneof, F2, [value | Path]);
      _ -> ok
    end,
    case M of
      #{type_options := F3} ->
	  v_msg_RQItemTypeOptions(F3, [type_options | Path],
				  TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (key) -> ok;
		      (value) -> ok;
		      (type_options) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_RQItem(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'RQItem'},
		  M, Path);
v_msg_RQItem(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RQItem'}, X, Path).

-compile({nowarn_unused_function,v_msg_RQLabel/3}).
-dialyzer({nowarn_function,v_msg_RQLabel/3}).
v_msg_RQLabel(#{} = M, Path, TrUserData) ->
    case M of
      #{key := F1} ->
	  v_type_string(F1, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := F2} ->
	  v_type_string(F2, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (key) -> ok;
		      (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_RQLabel(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'RQLabel'},
		  M, Path);
v_msg_RQLabel(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RQLabel'}, X, Path).

-compile({nowarn_unused_function,v_msg_RQ/3}).
-dialyzer({nowarn_function,v_msg_RQ/3}).
v_msg_RQ(#{} = M, Path, TrUserData) ->
    case M of
      #{rq_items := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_RQItem(Elem, [rq_items | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'RQItem'}}, F1,
			       [rq_items | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{uuid := F2} ->
	  v_type_string(F2, [uuid | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (rq_items) -> ok;
		      (uuid) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_RQ(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'RQ'},
		  M, Path);
v_msg_RQ(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RQ'}, X, Path).

-compile({nowarn_unused_function,v_msg_AddRQRequest/3}).
-dialyzer({nowarn_function,v_msg_AddRQRequest/3}).
v_msg_AddRQRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{rq := F1} -> v_msg_RQ(F1, [rq | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{labels := F2} ->
	  v_msg_RQLabels(F2, [labels | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (rq) -> ok;
		      (labels) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AddRQRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AddRQRequest'},
		  M, Path);
v_msg_AddRQRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddRQRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_RQLabels/3}).
-dialyzer({nowarn_function,v_msg_RQLabels/3}).
v_msg_RQLabels(#{} = M, Path, TrUserData) ->
    case M of
      #{labels := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_RQLabel(Elem, [labels | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'RQLabel'}}, F1,
			       [labels | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (labels) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_RQLabels(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'RQLabels'},
		  M, Path);
v_msg_RQLabels(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'RQLabels'}, X, Path).

-compile({nowarn_unused_function,v_msg_AddRQResponse/3}).
-dialyzer({nowarn_function,v_msg_AddRQResponse/3}).
v_msg_AddRQResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{uuid := F1} ->
	  v_type_string(F1, [uuid | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{response_status := F2} ->
	  v_msg_ResponseStatus(F2, [response_status | Path],
			       TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (uuid) -> ok;
		      (response_status) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_AddRQResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'AddRQResponse'},
		  M, Path);
v_msg_AddRQResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'AddRQResponse'}, X, Path).

-compile({nowarn_unused_function,v_msg_DeleteRQRequest/3}).
-dialyzer({nowarn_function,v_msg_DeleteRQRequest/3}).
v_msg_DeleteRQRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{uuid := F1} ->
	  v_type_string(F1, [uuid | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (uuid) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_DeleteRQRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DeleteRQRequest'},
		  M, Path);
v_msg_DeleteRQRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeleteRQRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_DeleteRQResponse/3}).
-dialyzer({nowarn_function,v_msg_DeleteRQResponse/3}).
v_msg_DeleteRQResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{response_status := F1} ->
	  v_msg_ResponseStatus(F1, [response_status | Path],
			       TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (response_status) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_DeleteRQResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'DeleteRQResponse'},
		  M, Path);
v_msg_DeleteRQResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'DeleteRQResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_GetRQRequest/3}).
-dialyzer({nowarn_function,v_msg_GetRQRequest/3}).
v_msg_GetRQRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{field := {uuid, OF1}} ->
	  v_type_string(OF1, [uuid, field | Path], TrUserData);
      #{field := {labels, OF1}} ->
	  v_msg_RQLabels(OF1, [labels, field | Path], TrUserData);
      #{field := F1} ->
	  mk_type_error(invalid_oneof, F1, [field | Path]);
      _ -> ok
    end,
    lists:foreach(fun (field) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_GetRQRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'GetRQRequest'},
		  M, Path);
v_msg_GetRQRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetRQRequest'}, X, Path).

-compile({nowarn_unused_function,v_msg_GetRQResponse/3}).
-dialyzer({nowarn_function,v_msg_GetRQResponse/3}).
v_msg_GetRQResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{response_status := F1} ->
	  v_msg_ResponseStatus(F1, [response_status | Path],
			       TrUserData);
      _ -> ok
    end,
    case M of
      #{rq := F2} -> v_msg_RQ(F2, [rq | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{labels := F3} ->
	  v_msg_RQLabels(F3, [labels | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (response_status) -> ok;
		      (rq) -> ok;
		      (labels) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_GetRQResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'GetRQResponse'},
		  M, Path);
v_msg_GetRQResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'GetRQResponse'}, X, Path).

-compile({nowarn_unused_function,'v_msg_MatchEntryRequest.EntryValue'/3}).
-dialyzer({nowarn_function,'v_msg_MatchEntryRequest.EntryValue'/3}).
'v_msg_MatchEntryRequest.EntryValue'(#{} = M, Path,
				     TrUserData) ->
    case M of
      #{value := {string, OF1}} ->
	  v_type_string(OF1, [string, value | Path], TrUserData);
      #{value := {integer, OF1}} ->
	  v_type_sint32(OF1, [integer, value | Path], TrUserData);
      #{value := {boolean, OF1}} ->
	  v_type_bool(OF1, [boolean, value | Path], TrUserData);
      #{value := F1} ->
	  mk_type_error(invalid_oneof, F1, [value | Path]);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
'v_msg_MatchEntryRequest.EntryValue'(M, Path,
				     _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'MatchEntryRequest.EntryValue'},
		  M, Path);
'v_msg_MatchEntryRequest.EntryValue'(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   'MatchEntryRequest.EntryValue'},
		  X, Path).

-compile({nowarn_unused_function,v_msg_MatchEntryRequest/3}).
-dialyzer({nowarn_function,v_msg_MatchEntryRequest/3}).
v_msg_MatchEntryRequest(#{} = M, Path, TrUserData) ->
    case M of
      #{entry := F1} ->
	  'v_map<string,MatchEntryRequest.EntryValue>'(F1,
						       [entry | Path],
						       TrUserData);
      _ -> ok
    end,
    case M of
      #{timeout := F2} ->
	  v_type_int32(F2, [timeout | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (entry) -> ok;
		      (timeout) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_MatchEntryRequest(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'MatchEntryRequest'},
		  M, Path);
v_msg_MatchEntryRequest(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchEntryRequest'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_MatchEntryResponse/3}).
-dialyzer({nowarn_function,v_msg_MatchEntryResponse/3}).
v_msg_MatchEntryResponse(#{} = M, Path, TrUserData) ->
    case M of
      #{response_status := F1} ->
	  v_msg_ResponseStatus(F1, [response_status | Path],
			       TrUserData);
      _ -> ok
    end,
    case M of
      #{rqs := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_RQ(Elem, [rqs | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, 'RQ'}}, F2,
			       [rqs | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (response_status) -> ok;
		      (rqs) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_MatchEntryResponse(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'MatchEntryResponse'},
		  M, Path);
v_msg_MatchEntryResponse(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'MatchEntryResponse'}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_Request/3}).
-dialyzer({nowarn_function,v_msg_Request/3}).
v_msg_Request(#{} = M, Path, TrUserData) ->
    case M of
      #{msg := {status_request, OF1}} ->
	  v_msg_StatusRequest(OF1, [status_request, msg | Path],
			      TrUserData);
      #{msg := {add_rq_request, OF1}} ->
	  v_msg_AddRQRequest(OF1, [add_rq_request, msg | Path],
			     TrUserData);
      #{msg := {delete_rq_request, OF1}} ->
	  v_msg_DeleteRQRequest(OF1,
				[delete_rq_request, msg | Path], TrUserData);
      #{msg := {get_rq_request, OF1}} ->
	  v_msg_GetRQRequest(OF1, [get_rq_request, msg | Path],
			     TrUserData);
      #{msg := {match_entry_request, OF1}} ->
	  v_msg_MatchEntryRequest(OF1,
				  [match_entry_request, msg | Path],
				  TrUserData);
      #{msg := F1} ->
	  mk_type_error(invalid_oneof, F1, [msg | Path]);
      _ -> ok
    end,
    lists:foreach(fun (msg) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Request(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Request'},
		  M, Path);
v_msg_Request(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Request'}, X, Path).

-compile({nowarn_unused_function,v_msg_Response/3}).
-dialyzer({nowarn_function,v_msg_Response/3}).
v_msg_Response(#{} = M, Path, TrUserData) ->
    case M of
      #{msg := {status_response, OF1}} ->
	  v_msg_StatusResponse(OF1, [status_response, msg | Path],
			       TrUserData);
      #{msg := {add_rq_response, OF1}} ->
	  v_msg_AddRQResponse(OF1, [add_rq_response, msg | Path],
			      TrUserData);
      #{msg := {delete_rq_response, OF1}} ->
	  v_msg_DeleteRQResponse(OF1,
				 [delete_rq_response, msg | Path], TrUserData);
      #{msg := {get_rq_response, OF1}} ->
	  v_msg_GetRQResponse(OF1, [get_rq_response, msg | Path],
			      TrUserData);
      #{msg := {match_entry_response, OF1}} ->
	  v_msg_MatchEntryResponse(OF1,
				   [match_entry_response, msg | Path],
				   TrUserData);
      #{msg := F1} ->
	  mk_type_error(invalid_oneof, F1, [msg | Path]);
      _ -> ok
    end,
    lists:foreach(fun (msg) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_Response(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   'Response'},
		  M, Path);
v_msg_Response(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, 'Response'}, X, Path).

-compile({nowarn_unused_function,v_enum_NodeStatus/3}).
-dialyzer({nowarn_function,v_enum_NodeStatus/3}).
v_enum_NodeStatus('ONLINE', _Path, _TrUserData) -> ok;
v_enum_NodeStatus('OFFLINE', _Path, _TrUserData) -> ok;
v_enum_NodeStatus('TEMP_OFFLINE', _Path, _TrUserData) ->
    ok;
v_enum_NodeStatus('UNKNOWN', _Path, _TrUserData) -> ok;
v_enum_NodeStatus(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_NodeStatus(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'NodeStatus'}, X, Path).

-compile({nowarn_unused_function,'v_enum_ResponseStatus.Status'/3}).
-dialyzer({nowarn_function,'v_enum_ResponseStatus.Status'/3}).
'v_enum_ResponseStatus.Status'('OK', _Path,
			       _TrUserData) ->
    ok;
'v_enum_ResponseStatus.Status'('NOK', _Path,
			       _TrUserData) ->
    ok;
'v_enum_ResponseStatus.Status'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_ResponseStatus.Status'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'ResponseStatus.Status'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_RQItemTypeOptions.Operator'/3}).
-dialyzer({nowarn_function,'v_enum_RQItemTypeOptions.Operator'/3}).
'v_enum_RQItemTypeOptions.Operator'('NULL', _Path,
				    _TrUserData) ->
    ok;
'v_enum_RQItemTypeOptions.Operator'('GT', _Path,
				    _TrUserData) ->
    ok;
'v_enum_RQItemTypeOptions.Operator'('LT', _Path,
				    _TrUserData) ->
    ok;
'v_enum_RQItemTypeOptions.Operator'('GTE', _Path,
				    _TrUserData) ->
    ok;
'v_enum_RQItemTypeOptions.Operator'('LTE', _Path,
				    _TrUserData) ->
    ok;
'v_enum_RQItemTypeOptions.Operator'('AND', _Path,
				    _TrUserData) ->
    ok;
'v_enum_RQItemTypeOptions.Operator'('NOT', _Path,
				    _TrUserData) ->
    ok;
'v_enum_RQItemTypeOptions.Operator'('COUNT', _Path,
				    _TrUserData) ->
    ok;
'v_enum_RQItemTypeOptions.Operator'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_RQItemTypeOptions.Operator'(X, Path,
				    _TrUserData) ->
    mk_type_error({invalid_enum,
		   'RQItemTypeOptions.Operator'},
		  X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,'v_map<string,MatchEntryRequest.EntryValue>'/3}).
-dialyzer({nowarn_function,'v_map<string,MatchEntryRequest.EntryValue>'/3}).
'v_map<string,MatchEntryRequest.EntryValue>'(M, Path,
					     TrUserData)
    when is_map(M) ->
    [begin
       v_type_string(Key, [key | Path], TrUserData),
       'v_msg_MatchEntryRequest.EntryValue'(Value,
					    [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<string,MatchEntryRequest.EntryValue>'(X, Path,
					     _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_decode_init_default_MatchEntryRequest.entry'/2}).
'tr_decode_init_default_MatchEntryRequest.entry'(_,
						 _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_MatchEntryRequest.entry'/3}).
'tr_merge_MatchEntryRequest.entry'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_MatchEntryRequest.entry'/2}).
'tr_decode_repeated_finalize_MatchEntryRequest.entry'(L,
						      TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_MatchEntryRequest.entry'/2}).
'tr_encode_MatchEntryRequest.entry'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_MatchEntryRequest.entry'/3}).
'tr_decode_repeated_add_elem_MatchEntryRequest.entry'(Elem,
						      L, _) ->
    mt_add_item_m_verify_value(Elem, L).

-compile({inline,'tr_encode_MatchEntryRequest.entry[x]'/2}).
'tr_encode_MatchEntryRequest.entry[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m_verify_value/2}).
mt_add_item_m_verify_value(#{key := K, value := V},
			   M) ->
    if V =:= '$undef' -> error({gpb_error, missing_value});
       true -> M#{K => V}
    end.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).




get_msg_defs() ->
    [{{enum, 'NodeStatus'},
      [{'ONLINE', 0}, {'OFFLINE', 1}, {'TEMP_OFFLINE', 2},
       {'UNKNOWN', 3}]},
     {{enum, 'ResponseStatus.Status'},
      [{'OK', 0}, {'NOK', 1}]},
     {{enum, 'RQItemTypeOptions.Operator'},
      [{'NULL', 0}, {'GT', 1}, {'LT', 2}, {'GTE', 3},
       {'LTE', 4}, {'AND', 5}, {'NOT', 6}, {'COUNT', 7}]},
     {{msg, 'NodeInfo'},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => node_status, fnum => 2, rnum => 3,
	 type => {enum, 'NodeStatus'}, occurrence => optional,
	 opts => []},
       #{name => rq_count, fnum => 3, rnum => 4,
	 type => sint32, occurrence => optional, opts => []}]},
     {{msg, 'ResponseStatus'},
      [#{name => status, fnum => 1, rnum => 2,
	 type => {enum, 'ResponseStatus.Status'},
	 occurrence => optional, opts => []},
       #{name => reason, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'StatusRequest'}, []},
     {{msg, 'StatusResponse'},
      [#{name => node_info, fnum => 1, rnum => 2,
	 type => {msg, 'NodeInfo'}, occurrence => repeated,
	 opts => []},
       #{name => response_status, fnum => 2, rnum => 3,
	 type => {msg, 'ResponseStatus'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'RQItemTypeOptions'},
      [#{name => operator, fnum => 1, rnum => 2,
	 type => {enum, 'RQItemTypeOptions.Operator'},
	 occurrence => optional, opts => []},
       #{name => count, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []}]},
     {{msg, 'RQItem'},
      [#{name => key, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => value, rnum => 3,
	 fields =>
	     [#{name => integer, fnum => 2, rnum => 3,
		type => sint32, occurrence => optional, opts => []},
	      #{name => string, fnum => 3, rnum => 3, type => string,
		occurrence => optional, opts => []},
	      #{name => rq, fnum => 4, rnum => 3, type => {msg, 'RQ'},
		occurrence => optional, opts => []},
	      #{name => boolean, fnum => 5, rnum => 3, type => bool,
		occurrence => optional, opts => []}]},
       #{name => type_options, fnum => 6, rnum => 4,
	 type => {msg, 'RQItemTypeOptions'},
	 occurrence => optional, opts => []}]},
     {{msg, 'RQLabel'},
      [#{name => key, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => value, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'RQ'},
      [#{name => rq_items, fnum => 1, rnum => 2,
	 type => {msg, 'RQItem'}, occurrence => repeated,
	 opts => []},
       #{name => uuid, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'AddRQRequest'},
      [#{name => rq, fnum => 1, rnum => 2,
	 type => {msg, 'RQ'}, occurrence => optional,
	 opts => []},
       #{name => labels, fnum => 2, rnum => 3,
	 type => {msg, 'RQLabels'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'RQLabels'},
      [#{name => labels, fnum => 1, rnum => 2,
	 type => {msg, 'RQLabel'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'AddRQResponse'},
      [#{name => uuid, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => response_status, fnum => 4, rnum => 3,
	 type => {msg, 'ResponseStatus'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'DeleteRQRequest'},
      [#{name => uuid, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, 'DeleteRQResponse'},
      [#{name => response_status, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseStatus'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'GetRQRequest'},
      [#{name => field, rnum => 2,
	 fields =>
	     [#{name => uuid, fnum => 1, rnum => 2, type => string,
		occurrence => optional, opts => []},
	      #{name => labels, fnum => 2, rnum => 2,
		type => {msg, 'RQLabels'}, occurrence => optional,
		opts => []}]}]},
     {{msg, 'GetRQResponse'},
      [#{name => response_status, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseStatus'}, occurrence => optional,
	 opts => []},
       #{name => rq, fnum => 2, rnum => 3, type => {msg, 'RQ'},
	 occurrence => optional, opts => []},
       #{name => labels, fnum => 3, rnum => 4,
	 type => {msg, 'RQLabels'}, occurrence => optional,
	 opts => []}]},
     {{msg, 'MatchEntryRequest.EntryValue'},
      [#{name => value, rnum => 2,
	 fields =>
	     [#{name => string, fnum => 1, rnum => 2, type => string,
		occurrence => optional, opts => []},
	      #{name => integer, fnum => 2, rnum => 2, type => sint32,
		occurrence => optional, opts => []},
	      #{name => boolean, fnum => 3, rnum => 2, type => bool,
		occurrence => optional, opts => []}]}]},
     {{msg, 'MatchEntryRequest'},
      [#{name => entry, fnum => 1, rnum => 2,
	 type =>
	     {map, string, {msg, 'MatchEntryRequest.EntryValue'}},
	 occurrence => repeated, opts => []},
       #{name => timeout, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []}]},
     {{msg, 'MatchEntryResponse'},
      [#{name => response_status, fnum => 1, rnum => 2,
	 type => {msg, 'ResponseStatus'}, occurrence => optional,
	 opts => []},
       #{name => rqs, fnum => 2, rnum => 3,
	 type => {msg, 'RQ'}, occurrence => repeated,
	 opts => []}]},
     {{msg, 'Request'},
      [#{name => msg, rnum => 2,
	 fields =>
	     [#{name => status_request, fnum => 1, rnum => 2,
		type => {msg, 'StatusRequest'}, occurrence => optional,
		opts => []},
	      #{name => add_rq_request, fnum => 2, rnum => 2,
		type => {msg, 'AddRQRequest'}, occurrence => optional,
		opts => []},
	      #{name => delete_rq_request, fnum => 3, rnum => 2,
		type => {msg, 'DeleteRQRequest'},
		occurrence => optional, opts => []},
	      #{name => get_rq_request, fnum => 4, rnum => 2,
		type => {msg, 'GetRQRequest'}, occurrence => optional,
		opts => []},
	      #{name => match_entry_request, fnum => 5, rnum => 2,
		type => {msg, 'MatchEntryRequest'},
		occurrence => optional, opts => []}]}]},
     {{msg, 'Response'},
      [#{name => msg, rnum => 2,
	 fields =>
	     [#{name => status_response, fnum => 1, rnum => 2,
		type => {msg, 'StatusResponse'}, occurrence => optional,
		opts => []},
	      #{name => add_rq_response, fnum => 2, rnum => 2,
		type => {msg, 'AddRQResponse'}, occurrence => optional,
		opts => []},
	      #{name => delete_rq_response, fnum => 3, rnum => 2,
		type => {msg, 'DeleteRQResponse'},
		occurrence => optional, opts => []},
	      #{name => get_rq_response, fnum => 4, rnum => 2,
		type => {msg, 'GetRQResponse'}, occurrence => optional,
		opts => []},
	      #{name => match_entry_response, fnum => 5, rnum => 2,
		type => {msg, 'MatchEntryResponse'},
		occurrence => optional, opts => []}]}]}].


get_msg_names() ->
    ['NodeInfo', 'ResponseStatus', 'StatusRequest',
     'StatusResponse', 'RQItemTypeOptions', 'RQItem',
     'RQLabel', 'RQ', 'AddRQRequest', 'RQLabels',
     'AddRQResponse', 'DeleteRQRequest', 'DeleteRQResponse',
     'GetRQRequest', 'GetRQResponse',
     'MatchEntryRequest.EntryValue', 'MatchEntryRequest',
     'MatchEntryResponse', 'Request', 'Response'].


get_group_names() -> [].


get_msg_or_group_names() ->
    ['NodeInfo', 'ResponseStatus', 'StatusRequest',
     'StatusResponse', 'RQItemTypeOptions', 'RQItem',
     'RQLabel', 'RQ', 'AddRQRequest', 'RQLabels',
     'AddRQResponse', 'DeleteRQRequest', 'DeleteRQResponse',
     'GetRQRequest', 'GetRQResponse',
     'MatchEntryRequest.EntryValue', 'MatchEntryRequest',
     'MatchEntryResponse', 'Request', 'Response'].


get_enum_names() ->
    ['NodeStatus', 'ResponseStatus.Status',
     'RQItemTypeOptions.Operator'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def('NodeInfo') ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => node_status, fnum => 2, rnum => 3,
       type => {enum, 'NodeStatus'}, occurrence => optional,
       opts => []},
     #{name => rq_count, fnum => 3, rnum => 4,
       type => sint32, occurrence => optional, opts => []}];
find_msg_def('ResponseStatus') ->
    [#{name => status, fnum => 1, rnum => 2,
       type => {enum, 'ResponseStatus.Status'},
       occurrence => optional, opts => []},
     #{name => reason, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def('StatusRequest') -> [];
find_msg_def('StatusResponse') ->
    [#{name => node_info, fnum => 1, rnum => 2,
       type => {msg, 'NodeInfo'}, occurrence => repeated,
       opts => []},
     #{name => response_status, fnum => 2, rnum => 3,
       type => {msg, 'ResponseStatus'}, occurrence => optional,
       opts => []}];
find_msg_def('RQItemTypeOptions') ->
    [#{name => operator, fnum => 1, rnum => 2,
       type => {enum, 'RQItemTypeOptions.Operator'},
       occurrence => optional, opts => []},
     #{name => count, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []}];
find_msg_def('RQItem') ->
    [#{name => key, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => value, rnum => 3,
       fields =>
	   [#{name => integer, fnum => 2, rnum => 3,
	      type => sint32, occurrence => optional, opts => []},
	    #{name => string, fnum => 3, rnum => 3, type => string,
	      occurrence => optional, opts => []},
	    #{name => rq, fnum => 4, rnum => 3, type => {msg, 'RQ'},
	      occurrence => optional, opts => []},
	    #{name => boolean, fnum => 5, rnum => 3, type => bool,
	      occurrence => optional, opts => []}]},
     #{name => type_options, fnum => 6, rnum => 4,
       type => {msg, 'RQItemTypeOptions'},
       occurrence => optional, opts => []}];
find_msg_def('RQLabel') ->
    [#{name => key, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => value, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def('RQ') ->
    [#{name => rq_items, fnum => 1, rnum => 2,
       type => {msg, 'RQItem'}, occurrence => repeated,
       opts => []},
     #{name => uuid, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def('AddRQRequest') ->
    [#{name => rq, fnum => 1, rnum => 2,
       type => {msg, 'RQ'}, occurrence => optional,
       opts => []},
     #{name => labels, fnum => 2, rnum => 3,
       type => {msg, 'RQLabels'}, occurrence => optional,
       opts => []}];
find_msg_def('RQLabels') ->
    [#{name => labels, fnum => 1, rnum => 2,
       type => {msg, 'RQLabel'}, occurrence => repeated,
       opts => []}];
find_msg_def('AddRQResponse') ->
    [#{name => uuid, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => response_status, fnum => 4, rnum => 3,
       type => {msg, 'ResponseStatus'}, occurrence => optional,
       opts => []}];
find_msg_def('DeleteRQRequest') ->
    [#{name => uuid, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def('DeleteRQResponse') ->
    [#{name => response_status, fnum => 1, rnum => 2,
       type => {msg, 'ResponseStatus'}, occurrence => optional,
       opts => []}];
find_msg_def('GetRQRequest') ->
    [#{name => field, rnum => 2,
       fields =>
	   [#{name => uuid, fnum => 1, rnum => 2, type => string,
	      occurrence => optional, opts => []},
	    #{name => labels, fnum => 2, rnum => 2,
	      type => {msg, 'RQLabels'}, occurrence => optional,
	      opts => []}]}];
find_msg_def('GetRQResponse') ->
    [#{name => response_status, fnum => 1, rnum => 2,
       type => {msg, 'ResponseStatus'}, occurrence => optional,
       opts => []},
     #{name => rq, fnum => 2, rnum => 3, type => {msg, 'RQ'},
       occurrence => optional, opts => []},
     #{name => labels, fnum => 3, rnum => 4,
       type => {msg, 'RQLabels'}, occurrence => optional,
       opts => []}];
find_msg_def('MatchEntryRequest.EntryValue') ->
    [#{name => value, rnum => 2,
       fields =>
	   [#{name => string, fnum => 1, rnum => 2, type => string,
	      occurrence => optional, opts => []},
	    #{name => integer, fnum => 2, rnum => 2, type => sint32,
	      occurrence => optional, opts => []},
	    #{name => boolean, fnum => 3, rnum => 2, type => bool,
	      occurrence => optional, opts => []}]}];
find_msg_def('MatchEntryRequest') ->
    [#{name => entry, fnum => 1, rnum => 2,
       type =>
	   {map, string, {msg, 'MatchEntryRequest.EntryValue'}},
       occurrence => repeated, opts => []},
     #{name => timeout, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []}];
find_msg_def('MatchEntryResponse') ->
    [#{name => response_status, fnum => 1, rnum => 2,
       type => {msg, 'ResponseStatus'}, occurrence => optional,
       opts => []},
     #{name => rqs, fnum => 2, rnum => 3,
       type => {msg, 'RQ'}, occurrence => repeated,
       opts => []}];
find_msg_def('Request') ->
    [#{name => msg, rnum => 2,
       fields =>
	   [#{name => status_request, fnum => 1, rnum => 2,
	      type => {msg, 'StatusRequest'}, occurrence => optional,
	      opts => []},
	    #{name => add_rq_request, fnum => 2, rnum => 2,
	      type => {msg, 'AddRQRequest'}, occurrence => optional,
	      opts => []},
	    #{name => delete_rq_request, fnum => 3, rnum => 2,
	      type => {msg, 'DeleteRQRequest'},
	      occurrence => optional, opts => []},
	    #{name => get_rq_request, fnum => 4, rnum => 2,
	      type => {msg, 'GetRQRequest'}, occurrence => optional,
	      opts => []},
	    #{name => match_entry_request, fnum => 5, rnum => 2,
	      type => {msg, 'MatchEntryRequest'},
	      occurrence => optional, opts => []}]}];
find_msg_def('Response') ->
    [#{name => msg, rnum => 2,
       fields =>
	   [#{name => status_response, fnum => 1, rnum => 2,
	      type => {msg, 'StatusResponse'}, occurrence => optional,
	      opts => []},
	    #{name => add_rq_response, fnum => 2, rnum => 2,
	      type => {msg, 'AddRQResponse'}, occurrence => optional,
	      opts => []},
	    #{name => delete_rq_response, fnum => 3, rnum => 2,
	      type => {msg, 'DeleteRQResponse'},
	      occurrence => optional, opts => []},
	    #{name => get_rq_response, fnum => 4, rnum => 2,
	      type => {msg, 'GetRQResponse'}, occurrence => optional,
	      opts => []},
	    #{name => match_entry_response, fnum => 5, rnum => 2,
	      type => {msg, 'MatchEntryResponse'},
	      occurrence => optional, opts => []}]}];
find_msg_def(_) -> error.


find_enum_def('NodeStatus') ->
    [{'ONLINE', 0}, {'OFFLINE', 1}, {'TEMP_OFFLINE', 2},
     {'UNKNOWN', 3}];
find_enum_def('ResponseStatus.Status') ->
    [{'OK', 0}, {'NOK', 1}];
find_enum_def('RQItemTypeOptions.Operator') ->
    [{'NULL', 0}, {'GT', 1}, {'LT', 2}, {'GTE', 3},
     {'LTE', 4}, {'AND', 5}, {'NOT', 6}, {'COUNT', 7}];
find_enum_def(_) -> error.


enum_symbol_by_value('NodeStatus', Value) ->
    enum_symbol_by_value_NodeStatus(Value);
enum_symbol_by_value('ResponseStatus.Status', Value) ->
    'enum_symbol_by_value_ResponseStatus.Status'(Value);
enum_symbol_by_value('RQItemTypeOptions.Operator',
		     Value) ->
    'enum_symbol_by_value_RQItemTypeOptions.Operator'(Value).


enum_value_by_symbol('NodeStatus', Sym) ->
    enum_value_by_symbol_NodeStatus(Sym);
enum_value_by_symbol('ResponseStatus.Status', Sym) ->
    'enum_value_by_symbol_ResponseStatus.Status'(Sym);
enum_value_by_symbol('RQItemTypeOptions.Operator',
		     Sym) ->
    'enum_value_by_symbol_RQItemTypeOptions.Operator'(Sym).


enum_symbol_by_value_NodeStatus(0) -> 'ONLINE';
enum_symbol_by_value_NodeStatus(1) -> 'OFFLINE';
enum_symbol_by_value_NodeStatus(2) -> 'TEMP_OFFLINE';
enum_symbol_by_value_NodeStatus(3) -> 'UNKNOWN'.


enum_value_by_symbol_NodeStatus('ONLINE') -> 0;
enum_value_by_symbol_NodeStatus('OFFLINE') -> 1;
enum_value_by_symbol_NodeStatus('TEMP_OFFLINE') -> 2;
enum_value_by_symbol_NodeStatus('UNKNOWN') -> 3.

'enum_symbol_by_value_ResponseStatus.Status'(0) -> 'OK';
'enum_symbol_by_value_ResponseStatus.Status'(1) ->
    'NOK'.


'enum_value_by_symbol_ResponseStatus.Status'('OK') -> 0;
'enum_value_by_symbol_ResponseStatus.Status'('NOK') ->
    1.

'enum_symbol_by_value_RQItemTypeOptions.Operator'(0) ->
    'NULL';
'enum_symbol_by_value_RQItemTypeOptions.Operator'(1) ->
    'GT';
'enum_symbol_by_value_RQItemTypeOptions.Operator'(2) ->
    'LT';
'enum_symbol_by_value_RQItemTypeOptions.Operator'(3) ->
    'GTE';
'enum_symbol_by_value_RQItemTypeOptions.Operator'(4) ->
    'LTE';
'enum_symbol_by_value_RQItemTypeOptions.Operator'(5) ->
    'AND';
'enum_symbol_by_value_RQItemTypeOptions.Operator'(6) ->
    'NOT';
'enum_symbol_by_value_RQItemTypeOptions.Operator'(7) ->
    'COUNT'.


'enum_value_by_symbol_RQItemTypeOptions.Operator'('NULL') ->
    0;
'enum_value_by_symbol_RQItemTypeOptions.Operator'('GT') ->
    1;
'enum_value_by_symbol_RQItemTypeOptions.Operator'('LT') ->
    2;
'enum_value_by_symbol_RQItemTypeOptions.Operator'('GTE') ->
    3;
'enum_value_by_symbol_RQItemTypeOptions.Operator'('LTE') ->
    4;
'enum_value_by_symbol_RQItemTypeOptions.Operator'('AND') ->
    5;
'enum_value_by_symbol_RQItemTypeOptions.Operator'('NOT') ->
    6;
'enum_value_by_symbol_RQItemTypeOptions.Operator'('COUNT') ->
    7.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"NodeInfo">>) -> 'NodeInfo';
fqbin_to_msg_name(<<"ResponseStatus">>) -> 'ResponseStatus';
fqbin_to_msg_name(<<"StatusRequest">>) -> 'StatusRequest';
fqbin_to_msg_name(<<"StatusResponse">>) -> 'StatusResponse';
fqbin_to_msg_name(<<"RQItemTypeOptions">>) -> 'RQItemTypeOptions';
fqbin_to_msg_name(<<"RQItem">>) -> 'RQItem';
fqbin_to_msg_name(<<"RQLabel">>) -> 'RQLabel';
fqbin_to_msg_name(<<"RQ">>) -> 'RQ';
fqbin_to_msg_name(<<"AddRQRequest">>) -> 'AddRQRequest';
fqbin_to_msg_name(<<"RQLabels">>) -> 'RQLabels';
fqbin_to_msg_name(<<"AddRQResponse">>) -> 'AddRQResponse';
fqbin_to_msg_name(<<"DeleteRQRequest">>) -> 'DeleteRQRequest';
fqbin_to_msg_name(<<"DeleteRQResponse">>) -> 'DeleteRQResponse';
fqbin_to_msg_name(<<"GetRQRequest">>) -> 'GetRQRequest';
fqbin_to_msg_name(<<"GetRQResponse">>) -> 'GetRQResponse';
fqbin_to_msg_name(<<"MatchEntryRequest.EntryValue">>) ->
    'MatchEntryRequest.EntryValue';
fqbin_to_msg_name(<<"MatchEntryRequest">>) -> 'MatchEntryRequest';
fqbin_to_msg_name(<<"MatchEntryResponse">>) -> 'MatchEntryResponse';
fqbin_to_msg_name(<<"Request">>) -> 'Request';
fqbin_to_msg_name(<<"Response">>) -> 'Response';
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin('NodeInfo') -> <<"NodeInfo">>;
msg_name_to_fqbin('ResponseStatus') -> <<"ResponseStatus">>;
msg_name_to_fqbin('StatusRequest') -> <<"StatusRequest">>;
msg_name_to_fqbin('StatusResponse') -> <<"StatusResponse">>;
msg_name_to_fqbin('RQItemTypeOptions') -> <<"RQItemTypeOptions">>;
msg_name_to_fqbin('RQItem') -> <<"RQItem">>;
msg_name_to_fqbin('RQLabel') -> <<"RQLabel">>;
msg_name_to_fqbin('RQ') -> <<"RQ">>;
msg_name_to_fqbin('AddRQRequest') -> <<"AddRQRequest">>;
msg_name_to_fqbin('RQLabels') -> <<"RQLabels">>;
msg_name_to_fqbin('AddRQResponse') -> <<"AddRQResponse">>;
msg_name_to_fqbin('DeleteRQRequest') -> <<"DeleteRQRequest">>;
msg_name_to_fqbin('DeleteRQResponse') -> <<"DeleteRQResponse">>;
msg_name_to_fqbin('GetRQRequest') -> <<"GetRQRequest">>;
msg_name_to_fqbin('GetRQResponse') -> <<"GetRQResponse">>;
msg_name_to_fqbin('MatchEntryRequest.EntryValue') ->
    <<"MatchEntryRequest.EntryValue">>;
msg_name_to_fqbin('MatchEntryRequest') -> <<"MatchEntryRequest">>;
msg_name_to_fqbin('MatchEntryResponse') -> <<"MatchEntryResponse">>;
msg_name_to_fqbin('Request') -> <<"Request">>;
msg_name_to_fqbin('Response') -> <<"Response">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"NodeStatus">>) -> 'NodeStatus';
fqbin_to_enum_name(<<"ResponseStatus.Status">>) -> 'ResponseStatus.Status';
fqbin_to_enum_name(<<"RQItemTypeOptions.Operator">>) ->
    'RQItemTypeOptions.Operator';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('NodeStatus') -> <<"NodeStatus">>;
enum_name_to_fqbin('ResponseStatus.Status') -> <<"ResponseStatus.Status">>;
enum_name_to_fqbin('RQItemTypeOptions.Operator') ->
    <<"RQItemTypeOptions.Operator">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> undefined.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "rqe_pb.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["rqe_pb.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["rqe_pb"].


get_msg_containment("rqe_pb") ->
    ['AddRQRequest', 'AddRQResponse', 'DeleteRQRequest',
     'DeleteRQResponse', 'GetRQRequest', 'GetRQResponse',
     'MatchEntryRequest', 'MatchEntryRequest.EntryValue',
     'MatchEntryResponse', 'NodeInfo', 'RQ', 'RQItem',
     'RQItemTypeOptions', 'RQLabel', 'RQLabels', 'Request',
     'Response', 'ResponseStatus', 'StatusRequest',
     'StatusResponse'];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("rqe_pb") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("rqe_pb") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("rqe_pb") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("rqe_pb") ->
    ['NodeStatus', 'RQItemTypeOptions.Operator',
     'ResponseStatus.Status'];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"RQ">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"ResponseStatus">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"RQLabels">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"RQItemTypeOptions">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"StatusRequest">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"Request">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"MatchEntryRequest">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"GetRQRequest">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"DeleteRQRequest">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"AddRQRequest">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"StatusResponse">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"Response">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"MatchEntryResponse">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"MatchEntryRequest.EntryValue">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"GetRQResponse">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"DeleteRQResponse">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"AddRQResponse">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"RQLabel">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"RQItem">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(<<"NodeInfo">>) -> "rqe_pb";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"RQItemTypeOptions.Operator">>) -> "rqe_pb";
get_proto_by_enum_name_as_fqbin(<<"ResponseStatus.Status">>) -> "rqe_pb";
get_proto_by_enum_name_as_fqbin(<<"NodeStatus">>) -> "rqe_pb";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.10.1".

gpb_version_as_list() ->
    [4,10,1].
